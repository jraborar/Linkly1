// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"workspace": {
		"js": {
			"collapse.js": function (exports, module, require) {
				eval("( function ( $ ) {\n\n\t$.fn.extend( {\n\n\t\ttva_collapse: function ( settings ) {\n\n\t\t\treturn this.each( function () {\n\n\t\t\t\tvar $this = $( this ),\n\t\t\t\t\t$parent = $this.parent();\n\n\t\t\t\t$this.addClass( settings.class_collapsed );\n\t\t\t\t$this.removeClass( settings.class_expanded );\n\n\t\t\t\tif ( false === $this.hasClass( 'tva_chapter_headline' ) ) {\n\t\t\t\t\t$parent.find( '.tve-chapters-wrapper' ).slideUp();\n\t\t\t\t\t$parent.find( '.tve-chapters-wrapper' ).length === 0\n\t\t\t\t\t\t? $parent.find( '.tve-lessons-wrapper' ).slideUp()\n\t\t\t\t\t\t: '';\n\n\t\t\t\t} else if ( $this.hasClass( 'tva_chapter_headline' ) ) {\n\t\t\t\t\t$parent.find( '.tve-lessons-wrapper' ).slideUp();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\ttva_expand: function ( settings ) {\n\n\t\t\treturn this.each( function () {\n\n\t\t\t\tvar $this = $( this ),\n\t\t\t\t\t$parent = $this.parent();\n\n\t\t\t\t$this.removeClass( settings.class_collapsed );\n\t\t\t\t$this.addClass( settings.class_expanded );\n\n\t\t\t\tif ( false === $this.hasClass( 'tva_chapter_headline' ) ) {\n\t\t\t\t\t$parent.find( '.tve-chapters-wrapper' ).slideDown();\n\t\t\t\t\t$parent.find( '.tve-chapters-wrapper' ).length === 0\n\t\t\t\t\t\t? $parent.find( '.tve-lessons-wrapper' ).slideDown()\n\t\t\t\t\t\t: '';\n\t\t\t\t} else if ( $this.hasClass( 'tva_chapter_headline' ) ) {\n\t\t\t\t\t$parent.find( '.tve-lessons-wrapper' ).slideDown();\n\t\t\t\t}\n\n\t\t\t} );\n\t\t}\n\t} );\n\n\tmodule.exports = function ( options ) {\n\n\t\tvar _defaults = {\n\t\t\t\tclass_expanded: 'tva-expanded',\n\t\t\t\tclass_collapsed: 'tva-collapsed',\n\t\t\t\tcollapse_modules: false,\n\t\t\t\tcollapse_chapters: false\n\t\t\t},\n\t\t\tsettings = $.extend( _defaults, options );\n\n\t\treturn this.each( function () {\n\n\t\t\tvar $this = $( this ),\n\t\t\t\tselectors = [];\n\n\t\t\tif ( settings.collapse_modules ) {\n\t\t\t\tselectors.push( '.tva-cm-module .tva-module-header' );\n\t\t\t}\n\n\t\t\tif ( settings.collapse_chapters ) {\n\t\t\t\tselectors.push( 'h2.tva_chapter_headline' );\n\t\t\t}\n\n\t\t\tvar concat = selectors.join( ',' );\n\n\t\t\tvar $selectors = $this.find( concat );\n\n\t\t\t$selectors.tva_collapse( settings );\n\n\t\t\t$selectors.off( 'click' ).on( 'click', function ( event ) {\n\n\t\t\t\tvar $this = $( this );\n\n\t\t\t\tif ( event.target.tagName.toLowerCase() === 'a' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( $this.hasClass( settings.class_collapsed ) ) {\n\t\t\t\t\t$this.tva_expand( settings );\n\n\t\t\t\t} else {\n\t\t\t\t\t$this.tva_collapse( settings );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n} )( jQuery );\n//# sourceURL=workspace/js/collapse.js");
			},
			"frontend.js": function (exports, module, require) {
				eval("/**\n * Created by Pop Aurelian on 21-Feb-17.\n *\n * Included on Checkout Page in TAr Editor\n */\n\nvar ThriveAppFront = window.ThriveAppFront || {},\n\tThriveAppWidgets = window.ThriveAppWidgets || {};\n\n( function ( $ ) {\n\n\t$.fn.extend( {\n\t\ttva_collapsible: require( './collapse' ),\n\t\ttva_widget_collapsible: require( './widget_collapse' )\n\t} );\n\n\t//  add class to menu box\n\n\tif ( $( '.tva-header .tva-inner-header' ).children().length > 1 ) {\n\t\t$( '.tva-header .tva-inner-header div' ).last().addClass( 'tva-dropdownmenu' );\n\t}\n\n\t//\tdetect edge of menu so that the dropdown items dont flow outside the window\n\n\t$( '.tva-header > div > ul li' ).on( 'mouseenter', function ( e ) {\n\t\tif ( $( 'ul', this ).length ) {\n\t\t\tvar elm = $( 'ul:first', this ),\n\t\t\t\toff = elm.offset(),\n\t\t\t\tl = off.left,\n\t\t\t\tw = elm.width(),\n\t\t\t\tdocW = $( '.tva-header' ).width();\n\n\t\t\tvar isEntirelyVisible = ( l + w <= docW );\n\n\t\t\tif ( ! isEntirelyVisible ) {\n\t\t\t\t$( this ).parent().addClass( 'edge' );\n\t\t\t\t$( this ).find( \"ul\" ).addClass( 'edge' );\n\t\t\t}\n\t\t}\n\t} );\n\n\t$( '.tva-header > div' ).click( function () {\n\t\t$( this ).toggleClass( \"visible\" );\n\t} );\n\n\tvar markLesson = function ( completed ) {\n\n\t\tif ( ThriveAppFront.lesson.post_type !== 'tva_lesson' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar data = {\n\t\t\tlesson_id: ThriveAppFront.lesson_page,\n\t\t\tcompleted: false\n\t\t};\n\n\t\tif ( completed ) {\n\t\t\tdata.completed = true;\n\t\t}\n\n\t\t$.ajax( {\n\t\t\theaders: {\n\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t},\n\t\t\ttype: 'POST',\n\t\t\tdata: data,\n\t\t\turl: ThriveAppFront.routes.frontend + '/mark_lesson/'\n\t\t} ).done( function ( response, status, options ) {\n\t\t} );\n\t};\n\n\tif ( ! ThriveAppFront.is_inner_frame ) {\n\n\t\tvar tva_search_key;\n\n\t\tif ( ThriveAppFront.course_page && ThriveAppFront.allowed && ! ThriveAppFront.is_admin ) {\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\tcourse_id: ThriveAppFront.course_page\n\t\t\t\t},\n\t\t\t\turl: ThriveAppFront.routes.frontend + '/process_conversion/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\t//todo: should we do anything with the response ?\n\t\t\t} );\n\t\t}\n\n\t\tif ( ThriveAppFront.lesson_page && ThriveAppFront.allowed ) {\n\t\t\tmarkLesson();\n\t\t}\n\n\t\t$( '.tva-finish-lesson' ).on( 'click', function ( e ) {\n\t\t\tmarkLesson( true );\n\t\t} );\n\n\t\t$( '.tva-filter-checkbox-container' ).on( 'click', function ( e ) {\n\t\t\te.preventDefault();\n\n\t\t\tvar clear = $( this ).find( '.tva-filter-course-clear-filters' ),\n\t\t\t\tfilters_container = $( '.tva-filters-wrapper' ),\n\t\t\t\tsearch_container = $( '.tva-search-wrapper' ),\n\t\t\t\tchecked = $( this ).find( '.tva-filter' ).is( ':checked' );\n\n\t\t\t$( this ).find( '.tva-filter' ).prop( 'checked', ! checked );\n\n\t\t\tif ( clear.length > 0 ) {\n\t\t\t\tfilters_container.find( '.tva-filter-checkbox-container' ).each( function () {\n\t\t\t\t\t$( this ).children( \"div:first\" ).removeClass( 'tva-filter-checkbox-selected' );\n\t\t\t\t} );\n\t\t\t\tfilters_container.find( '.tva-filter' ).each( function () {\n\t\t\t\t\t$( this ).prop( \"checked\", false );\n\t\t\t\t} );\n\t\t\t\tsearch_container.find( '.tva-search-input' ).val( '' );\n\t\t\t}\n\n\t\t\tsetFilterCheckbox( this, redirectAfterFiltering );\n\n\t\t\tif ( clear.length > 0 ) {\n\t\t\t\t// handle the plain permalink case\n\t\t\t\tif ( tvaUrlParamExists( 'page_id', window.location.href ) ) {\n\t\t\t\t\tvar page_id = tvaGetParameterByName( 'page_id', window.location.href );\n\t\t\t\t\tvar alteredURL = \"?page_id=\" + page_id;\n\t\t\t\t} else {\n\t\t\t\t\tvar alteredURL = tvaRemoveParam( \"filters\", window.location.href );\n\t\t\t\t}\n\t\t\t\twindow.history.pushState( {}, document.title, alteredURL );\n\t\t\t}\n\n\t\t} );\n\n\t\t/**\n\t\t * Whenever the user changes any character on the search field we should filter everything\n\t\t */\n\t\tvar tvaTextInput = document.getElementById( 'tva_front_search' );\n\t\tvar tvaTimeout = null;\n\n\t\t/**\n\t\t * Add loader with some delay on course search\n\t\t * @param e\n\t\t */\n\t\tif ( tvaTextInput ) {\n\n\t\t\ttvaTextInput.onkeyup = function () {\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tif ( tvaTimeout ) {\n\t\t\t\t\tclearTimeout( tvaTimeout );\n\t\t\t\t}\n\n\t\t\t\ttvaTimeout = setTimeout( function () {\n\t\t\t\t\tif ( tva_search_key !== self.value ) {\n\t\t\t\t\t\tredirectAfterFiltering();\n\t\t\t\t\t}\n\t\t\t\t}, 300 );\n\t\t\t};\n\n\t\t\t$( '.tva-search-submit' ).live( 'click', function () {\n\t\t\t\tredirectAfterFiltering();\n\t\t\t} );\n\t\t}\n\n\t\tfunction setFilterCheckbox( elem, callback ) {\n\n\t\t\tvar checkbox = $( elem ).find( '.tva-filter' );\n\n\t\t\tif ( checkbox.is( \":checked\" ) ) {\n\t\t\t\t$( elem ).children( \"div:first\" ).addClass( 'tva-filter-checkbox-selected' );\n\t\t\t} else {\n\t\t\t\t$( elem ).children( \"div:first\" ).removeClass( 'tva-filter-checkbox-selected' );\n\t\t\t}\n\n\t\t\tif ( typeof callback === 'function' ) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\n\t\t$( 'a.tva-page-numbers' ).live( 'click', function () {\n\n\t\t\tvar page = $( this ).attr( 'data-tva-page-nr' );\n\n\t\t\tredirectAfterFiltering( page );\n\t\t} );\n\n\t\tfunction tvaRemoveParam( key, sourceURL ) {\n\n\t\t\tvar rtn = sourceURL.split( \"?\" )[ 0 ];\n\n\t\t\t// handle the plain permalink case\n\t\t\tif ( tvaUrlParamExists( 'page_id', window.location.href ) ) {\n\n\t\t\t\tvar page_id = tvaGetParameterByName( 'page_id', window.location.href );\n\t\t\t\trtn = rtn + \"?page_id=\" + page_id;\n\n\t\t\t\treturn rtn;\n\t\t\t}\n\n\t\t\treturn rtn;\n\t\t}\n\n\t\tfunction tvaUrlParamExists( param, url ) {\n\n\t\t\tif ( url.indexOf( '?' + param + '=' ) != - 1 ) {\n\t\t\t\treturn true;\n\t\t\t} else if ( url.indexOf( '&' + param + '=' ) != - 1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false\n\t\t}\n\n\t\tfunction tvaGetParameterByName( name, url ) {\n\n\t\t\tif ( ! url ) {\n\t\t\t\turl = window.location.href;\n\t\t\t}\n\t\t\tname = name.replace( /[\\[\\]]/g, \"\\\\$&\" );\n\t\t\tvar regex = new RegExp( \"[?&]\" + name + \"(=([^&#]*)|&|#|$)\" ),\n\t\t\t\tresults = regex.exec( url );\n\t\t\tif ( ! results ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( ! results[ 2 ] ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn decodeURIComponent( results[ 2 ].replace( /\\+/g, \" \" ) );\n\t\t}\n\n\t\tfunction redirectAfterFiltering( page ) {\n\n\t\t\tvar loading_css_class = 'tva-loading',\n\t\t\t\tcourse_container = $( '.tva-courses-container' );\n\n\t\t\tif ( true === course_container.hasClass( loading_css_class ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar loader = '<div class=\"tva-front-loader tva-spinner-css tva-spinner-scope\"><div class=\"tva-spinner-rolling\"><div></div></div></div>',\n\t\t\t\tfilter_terms = $( '.tva-filter-checkbox-container input:checkbox:checked' ).map( function () {\n\t\t\t\t\treturn $( this ).val();\n\t\t\t\t} ).get();\n\n\t\t\ttva_search_key = $( '.tva-search-input' ).val();\n\n\t\t\tcourse_container.addClass( loading_css_class );\n\t\t\tcourse_container.append( loader );\n\t\t\tcourse_container.find( \".tva-course-card\" ).remove();\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t\t},\n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: ThriveAppFront.routes.frontend + '/filters/',\n\t\t\t\tdata: {\n\t\t\t\t\ts: tva_search_key,\n\t\t\t\t\tterms: filter_terms,\n\t\t\t\t\tpage: page\n\t\t\t\t}\n\t\t\t} ).done( function ( response ) {\n\n\t\t\t\tcourse_container.removeClass( loading_css_class );\n\t\t\t\tcourse_container.empty().append( response );\n\n\t\t\t\tif ( ThriveAppFront.index_page ) {\n\t\t\t\t\tcourse_container.find( '.tva-course-description' ).addClass( 'scrollbar-macosx' ).scrollbar();\n\t\t\t\t}\n\n\t\t\t\t$( 'html, body' ).animate( {\n\t\t\t\t\tscrollTop: 0\n\t\t\t\t}, 400 );\n\n\t\t\t\t$( '.ttw-uni-page-numbers' ).on( 'click', function () {\n\t\t\t\t\tvar page = $( this ).attr( 'data-tva-page-nr' );\n\t\t\t\t\tredirectAfterFiltering( page );\n\t\t\t\t} );\n\n\t\t\t\tshowClearFiltersButton();\n\t\t\t} );\n\n\t\t}\n\n\t\tshowClearFiltersButton();\n\n\t\tfunction showClearFiltersButton() {\n\t\t\tvar activeFilters = $( '.tva-filters-container' ).find( '.tva-filter' ).is( ':checked' );\n\t\t\tvar display = '';\n\n\t\t\t/**\n\t\t\t * By default tva-clear-filters had inline block display so we keep it that way\n\t\t\t */\n\t\t\tactiveFilters === true ? display = 'inline-block' : 'none';\n\t\t\t$( '.tva-clear-filters' ).css( 'display', display );\n\t\t}\n\t}\n\n\t/**\n\t * validate apprentice register page\n\t */\n\tif ( ThriveAppFront.tva_register_page == true ) {\n\n\t\tfunction validateEmail( email ) {\n\t\t\tvar regex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\t\t\treturn regex.test( email );\n\t\t}\n\n\t\tvar password, confirm_password;\n\n\t\tjQuery( 'input[type=\"password\"]' ).on( 'change', function () {\n\t\t\tpassword = jQuery( \"input[name='user_pass']\" ).val();\n\t\t\tconfirm_password = jQuery( \"input[name='confirm_pass']\" ).val();\n\t\t} );\n\n\n\t\tjQuery( '#tva-register-button' ).on( 'click', function ( e ) {\n\t\t\tif ( ( validateEmail( jQuery( \"input[name=user_email]\" ).val() ) != true ) ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tjQuery( \".tva-password-mismatch\" ).fadeIn( \"slow\" );\n\t\t\t\tjQuery( '.tva-invalid-email' ).fadeIn( \"slow\" );\n\t\t\t}\n\n\t\t\tjQuery( 'input[name=\"user_pass\"], input[name=\"user_login\"]' ).each( function () {\n\t\t\t\tif ( jQuery( this ).val() == '' ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\tjQuery( \".tva-required-filed\" ).fadeOut( \"slow\" );\n\t\t\t\t\t\tjQuery( \".tva-invalid-email\" ).fadeOut( \"slow\" );\n\t\t\t\t\t}, 5000 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( password != confirm_password ) ) {\n\t\t\t\t\tjQuery( \".tva-invalid-password\" ).fadeIn( \"slow\" );\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( password == undefined ) {\n\t\t\t\t$( 'input[name=\"user_pass\"]' ).parent().next( 'p' ).fadeIn( 'slow' );\n\t\t\t}\n\n\t\t\tif ( confirm_password == undefined ) {\n\t\t\t\t$( 'input[name=\"confirm_pass\"]' ).parent().next( 'p' ).fadeIn( 'slow' );\n\t\t\t\t$( '#tva-register-button' ).addClass( 'tva-btn-margin-top' );\n\t\t\t}\n\n\n\t\t} );\n\n\t\tjQuery( 'input[name=\"user_pass\"], input[name=\"confirm_pass\"]' ).on( 'focusin', function () {\n\t\t\tjQuery( \".tva-invalid-password\" ).fadeOut( \"slow\" );\n\t\t} );\n\n\t\tjQuery( '#ta-registration-form input[type=email], input[name=\"user_pass\"], input[name=\"confirm_pass' ).on( 'focusin', function () {\n\t\t\tjQuery( \".tva-required-filed\" ).fadeOut( \"slow\" );\n\t\t\tjQuery( \".tva-invalid-email\" ).fadeOut( \"slow\" );\n\t\t} );\n\n\t\tjQuery( '#ta-registration-form input[type=email]' ).on( 'focusout', function () {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tdata = {\n\t\t\t\t\temail: self.val()\n\t\t\t\t};\n\t\t\tjQuery.ajax( {\n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: ThriveAppFront.routes.frontend + '/check_email/',\n\t\t\t\tdata: data\n\t\t\t} ).done( function ( response ) {\n\t\t\t\tif ( response == true ) {\n\t\t\t\t\tjQuery( '#tva-email-error-wrapper' ).fadeIn( 'slow' );\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\tjQuery( '#tva-email-error-wrapper' ).fadeOut( 'slow' )\n\t\t\t\t\t}, 5000 );\n\t\t\t\t}\n\t\t\t\tjQuery( '#tva-register-button' ).prop( \"disabled\", response );\n\t\t\t} );\n\t\t} );\n\t}\n\n\tjQuery( '.tva-register-url' ).on( 'click', function () {\n\t\tdocument.cookie = 'tva_lesson_to_redirect=' + window.location.href + '; path=/';\n\t} );\n\n\t/**\n\t * Handle comments form\n\t */\n\tif ( ( ThriveAppFront.course.comment_status == 'open' || ThriveAppFront.lesson.comment_status == 'open' ) && ThriveAppFront.has_comment_plugin == false ) {\n\n\t\t$( document ).ready( function () {\n\t\t\tcomments.tvaGetGuestData( $( '.tva-comments-form' ) );\n\t\t\tvar post_id = Object.keys( ThriveAppFront.lesson ).length > 0 ? ThriveAppFront.lesson.ID : ThriveAppFront.course_ref_post_id;\n\n\t\t\t/**\n\t\t\t * Get available comments\n\t\t\t */\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t\t},\n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: ThriveAppFront.routes.frontend + '/comments/',\n\t\t\t\tdata: {\n\t\t\t\t\tcomment_data: {\n\t\t\t\t\t\tcomment_post_ID: post_id,\n\t\t\t\t\t\tcomment_term_ID: post_id == ThriveAppFront.course_ref_post_id ? ThriveAppFront.course.ID : ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ).done( function ( response ) {\n\t\t\t\tcomments.comment_count = response.comment_count;\n\t\t\t\tcomments.all_comments = response.comments;\n\t\t\t\tcomments.user_can_manage_comments = response.approve;\n\t\t\t\tcomments.renderCommentsList();\n\t\t\t} );\n\n\t\t} );\n\n\t\t$( '#tva-comments-list' ).on( 'click', '.tva-reply-button', function ( e ) {\n\n\t\t\t/**\n\t\t\t * Close any reply form that are already open\n\t\t\t */\n\t\t\t$( '.tva-comment-form' ).each( function ( index, item ) {\n\t\t\t\tif ( $( item ).parent().attr( 'data-comment-id' ) !== $( e.currentTarget ).parent().attr( 'data-comment-id' ) ) {\n\t\t\t\t\t$( item ).slideUp( 'slow' );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t$( this ).parent( '.tva-single-comment' ).find( '.tva-comment-form' ).slideToggle();\n\n\t\t\tif ( ThriveAppFront.is_user_logged_in == false ) {\n\t\t\t\tcomments.tvaGetGuestData( $( this ) );\n\t\t\t}\n\t\t} );\n\n\t\t$( '.tva-frontend-template' ).on( 'click', '#tva-submit-comment', function () {\n\t\t\tvar self = $( this ),\n\t\t\t\tcomment = comments.tvaValidateComment( self );\n\n\t\t\tif ( false === comment ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t\t},\n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: ThriveAppFront.routes.frontend + '/create_comment/',\n\t\t\t\tdata: {\n\t\t\t\t\tcomment_data: comment\n\t\t\t\t}\n\t\t\t} ).done( function ( response ) {\n\t\t\t\t$( '#tva-comments-list' ).html( '' );\n\t\t\t\t$( self ).parent( '.tva-comments-form' ).find( '.tva-comment-content' ).val( '' );\n\t\t\t\tcomments.childs = '';\n\t\t\t\tcomments.html = '';\n\t\t\t\tcomments.comment_count = response.comment_count;\n\n\t\t\t\tcomments.renderCommentListHeader();\n\n\t\t\t\t_.each( response.comments, function ( comment ) {\n\t\t\t\t\tcomments.html += '<div class=\"tva-comment-holder\">';\n\t\t\t\t\tcomments.renderComment( comment );\n\t\t\t\t\tcomments.html += '</div>';\n\t\t\t\t} );\n\n\t\t\t\t$( '#tva-comments-list' ).html( comments.html );\n\n\t\t\t} ).fail( function ( error ) {\n\t\t\t\t$( self ).parent().find( '.tva-error-message' ).remove();\n\t\t\t\tcomments.tvaShowError( error.status, self )\n\t\t\t} );\n\n\t\t} );\n\n\t\t/**\n\t\t * Comments object\n\t\t */\n\t\tvar comments = {\n\t\t\tcomment_count: 0,\n\t\t\tall_comments: [],\n\t\t\tchilds: '',\n\t\t\thtml: '',\n\t\t\tuser_can_manage_comments: false,\n\n\t\t\t/**\n\t\t\t * Render a parent comment ant it's childs\n\t\t\t * @param item\n\t\t\t */\n\t\t\trenderComment: function ( item ) {\n\t\t\t\tthis.html += '<div class=\"tva-single-comment\" data-comment-id=\"' + item.comment_ID + '\">';\n\t\t\t\tthis.html += '<div class=\"tva-comment-author\">' + item.comment_author + '</div>';\n\n\t\t\t\tif ( item.comment_approved != true ) {\n\t\t\t\t\tvar state = this.user_can_manage_comments === true ? ThriveAppFront.t.This : ThriveAppFront.t.Your;\n\t\t\t\t\tthis.html += '<div class=\"tva-comment-approval\">';\n\t\t\t\t\tthis.html += state + \" \" + ThriveAppFront.t.Moderation;\n\t\t\t\t\tthis.html += '</div>';\n\t\t\t\t}\n\n\t\t\t\tthis.html += '<p class=\"tva-comment\">' + item.comment_content.replace( /(?:\\r\\n|\\r|\\n)/g, '<br>' ) + '</p>';\n\t\t\t\tthis.tvaCommentReplyForm();\n\t\t\t\tthis.html += '</div>';\n\n\t\t\t\tif ( ( item.children !== null ) && ( item.children.length > 0 ) ) {\n\t\t\t\t\tthis.childs = item.children;\n\t\t\t\t\tthis.html += '<div class=\"tva-children-list\">';\n\t\t\t\t\tvar self = this;\n\n\t\t\t\t\t_.each( this.childs, function ( child ) {\n\t\t\t\t\t\tself.renderComment( child );\n\t\t\t\t\t} );\n\n\t\t\t\t\tthis.html += '</div>';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Validate comment before submit\n\t\t\t * @param context\n\t\t\t */\n\t\t\ttvaValidateComment: function ( context ) {\n\t\t\t\tcontext.parent().find( '.tva-error-message' ).remove();\n\n\t\t\t\tvar comment_data = this.tvaPrepareCommentData( context );\n\n\t\t\t\tif ( comment_data.comment_content == '' ) {\n\t\t\t\t\treturn this.tvaShowError( 'invalid_comment_content', context );\n\t\t\t\t}\n\n\t\t\t\tif ( comment_data.comment_author == '' ) {\n\t\t\t\t\treturn this.tvaShowError( 'invalid_comment_author', context );\n\t\t\t\t}\n\n\t\t\t\tif ( comment_data.comment_author_email == '' ) {\n\t\t\t\t\treturn this.tvaShowError( 'missing_author_email', context );\n\t\t\t\t}\n\n\t\t\t\tvar email_regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n\t\t\t\t\turl_regex = /(http(s)?:\\/\\/.)(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n\n\t\t\t\tif ( email_regex.test( comment_data.comment_author_email ) === false ) {\n\t\t\t\t\treturn this.tvaShowError( 'invalid_author_email', context );\n\t\t\t\t}\n\n\t\t\t\tif ( ( comment_data.comment_author_url != '' ) && ( url_regex.test( comment_data.comment_author_url ) === false ) ) {\n\t\t\t\t\treturn this.tvaShowError( 'invalid_url', context )\n\t\t\t\t}\n\n\t\t\t\treturn comment_data;\n\t\t\t},\n\n\t\t\trenderCommentListHeader: function () {\n\t\t\t\tthis.html += '<div class=\"tva-comments-number\">';\n\t\t\t\tif ( comments.comment_count === 1 ) {\n\t\t\t\t\tthis.html += '<p>' + ThriveAppFront.t.SingleComment + '</p>';\n\t\t\t\t} else if ( comments.comment_count > 1 ) {\n\t\t\t\t\tthis.html += '<p>' + this.comment_count + ' ' + ThriveAppFront.t.MultipleComments + '</p>';\n\t\t\t\t}\n\t\t\t\tthis.html += '</div>';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Render comments list\n\t\t\t */\n\t\t\trenderCommentsList: function () {\n\t\t\t\tvar self = this;\n\t\t\t\tthis.renderCommentListHeader();\n\t\t\t\tthis.html += '</div>';\n\t\t\t\t_.each( this.all_comments, function ( item ) {\n\t\t\t\t\tself.html += '<div class=\"tva-comment-holder\">';\n\t\t\t\t\tself.renderComment( item );\n\t\t\t\t\tself.html += '</div>';\n\t\t\t\t} );\n\n\t\t\t\t$( '#tva-comments-list' ).append( this.html );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Render a child comment\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\ttvaCommentReplyForm: function () {\n\t\t\t\tthis.html += '<button class=\"tva-reply-button\">' + ThriveAppFront.t.Reply + '</button>';\n\t\t\t\tthis.html += '<div class=\"tva-comment-form\">';\n\t\t\t\tthis.html += '<textarea class=\"tva-comment-content\"></textarea>';\n\n\t\t\t\tif ( ! ThriveAppFront.current_user.ID ) {\n\t\t\t\t\tthis.html += '<div class=\"tva-guest-fileds\">';\n\t\t\t\t\tthis.html += '<p class=\"tva-guest\">' + ThriveAppFront.t.Guest + '</p>';\n\t\t\t\t\tthis.html += '<span>' + ThriveAppFront.t.GuestName + '</span>';\n\t\t\t\t\tthis.html += '<input type=\"text\" class=\"tva-comment-input\" name=\"name\">';\n\t\t\t\t\tthis.html += '<span>' + ThriveAppFront.t.GuestEmail + '</span>';\n\t\t\t\t\tthis.html += '<input type=\"text\" class=\"tva-comment-input\" name=\"email\">';\n\t\t\t\t\tthis.html += '<span>' + ThriveAppFront.t.GuestUrl + '</span>';\n\t\t\t\t\tthis.html += '<input type=\"text\" class=\"tva-comment-input\" name=\"url\">';\n\t\t\t\t\tthis.html += '</div>';\n\t\t\t\t}\n\n\t\t\t\tthis.html += '<button id=\"tva-submit-comment\" >' + ThriveAppFront.t.SubmitComment + '</button>';\n\t\t\t\tthis.html += '</div>';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Prepare comment data\n\t\t\t * @param context\n\t\t\t * @returns data\n\t\t\t */\n\t\t\ttvaPrepareCommentData: function ( context ) {\n\t\t\t\tvar parent_id = context.parent().parent().attr( 'data-comment-id' );\n\t\t\t\tvar post_id = Object.keys( ThriveAppFront.lesson ).length > 0 ?\n\t\t\t\t\tThriveAppFront.lesson.ID :\n\t\t\t\t\tThriveAppFront.course_ref_post_id,\n\n\t\t\t\t\tcomment_author = ThriveAppFront.is_user_logged_in != false ?\n\t\t\t\t\t\tThriveAppFront.current_user.display_name :\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"name\"]' ).val(),\n\n\t\t\t\t\tcomment_author_email = ThriveAppFront.is_user_logged_in != false ?\n\t\t\t\t\t\tThriveAppFront.current_user.user_email :\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"email\"]' ).val(),\n\n\t\t\t\t\tcomment_author_url = ThriveAppFront.is_user_logged_in != false ?\n\t\t\t\t\t\tThriveAppFront.current_user.user_url :\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"url\"]' ).val(),\n\n\t\t\t\t\tdata = {\n\t\t\t\t\t\tcomment_post_ID: post_id,\n\t\t\t\t\t\tcomment_content: context.parent().find( '.tva-comment-content' ).val(),\n\t\t\t\t\t\tcomment_parent: parent_id !== undefined ? parent_id : 0,\n\t\t\t\t\t\tcomment_author: comment_author,\n\t\t\t\t\t\tcomment_author_email: comment_author_email,\n\t\t\t\t\t\tcomment_author_url: comment_author_url,\n\t\t\t\t\t\tuser_id: ThriveAppFront.current_user.ID ? ThriveAppFront.current_user.ID : '',\n\t\t\t\t\t\tcomment_type: ''\n\t\t\t\t\t};\n\n\t\t\t\tdata.comment_term_ID = Object.keys( ThriveAppFront.lesson ).length === 0 ? ThriveAppFront.course.ID : '';\n\n\t\t\t\treturn data;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Handle comment errors\n\t\t\t * @param key\n\t\t\t * @param context\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\ttvaShowError: function ( key, context ) {\n\t\t\t\tvar html = '';\n\n\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t/**\n\t\t\t\t\t * 409 and 429 are the codes for wp errors\n\t\t\t\t\t */\n\t\t\t\t\tcase 409:\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.DuplicateComment + '</div>';\n\t\t\t\t\t\tcontext.parent().append( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 429:\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.CommentToFast + '</div>';\n\t\t\t\t\t\tcontext.parent().append( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'invalid_comment_content':\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.EmptyComment + '</div>';\n\t\t\t\t\t\tcontext.parent().find( '.tva-comment-content' ).after( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'invalid_comment_author':\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.EmptyName + '</div>';\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"name\"]' ).after( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'missing_author_email':\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.EmptyEmail + '</div>';\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"email\"]' ).after( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'invalid_author_email':\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.InvalidEmail + '</div>';\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"email\"]' ).after( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'invalid_url':\n\t\t\t\t\t\thtml = '<div class=\"tva-error-message\">' + ThriveAppFront.t.InvalidUrl + '</div>';\n\t\t\t\t\t\tcontext.parent().find( 'input[name=\"url\"]' ).after( html );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get user data from cookies\n\t\t\t * @param context\n\t\t\t */\n\t\t\ttvaGetGuestData: function ( context ) {\n\t\t\t\tif ( ThriveAppFront.is_user_logged_in != true ) {\n\t\t\t\t\tvar guest_name = decodeURIComponent( this.tvaGetCookieData( 'tva_cookie_user_name' ) ).slice( 1, - 1 ),\n\t\t\t\t\t\tguest_email = decodeURIComponent( this.tvaGetCookieData( 'tva_cookie_user_email' ) ).slice( 1, - 1 ),\n\t\t\t\t\t\tguest_url = decodeURIComponent( this.tvaGetCookieData( 'tva_cookie_user_url' ) ).slice( 1, - 1 );\n\n\t\t\t\t\tcontext.parent().find( 'input[name=\"name\"]' ).val( guest_name );\n\t\t\t\t\tcontext.parent().find( 'input[name=\"email\"]' ).val( guest_email );\n\t\t\t\t\tcontext.parent().find( 'input[name=\"url\"]' ).val( guest_url.replace( /\\\\\\//g, \"/\" ) );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get data from a specific cookie\n\t\t\t * @param cname\n\t\t\t * @returns {*}\n\t\t\t */\n\t\t\ttvaGetCookieData: function ( cname ) {\n\t\t\t\tvar name = cname + \"=\";\n\t\t\t\tvar ca = document.cookie.split( ';' );\n\t\t\t\tfor ( var i = 0; i < ca.length; i ++ ) {\n\t\t\t\t\tvar c = ca[ i ];\n\t\t\t\t\twhile ( c.charAt( 0 ) == ' ' ) {\n\t\t\t\t\t\tc = c.substring( 1 );\n\t\t\t\t\t}\n\t\t\t\t\tif ( c.indexOf( name ) == 0 ) {\n\t\t\t\t\t\treturn c.substring( name.length, c.length );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t};\n\t}\n\n\t$( '.tva-cm-lesson' ).on( 'mousedown', function () {\n\t\t$( this ).addClass( 'tva-lesson-pressed' );\n\t} );\n\n\t$( '.tva-cm-lesson' ).on( 'mouseup', function () {\n\t\t$( this ).removeClass( 'tva-lesson-pressed' );\n\t} );\n\n\t/**\n\t * Makes a widget collapse based on config\n\t *\n\t * @param widget_id string\n\t * @param config {{modules, chapters}} whether to apply collapsible\n\t */\n\tfunction tva_do_widgets_collapsible( widget_id, config ) {\n\n\t\tvar selectors = [],\n\t\t\tglue = '#' + widget_id; //search module and chapters title only in these wrappers\n\n\t\t/**\n\t\t * Do not apply collapsible if modules or chapters are not set to\n\t\t */\n\t\tif ( ! config.modules && ! config.chapters ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( config.modules ) {\n\t\t\tselectors.push( 'h2' );//modules\n\t\t}\n\n\t\tif ( config.chapters ) {\n\t\t\tselectors.push( 'h3.tva-chapter-title' ); //chapters\n\t\t}\n\n\t\t//prepare selectors\n\t\tselectors = ( glue + ' ' + selectors.join( ', ' + glue + ' ' ) );\n\n\t\tvar $selectors = $( selectors );\n\n\t\t//apply jQuery plugin\n\t\t$selectors.tva_widget_collapsible( {\n\t\t\tcurrent_post_id: parseInt( ThriveAppFront.lesson_page ) || null\n\t\t} );\n\t}\n\n\t$( document ).ready( function () {\n\n\t\t$( '.tva-cm-container' ).tva_collapsible( ThriveAppFront.template );\n\n\t\t//do widgets collapsible\n\t\tif ( ThriveAppWidgets.config ) {\n\t\t\tvar widgets = Object.keys( ThriveAppWidgets.config );\n\t\t\t$.each( widgets, function ( index, widget_id ) {\n\t\t\t\ttva_do_widgets_collapsible( widget_id, ThriveAppWidgets.config[ widget_id ] );\n\t\t\t} );\n\t\t}\n\n\t\tvar $course_desc = $( '.tva-course-description' );\n\n\t\tif ( ThriveAppFront.index_page ) {\n\t\t\t$course_desc.addClass( 'scrollbar-macosx' ).scrollbar();\n\t\t}\n\n\t\tif ( typeof tve_frontend_options !== 'undefined' && ! tve_frontend_options.is_editor_page ) {\n\t\t\t//This code must be executed only in frontend\n\n\t\t\tvar transport = tva_get_url_param( 'pp' );\n\t\t\tif ( parseInt( ThriveAppFront.is_checkout ) && parseInt( ThriveAppFront.is_user_logged_in ) && transport && transport.toLowerCase() === 'sendowl' && ( tva_get_url_param( 'pid' ) || tva_get_url_param( 'bid' ) ) ) {\n\n\t\t\t\tvar data = [];\n\t\t\t\tdata.push( {\n\t\t\t\t\tname: 'payment_processor',\n\t\t\t\t\tvalue: tva_get_url_param( 'pp' )\n\t\t\t\t} );\n\n\t\t\t\tdata.push( {\n\t\t\t\t\tname: 'bid',\n\t\t\t\t\tvalue: tva_get_url_param( 'bid' )\n\t\t\t\t} );\n\n\t\t\t\tdata.push( {\n\t\t\t\t\tname: 'pid',\n\t\t\t\t\tvalue: tva_get_url_param( 'pid' )\n\t\t\t\t} );\n\n\t\t\t\tdata.push( {\n\t\t\t\t\tname: 'thrv_so_discount',\n\t\t\t\t\tvalue: tva_get_url_param( 'thrv_so_discount' )\n\t\t\t\t} );\n\n\t\t\t\t$.ajax( {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'POST',\n\t\t\t\t\tdata: data,\n\t\t\t\t\turl: ThriveAppFront.routes.user + '/process_redirect/'\n\t\t\t\t} ).done( function ( response ) {\n\t\t\t\t\tif ( response.message ) {\n\t\t\t\t\t\tTCB_Front.toast( response.message, false );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( response.redirect ) {\n\t\t\t\t\t\tdocument.location.href = response.redirect;\n\t\t\t\t\t}\n\t\t\t\t} ).fail( function ( response ) {\n\t\t\t\t\tTCB_Front.toast( response.responseJSON.message, true );\n\n\t\t\t\t} );\n\t\t\t}\n\n\n\t\t\t/**\n\t\t\t * Gets an url param value from param name\n\t\t\t *\n\t\t\t * @param paramName\n\t\t\t *\n\t\t\t * @returns {*|number}\n\t\t\t */\n\t\t\tfunction tva_get_url_param( paramName ) {\n\t\t\t\tvar results = new RegExp( '[\\?&]' + paramName + '=([^&#]*)' ).exec( window.location.search );\n\n\t\t\t\treturn ( results !== null ) ? results[ 1 ] || 0 : false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process the checkout elements\n\t\t\t */\n\t\t\tThriveGlobal.$j( '.thrv-checkout' ).each( function () {\n\n\t\t\t\t$( this ).find( '[data-type=\"password\"] input' ).attr( 'type', 'password' );\n\n\t\t\t\tvar _states_with_no_state_bar = [ 'forgot_password', 'reset_confirmation' ],\n\t\t\t\t\terror_class = 'tcb-form-error';\n\n\t\t\t\t/**\n\t\t\t\t * Toggle checkout states\n\t\t\t\t *\n\t\t\t\t * @param event\n\t\t\t\t */\n\t\t\t\tfunction show_state( event ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tvar $target = ThriveGlobal.$j( this ),\n\t\t\t\t\t\t$checkout = $target.closest( '.thrv-checkout' );\n\n\t\t\t\t\t$checkout.find( '.tcb-active-state' ).removeClass( 'tcb-active-state' );\n\t\t\t\t\t$checkout.find( '.tcb-tva-checkout-form-wrapper' ).addClass( 'tcb-permanently-hidden' );\n\n\t\t\t\t\t$target.addClass( 'tcb-active-state' );\n\t\t\t\t\t$checkout.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"' + $target.attr( 'data-instance' ) + '\"]' ).removeClass( 'tcb-permanently-hidden' );\n\t\t\t\t}\n\n\t\t\t\tfunction switch_state_lnk( event ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tvar $target = ThriveGlobal.$j( this ),\n\t\t\t\t\t\t$checkout = $target.closest( '.thrv-checkout' ),\n\t\t\t\t\t\t_instance = $target.attr( 'data-go_to_instance' );\n\n\t\t\t\t\t$checkout.find( '.tcb-tva-checkout-form-wrapper' ).addClass( 'tcb-permanently-hidden' );\n\t\t\t\t\t$checkout.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"' + _instance + '\"]' ).removeClass( 'tcb-permanently-hidden' );\n\n\t\t\t\t\tif ( _instance === 'login' ) {\n\t\t\t\t\t\t$checkout.find( '.tcb-active-state' ).removeClass( 'tcb-active-state' );\n\t\t\t\t\t\t$checkout.find( '.thrv-button-group-item[data-instance=\"' + _instance + '\"]' ).addClass( 'tcb-active-state' );\n\t\t\t\t\t}\n\n\t\t\t\t\ttoggle_instance_bar( $checkout, _instance );\n\t\t\t\t}\n\n\t\t\t\tfunction toggle_instance_bar( $checkout, current_state ) {\n\t\t\t\t\t$checkout.find( '.thrv-button-group' ).toggleClass( 'tcb-permanently-hidden', _.contains( _states_with_no_state_bar, current_state ) );\n\t\t\t\t}\n\n\t\t\t\tfunction on_input( event ) {\n\t\t\t\t\tvar input = event.currentTarget;\n\n\t\t\t\t\tif ( input.classList.contains( error_class ) ) {\n\t\t\t\t\t\tinput.nextSibling.remove();\n\t\t\t\t\t\tinput.classList.remove( error_class );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction on_focus() {\n\t\t\t\t\tthis.placeholder = '';\n\t\t\t\t}\n\n\t\t\t\tfunction on_blur() {\n\t\t\t\t\tthis.placeholder = this.getAttribute( 'data-placeholder' );\n\t\t\t\t}\n\n\t\t\t\tfunction on_submit( event ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tvar $target = ThriveGlobal.$j( this ),\n\t\t\t\t\t\t$checkout = $target.closest( '.thrv-checkout' ),\n\t\t\t\t\t\t$current_from = $target.closest( 'form' ),\n\t\t\t\t\t\tdata = $target.serializeArray(),\n\t\t\t\t\t\thash = $this.find( 'input[name=\"config\"]' ).val(),\n\t\t\t\t\t\tindexed_array = {},\n\t\t\t\t\t\terrors_to_show = '',\n\t\t\t\t\t\t$submit_button = $target.find( 'button' );\n\n\t\t\t\t\tif ( ! hash ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.map( data, function ( n, i ) {\n\t\t\t\t\t\tindexed_array[ n[ 'name' ] ] = n[ 'value' ];\n\t\t\t\t\t} );\n\n\t\t\t\t\t_.some( indexed_array, function ( value, index ) {\n\t\t\t\t\t\tif ( value.length === 0 ) {\n\t\t\t\t\t\t\terrors_to_show = 'empty_fields';\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( index === 'email' && ! tve_is_email( value ) ) {\n\t\t\t\t\t\t\terrors_to_show = 'email';\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( index === 'confirm_password' && value !== indexed_array[ 'password' ] ) {\n\t\t\t\t\t\t\terrors_to_show = 'passwords_not_match';\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( errors_to_show.length > 0 ) {\n\t\t\t\t\t\tvar form_config = tve_unserialize( TCB_Front.Base64.decode( hash ) ),\n\t\t\t\t\t\t\terror = document.createElement( 'span' );\n\t\t\t\t\t\terror.classList.add( error_class );\n\t\t\t\t\t\terror.innerText = form_config.error_messages[ errors_to_show ];\n\n\t\t\t\t\t\tif ( errors_to_show === 'empty_fields' ) {\n\t\t\t\t\t\t\t$current_from.find( 'input[type=\"text\"], input[type=\"email\"], input[type=\"password\"]' ).not( '.' + error_class ).filter( function () {\n\t\t\t\t\t\t\t\treturn ! this.value;\n\t\t\t\t\t\t\t} ).addClass( error_class ).after( error );\n\t\t\t\t\t\t} else if ( errors_to_show === 'email' ) {\n\t\t\t\t\t\t\t$current_from.find( 'input[type=\"email\"]' ).not( '.' + error_class ).addClass( error_class ).after( error );\n\t\t\t\t\t\t} else if ( errors_to_show === 'passwords_not_match' ) {\n\t\t\t\t\t\t\t$current_from.find( 'input[type=\"password\"]' ).not( '.' + error_class ).addClass( error_class ).after( error );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$submit_button.attr( 'disabled', 'disabled' );\n\n\t\t\t\t\tdata.push( {\n\t\t\t\t\t\tname: 'payment_processor',\n\t\t\t\t\t\tvalue: tva_get_url_param( 'pp' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tdata.push( {\n\t\t\t\t\t\tname: 'bid',\n\t\t\t\t\t\tvalue: tva_get_url_param( 'bid' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tdata.push( {\n\t\t\t\t\t\tname: 'pid',\n\t\t\t\t\t\tvalue: tva_get_url_param( 'pid' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tdata.push( {\n\t\t\t\t\t\tname: 'thrv_so_discount',\n\t\t\t\t\t\tvalue: tva_get_url_param( 'thrv_so_discount' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tvar route = get_route_name( $target.attr( 'data-route' ) );\n\n\t\t\t\t\t$.ajax( {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'X-WP-Nonce': ThriveAppFront.nonce\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\turl: ThriveAppFront.routes.user + '/' + route + '/'\n\t\t\t\t\t} ).fail( function ( response ) {\n\n\t\t\t\t\t\tif ( _.contains( [\n\t\t\t\t\t\t\t'existing_user_email',\n\t\t\t\t\t\t\t'existing_user_login'\n\t\t\t\t\t\t], response.responseJSON.code ) ) {\n\t\t\t\t\t\t\tvar form_config = tve_unserialize( TCB_Front.Base64.decode( hash ) ),\n\t\t\t\t\t\t\t\terror = document.createElement( 'span' );\n\n\t\t\t\t\t\t\terror.classList.add( error_class );\n\t\t\t\t\t\t\tvar html = form_config.error_messages[ 'existing_user_email' ];\n\t\t\t\t\t\t\thtml = html.replace( /\\[a\\]/g, '<a href=\"javascript:void(0)\" class=\"tva-switch-instance-link\" data-go_to_instance=\"login\">' );\n\t\t\t\t\t\t\thtml = html.replace( /\\[\\/a\\]/g, '</a>' );\n\n\t\t\t\t\t\t\tjQuery( error ).html( html );\n\n\t\t\t\t\t\t\t$current_from.find( 'input[type=\"email\"]' ).not( '.' + error_class ).addClass( error_class ).after( error );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tTCB_Front.toast( response.responseJSON.message, true );\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} ).done( function ( response ) {\n\t\t\t\t\t\tif ( response.message ) {\n\t\t\t\t\t\t\tTCB_Front.toast( response.message, false );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.state ) {\n\t\t\t\t\t\t\t$checkout.find( '.tcb-tva-checkout-form-wrapper' ).addClass( 'tcb-permanently-hidden' );\n\t\t\t\t\t\t\t$checkout.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"' + response.state + '\"]' ).removeClass( 'tcb-permanently-hidden' );\n\n\t\t\t\t\t\t\ttoggle_instance_bar( $checkout, response.state )\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.redirect ) {\n\t\t\t\t\t\t\tdocument.location.href = response.redirect;\n\t\t\t\t\t\t}\n\t\t\t\t\t} ).always( function () {\n\n\t\t\t\t\t\t$submit_button.removeAttr( 'disabled' );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Get route name\n\t\t\t\t *\n\t\t\t\t * @param route\n\t\t\t\t * @returns {string|*}\n\t\t\t\t */\n\t\t\t\tfunction get_route_name( route ) {\n\t\t\t\t\tvar name = '';\n\n\t\t\t\t\tswitch ( route ) {\n\t\t\t\t\t\tcase 'register':\n\t\t\t\t\t\t\tname = 'tva_register';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tname = route;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Bind Events for checkout elements\n\t\t\t\t *\n\t\t\t\t * @param $btn_group\n\t\t\t\t */\n\t\t\t\tfunction bind_events( $btn_group ) {\n\t\t\t\t\t$btn_group.off( 'click.thrv-button-group-item' ).on( 'click.thrv-button-group-item', '.thrv-button-group-item', show_state );\n\t\t\t\t}\n\n\n\t\t\t\tvar $this = $( this ),\n\t\t\t\t\t$form = $this.find( 'form' );\n\n\t\t\t\tbind_events( $this.find( '.thrv-button-group' ) );\n\n\t\t\t\t/**\n\t\t\t\t * Capture Submit Events\n\t\t\t\t */\n\t\t\t\t$form.off( 'submit' ).on( 'submit', on_submit );\n\n\t\t\t\tvar fields = [\n\t\t\t\t\t'input[type=\"text\"]',\n\t\t\t\t\t'input[type=\"email\"]',\n\t\t\t\t\t'input[type=\"password\"]'\n\t\t\t\t];\n\n\t\t\t\t$form.find( fields.join( ',' ) ).on( 'input', on_input ).on( 'focus', on_focus ).on( 'blur', on_blur );\n\n\t\t\t\t/**\n\t\t\t\t * Switch instance link\n\t\t\t\t */\n\t\t\t\t$this.off( 'click.tva-switch-instance-link' ).on( 'click.tva-switch-instance-link', '.tva-switch-instance-link', switch_state_lnk );\n\n\t\t\t\t$this.find( '.thrv-button-group-item[data-default=\"true\"]' ).click();\n\n\t\t\t} );\n\t\t}\n\t} );\n\n\tif ( ThriveAppFront.is_editor_page ) {\n\t\tTVE.add_filter( 'tcb_cloud_template_download', change_cloud_action );\n\t}\n\n\tfunction change_cloud_action( data ) {\n\t\tif ( ThriveAppFront.is_checkout || ThriveAppFront.is_thankyou ) {\n\t\t\tdata.action = 'tva_cloud_templates'\n\t\t}\n\n\t\treturn data;\n\t}\n\n} )( jQuery );\n//# sourceURL=workspace/js/frontend.js");
			},
			"widget_collapse.js": function (exports, module, require) {
				eval("/**\n * jQuery Module for Collapsible Widgets\n */\n( function ( $ ) {\n\n\tmodule.exports = function ( options ) {\n\n\t\tvar _defaults = {\n\t\t\t\tclass_expanded: 'tva-expanded',\n\t\t\t\tclass_collapsed: 'tva-collapsed',\n\t\t\t\tslide_time: 200,\n\t\t\t\tmodule_tag: 'h2',\n\t\t\t\tchapter_tag: 'h3',\n\t\t\t\tcurrent_post_id: null\n\t\t\t},\n\t\t\tsettings = $.extend( _defaults, options );\n\n\t\t/**\n\t\t * Checks if $item is module\n\t\t * @param $item {jquery}\n\t\t * @return boolean\n\t\t */\n\t\tfunction tva_is_module( $item ) {\n\n\t\t\treturn $item.is( settings.module_tag );\n\t\t}\n\n\t\t/**\n\t\t * Checks if $item is chapter\n\t\t * @param $item {jquery}\n\t\t * @return boolean\n\t\t */\n\t\tfunction tva_is_chapter( $item ) {\n\n\t\t\treturn $item.is( settings.chapter_tag );\n\t\t}\n\n\t\t/**\n\t\t * Gets children based on $item\n\t\t *\n\t\t * @param $item {jquery}\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_children( $item ) {\n\n\t\t\tvar children;\n\n\t\t\tif ( tva_is_module( $item ) ) {\n\n\t\t\t\tchildren = '.tva-chapter-lessons';\n\n\t\t\t\t//if a module doesn't have chapters we look for lessons as next level children\n\t\t\t\tchildren += $item.parent().find( '> .tva-chapter-lessons' ).length === 0 ? ', .tva-lessons-wrapper' : '';\n\n\t\t\t} else if ( tva_is_chapter( $item ) ) {\n\n\t\t\t\tchildren = '.tva-lessons-wrapper';\n\t\t\t}\n\n\t\t\treturn children;\n\t\t}\n\n\t\t/**\n\t\t * Expand children\n\t\t */\n\t\tfunction expand() {\n\n\t\t\tvar $this = $( this ),\n\t\t\t\tchildren = get_children( $this ),\n\t\t\t\t$parent = $this.parent();\n\n\t\t\t$parent.find( children ).slideDown( settings.slide_time );\n\n\t\t\tthis.classList.remove( settings.class_collapsed );\n\t\t\tthis.classList.add( settings.class_expanded );\n\t\t}\n\n\t\t/**\n\t\t * Collapse children\n\t\t */\n\t\tfunction collapse() {\n\n\t\t\tvar $this = $( this ),\n\t\t\t\tchildren = get_children( $this ),\n\t\t\t\t$parent = $this.parent();\n\n\t\t\t$this.addClass( settings.class_collapsed );\n\t\t\t$this.removeClass( settings.class_expanded );\n\n\t\t\t$parent.find( children ).slideUp( settings.slide_time );\n\t\t}\n\n\t\treturn this.each( function () {\n\n\t\t\tvar $this = $( this ),\n\t\t\t\t$parent = $this.parent(),\n\t\t\t\t$lesson = $parent.find( '.tva-lesson-container[data-id=\"' + settings.current_post_id + '\"]' );\n\n\t\t\ttry {\n\n\t\t\t\t//for current module or lesson do not collapse\n\t\t\t\tif ( settings.current_post_id === parseInt( $this.data( 'id' ) ) || $lesson.length > 0 ) {\n\t\t\t\t\texpand.apply( this );\n\t\t\t\t} else {\n\t\t\t\t\tcollapse.apply( this )\n\t\t\t\t}\n\n\t\t\t} catch ( e ) {\n\t\t\t\tconsole.log( e );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * bind on click event\n\t\t\t * and call expand or collapse based on css class\n\t\t\t */\n\t\t\t$this.off( 'click' ).on( 'click', function ( event ) {\n\n\t\t\t\tif ( event.target.tagName.toLowerCase() === 'a' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar $this = $( this );\n\n\t\t\t\ttry {\n\t\t\t\t\tif ( $this.hasClass( settings.class_collapsed ) ) {\n\t\t\t\t\t\texpand.apply( this );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcollapse.apply( this );\n\t\t\t\t\t}\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tconsole.log( e );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n} )( jQuery );\n//# sourceURL=workspace/js/widget_collapse.js");
			}
		}
	}
})("workspace/js/frontend");
