/*! Thrive Apprentice 2.0 - 2020-02-11
* http://www.thrivethemes.com/
* Copyright (c) 2020 Thrive Themes */

!function(a){"use strict";var b,c,d,e,f,g={".js":[],".json":[],".css":[],".html":[]},h="function"==typeof require?require:null;return e=function(a){var b=new Error("Could not find module '"+a+"'");return b.code="MODULE_NOT_FOUND",b},f=function(a,b,c){var d,e;if("function"==typeof a[b+c])return b+c;for(d=0;e=g[c][d];++d)if("function"==typeof a[b+e])return b+e;return null},b=function(a,d,g,h,i,j){var k,l,m,n,o,p;for(g=g.split("/"),k=g.pop(),"."!==k&&".."!==k||(g.push(k),k="");null!=(l=g.shift());)if(l&&"."!==l&&(".."===l?(a=d.pop(),j=j.slice(0,j.lastIndexOf("/"))):(d.push(a),a=a[l],j+="/"+l),!a))throw e(h);if(k&&"function"!=typeof a[k]&&(p=f(a,k,".js"),p||(p=f(a,k,".json")),p||(p=f(a,k,".css")),p||(p=f(a,k,".html")),p?k=p:2!==i&&"object"==typeof a[k]&&(d.push(a),a=a[k],j+="/"+k,k="")),!k)return 1!==i&&a[":mainpath:"]?b(a,d,a[":mainpath:"],h,1,j):b(a,d,"index",h,2,j);if(!(o=a[k]))throw e(h);return o.hasOwnProperty("module")?o.module.exports:(m={},o.module=n={exports:m,id:j+"/"+k},o.call(m,m,n,c(a,d,j)),n.exports)},d=function(c,d,f,g){var i,j=f,k=f.charAt(0),l=0;if("/"===k){if(j=j.slice(1),!(c=a["/"])){if(h)return h(f);throw e(f)}g="/",d=[]}else if("."!==k){if(i=j.split("/",1)[0],!(c=a[i])){if(h)return h(f);throw e(f)}g=i,d=[],j=j.slice(i.length+1),j||(j=c[":mainpath:"],j?l=1:(j="index",l=2))}return b(c,d,j,f,l,g)},(c=function(a,b,c){return function(e){return d(a,[].concat(b),e,c)}})(a,[],"")}({workspace:{admin:{js:{"_util.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar util = {};\n\n\t/**\n\t * Uppercase the 1st letter in string\n\t *\n\t * @param str\n\t * @returns string\n\t */\n\tutil.upperFirst = function ( str ) {\n\t\tif ( ! str ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn str.toLowerCase().charAt( 0 ).toUpperCase() + str.slice( 1 );\n\t};\n\n\tutil.hierarchy = {\n\t\t0: 'lesson',\n\t\t1: 'chapter',\n\t\t2: 'module'\n\t};\n\n\tutil.levels = {\n\t\tlesson: 0,\n\t\tchapter: 1,\n\t\tmodule: 2\n\t};\n\n\t/**\n\t * Decisions are based on hierarchy\n\t * 0 - no decission has to be made\n\t * 1 - lower level items need to be included within this level\n\t * 2 - this item needs to be included into a higher level and the user has to decide where\n\t *\n\t * @param item_level\n\t * @param model\n\t * @returns {number}\n\t */\n\tutil.userHasToDecide = function ( item_level, model ) {\n\n\t\tvar decision = 0,\n\t\t\tlowest = item_level - 2,\n\t\t\tlow = item_level - 1,\n\t\t\thigh = ++ item_level,\n\t\t\thighest = ++ item_level,\n\t\t\td_model = ! model ? ThriveApp.globals.active_course : model;\n\n\t\tif ( ( util.hierarchy[ lowest ] && d_model.get( util.hierarchy[ lowest ] + 's' ).length > 0 ) || ( util.hierarchy[ low ] && d_model.get( util.hierarchy[ low ] + 's' ).length > 0 ) ) {\n\t\t\tdecision = 1;\n\t\t} else if ( ( util.hierarchy[ high ] && d_model.get( util.hierarchy[ high ] + 's' ) && d_model.get( util.hierarchy[ high ] + 's' ).length > 0 ) || ( util.hierarchy[ highest ] && d_model.get( util.hierarchy[ highest ] + 's' ) && d_model.get( util.hierarchy[ highest ] + 's' ).length > 0 ) ) {\n\t\t\tdecision = 2;\n\t\t}\n\n\t\treturn decision;\n\t};\n\n\t/**\n\t * Un-map All the couse elements so we have a place where to search data when needed without any hierarchy\n\t * We keep the elements as they are so we have references and won't need to update them every time a change is made\n\t * @param course\n\t * @returns {*}\n\t */\n\tutil.getCourseElements = function ( course ) {\n\t\tvar elements = new ThriveApp.models.CourseElements( {} );\n\n\t\telements.get( 'all' ).reset();\n\t\telements.get( 'modules' ).reset();\n\t\telements.get( 'chapters' ).reset();\n\t\telements.get( 'lessons' ).reset();\n\n\t\tif ( course.get( 'modules' ).length > 0 ) {\n\t\t\tcourse.get( 'modules' ).each( function ( module ) {\n\t\t\t\tif ( module.get( 'chapters' ) ) {\n\t\t\t\t\tmodule.get( 'chapters' ).each( function ( chapter ) {\n\t\t\t\t\t\tif ( chapter.get( 'lessons' ) ) {\n\t\t\t\t\t\t\tchapter.get( 'lessons' ).each( function ( lesson ) {\n\t\t\t\t\t\t\t\telements.get( 'lessons' ).add( lesson );\n\t\t\t\t\t\t\t\telements.get( 'all' ).add( lesson );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telements.get( 'chapters' ).add( chapter );\n\t\t\t\t\t\telements.get( 'all' ).add( chapter );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( module.get( 'lessons' ) ) {\n\t\t\t\t\tmodule.get( 'lessons' ).each( function ( lesson ) {\n\t\t\t\t\t\telements.get( 'lessons' ).add( lesson );\n\t\t\t\t\t\telements.get( 'all' ).add( lesson );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\telements.get( 'modules' ).add( module );\n\t\t\t\telements.get( 'all' ).add( module );\n\t\t\t} );\n\n\t\t\treturn elements;\n\t\t}\n\n\t\tif ( course.get( 'chapters' ).length > 0 ) {\n\t\t\tcourse.get( 'chapters' ).each( function ( chapter ) {\n\t\t\t\tif ( chapter.get( 'lessons' ) ) {\n\t\t\t\t\tchapter.get( 'lessons' ).each( function ( lesson ) {\n\t\t\t\t\t\telements.get( 'lessons' ).add( lesson );\n\t\t\t\t\t\telements.get( 'all' ).add( lesson );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\telements.get( 'chapters' ).add( chapter );\n\t\t\t\telements.get( 'all' ).add( chapter );\n\t\t\t} );\n\n\t\t\treturn elements;\n\t\t}\n\n\t\tif ( course.get( 'lessons' ).length > 0 ) {\n\t\t\tcourse.get( 'lessons' ).each( function ( lesson ) {\n\t\t\t\telements.get( 'lessons' ).add( lesson );\n\t\t\t\telements.get( 'all' ).add( lesson );\n\t\t\t} );\n\t\t}\n\n\t\treturn elements;\n\t};\n\n\n\t/**\n\t * Slugify string\n\t *\n\t * @param word\n\t */\n\tutil.slugify = function ( word ) {\n\t\treturn util.split( word, \"-\" ).toLowerCase();\n\t};\n\n\t/**\n\t * Split words\n\t *\n\t * @param word\n\t * @param delim\n\t */\n\tutil.split = function ( word, delim ) {\n\t\tdelim = delim || \" \";\n\t\tvar replacement = \"$1\" + delim + \"$2\";\n\t\tword = util.to_title_case( word ).replace( / /g, '' );\n\t\treturn word.replace( /([A-Z]+)([A-Z][a-z])/g, replacement ).replace( /([a-z\\d])([A-Z])/g, replacement );\n\t};\n\n\t/**\n\t * To Title Case\n\t *\n\t * @param str\n\t */\n\tutil.to_title_case = function ( str ) {\n\t\treturn str.replace( /\\w\\S*/g, function ( txt ) {\n\t\t\treturn txt.charAt( 0 ).toUpperCase() + txt.substr( 1 ).toLowerCase();\n\t\t} );\n\t};\n\n\t/**\n\t * Clear remove a specific editor or an array of editors\n\t *\n\t * @param editor\n\t * @param ignore\n\t */\n\tutil.clearMCEEditor = function ( editor, ignore ) {\n\t\tif ( typeof tinymce === 'undefined' || ! tinymce ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof editor === 'string' ) {\n\t\t\tif ( ignore != editor ) {\n\t\t\t\tvar _current = tinymce.get( editor );\n\t\t\t\tif ( _current ) {\n\t\t\t\t\t_current.destroy();\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttinymce.execCommand( 'mceRemoveControl', true, element )\n\t\t\t\t\t} catch ( e ) {}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\teditor.forEach( function ( element ) {\n\t\t\t\tif ( ignore != element ) {\n\t\t\t\t\tvar _current = tinymce.get( element );\n\t\t\t\t\tif ( _current ) {\n\t\t\t\t\t\t_current.destroy();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ttinymce.execCommand( 'mceRemoveControl', true, element )\n\t\t\t\t\t\t} catch ( e ) {}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t};\n\n\tutil.addCoverImage = function ( model ) {\n\t\t// If the media frame already exists, reopen it.\n\t\tif ( this.frame ) {\n\t\t\tthis.frame.escape();\n\t\t}\n\n\t\t// Create a new media frame\n\t\tthis.frame = wp.media( {\n\t\t\ttitle: 'Select or Upload a Cover Image',\n\t\t\tbutton: {\n\t\t\t\ttext: 'Use this Image'\n\t\t\t},\n\t\t\tlibrary: {type: 'image'},\n\t\t\tmultiple: false  // Set to true to allow multiple files to be selected\n\t\t} );\n\n\t\t// When an image is selected in the media frame...\n\t\tthis.frame.on( 'select', function () {\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).first().toJSON();\n\t\t\tmodel.set( {cover_image: attachment.url} );\n\t\t}, this );\n\n\t\t// Finally, open the modal on click\n\t\tthis.frame.open();\n\t};\n\n\tutil.renderMCE = function ( id, model, prop ) {\n\t\tsetTimeout( function () {\n\t\t\tutil.clearMCEEditor( id );\n\t\t\tutil.editorInit( id, model, prop );\n\t\t}, 0 );\n\t};\n\n\tutil.editorInit = function ( id, model, prop ) {\n\t\tif ( typeof tinymce === 'undefined' || ! tinymce ) {\n\t\t\treturn;\n\t\t}\n\t\tmce_reinit = util.build_mce_init( {\n\t\t\tmce: window.tinyMCEPreInit.mceInit[ 'tve_tinymce_tpl' ],\n\t\t\tqt: window.tinyMCEPreInit.qtInit[ 'tve_tinymce_tpl' ]\n\t\t}, id );\n\n\t\ttinyMCEPreInit.mceInit = $.extend( tinyMCEPreInit.mceInit, mce_reinit.mce_init );\n\t\ttinyMCEPreInit.mceInit[ id ].setup = function ( editor ) {\n\t\t\teditor.on( 'init', function () {\n\t\t\t\teditor.setContent( model.get( prop ) );\n\t\t\t} );\n\t\t\teditor.on( 'change', function ( e ) {\n\t\t\t\tvar value = tinymce.get( id );\n\n\t\t\t\tmodel.set( prop, value.getContent() );\n\n\t\t\t} );\n\t\t\teditor.on( 'blur', function ( e ) {\n\t\t\t\tvar value = tinymce.get( id );\n\n\t\t\t\tif ( model.get( prop ) !== value.getContent() ) {\n\t\t\t\t\tmodel.set( prop, value.getContent() );\n\t\t\t\t}\n\n\t\t\t\tmodel.trigger( 'tva_tinymce_blur' );\n\t\t\t} );\n\t\t};\n\t\ttinymce.init( tinyMCEPreInit.mceInit[ id ] );\n\n\t};\n\n\t/**\n\t * Build the editor\n\t *\n\t * @param defaults\n\t * @param _id\n\t * @returns {{mce_init: {}, qt_init: {}}}\n\t */\n\tutil.build_mce_init = function ( defaults, _id ) {\n\t\tvar mce = {}, qt = {};\n\t\tmce[ _id ] = jQuery.extend( true, {}, defaults.mce );\n\t\tqt[ _id ] = jQuery.extend( true, {}, defaults.qt );\n\n\t\tqt[ _id ].id = _id;\n\n\t\tmce[ _id ].selector = '#' + _id;\n\t\tmce[ _id ].body_class = mce[ _id ].body_class.replace( 'tve_tinymce_tpl', _id );\n\n\t\treturn {\n\t\t\t'mce_init': mce,\n\t\t\t'qt_init': qt\n\t\t};\n\t};\n\n\tutil.Editor = {\n\t\tiframe: '',\n\t\tapply: function ( selector, prop, value, extra, hover_out ) {\n\t\t\tif ( ! extra ) {\n\t\t\t\textra = '';\n\t\t\t}\n\n\t\t\tvar $elements = this.iframe.find( selector );\n\n\t\t\t_.each( $elements, function ( element ) {\n\t\t\t\tif ( ! hover_out ) {\n\t\t\t\t\tjQuery( element ).css( prop, value + extra );\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( extra === true ) {\n\t\t\t\t\t\textra = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery( element ).hover( function () {\n\t\t\t\t\t\tvar sub_elem = prop === 'fill' ? $( this ).find( 'svg' ) : $( this );\n\t\t\t\t\t\tsub_elem.css( prop, value + extra );\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tvar sub_elem = prop === 'fill' ? $( this ).find( 'svg' ) : $( this );\n\t\t\t\t\t\tsub_elem.css( prop, hover_out + extra );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} )\n\t\t},\n\t\tfont_to_head: function ( url ) {\n\t\t\tvar element = this.iframe.find( '#tva_google_font' );\n\n\t\t\tif ( element ) {\n\t\t\t\telement.remove();\n\t\t\t}\n\n\t\t\tvar link = '<link rel=\"stylesheet\" id=\"tva_google_font\" href=\"' + url + '\" type=\"text/css\" media=\"all\">';\n\t\t\tjQuery( this.iframe.find( 'head' ) ).append( link );\n\t\t},\n\t\ttext: function ( selector, value ) {\n\n\t\t\tvar $elements = this.iframe.find( selector );\n\n\t\t\t_.each( $elements, function ( element ) {\n\t\t\t\tjQuery( element ).text( value );\n\t\t\t} )\n\t\t},\n\t\tattrChange: function ( selector, value, attr ) {\n\n\t\t\tvar $elements = this.iframe.find( selector );\n\n\t\t\t_.each( $elements, function ( element ) {\n\t\t\t\tjQuery( element ).attr( attr, value );\n\t\t\t} )\n\t\t},\n\t\timage: function ( selector, value, extra ) {\n\t\t\tvar $elements = this.iframe.find( selector );\n\n\t\t\t_.each( $elements, function ( element ) {\n\t\t\t\tjQuery( element ).empty().append( '<img src=\"' + value + '\"/>' );\n\t\t\t} )\n\t\t},\n\t\temptyElement: function ( element ) {\n\n\t\t\tif ( element ) {\n\t\t\t\tthis.iframe.find( element ).empty();\n\t\t\t}\n\t\t},\n\t\tinit: function () {\n\t\t\tthis.iframe = jQuery( 'iframe#tva_frame' ).contents();\n\n\t\t\tthis.iframe.find( 'body' ).css( 'overflow', 'initial' );\n\t\t\tthis.iframe.find( 'a' ).click( function ( event ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Preview collapsible settings\n\t\t *\n\t\t * @param config {}\n\t\t */\n\t\tcollapse: function ( config ) {\n\n\t\t\tvar $inner = window.inner_jQuery( this.iframe );\n\n\t\t\t//slide down all the hidden elements so that the new settings can apply\n\t\t\t$inner.find( '.tva-cm-container .tve-chapters-wrapper, .tva-cm-container .tve-lessons-wrapper' ).slideDown();\n\n\t\t\t//apply jquery plugin with default settings\n\t\t\t$inner.find( '.tva-cm-container' ).tva_collapsible( $.extend( {\n\t\t\t\tcollapse_modules: 0,\n\t\t\t\tcollapse_chapters: 0\n\t\t\t}, config ) );\n\t\t}\n\t};\n\n\tutil.makeBulkActionsStiky = function () {\n\t\tvar $course = $( '.ta-course-wrapper' ),\n\t\t\t$bulkActions = $( '.tva-bulk-actions-container' ),\n\t\t\t$elements = $( '.tva-elements-container' );\n\n\t\tif ( $elements.length && $course.length ) {\n\t\t\tvar actionsPosition = $bulkActions[ 0 ].getBoundingClientRect(),\n\t\t\t\tfixed = actionsPosition.top - $bulkActions.height() < 0 && $( window ).scrollTop() > $bulkActions.height();\n\n\t\t\tfixed ? $bulkActions.addClass( 'tva-fixed-bulk-actions' ) : $bulkActions.removeClass( 'tva-fixed-bulk-actions' );\n\t\t}\n\t};\n\n\tutil.isCollection = function ( collection ) {\n\t\treturn ( typeof collection === 'object' ) && ( collection instanceof Backbone.Collection );\n\t};\n\n\tutil.getPlural = function ( str ) {\n\t\treturn str + 's';\n\t};\n\n\tutil.rebindWistiaFancyBoxes = function () {\n\t\t/**\n\t\t * rebind the wistia listeners\n\t\t */\n\t\tif ( window.rebindWistiaFancyBoxes ) {\n\t\t\twindow.rebindWistiaFancyBoxes();\n\t\t}\n\t};\n\n\tutil.getKeyByValue = function ( array, value ) {\n\t\tfor ( var key in array ) {\n\t\t\tif ( array[ key ] === parseInt( value ) ) {\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Check if email is valid\n\t *\n\t * @param email\n\t * @returns {boolean}\n\t */\n\tutil.isEmail = function ( email ) {\n\t\tvar re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n\t\treturn re.test( String( email ).toLowerCase() );\n\t};\n\n\t/**\n\t * Remove empty lines from a string\n\t *\n\t * @param data\n\t * @returns {*}\n\t */\n\tutil.removeEmptyLine = function ( data ) {\n\n\t\tif ( typeof data !== 'string' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tdata = data.trim();\n\n\t\tif ( data.length === 0 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar chunks = data.split( '\\n' ),\n\t\t\tparts = [];\n\n\t\t$.each( chunks, function ( key, value ) {\n\t\t\tif ( value.trim().length ) {\n\t\t\t\tparts.push( value );\n\t\t\t}\n\t\t} );\n\n\t\treturn parts.join( '\\n' );\n\t};\n\n\t/**\n\t * Check for a valid url\n\t *\n\t * @param url\n\t * @returns {boolean}\n\t */\n\tutil.isUrl = function ( url ) {\n\t\tvar pattern = new RegExp( '^(https?:\\\\/\\\\/)?' + // protocol\n\t\t                          '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' + // domain name\n\t\t                          '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // ip (v4) address\n\t\t                          '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + //port\n\t\t                          '(\\\\?[;&amp;a-z\\\\d%_.~+=-]*)?' + // query string\n\t\t                          '(\\\\#[-a-z\\\\d_]*)?$', 'i' );\n\n\t\treturn pattern.test( url );\n\t};\n\n\tmodule.exports = util;\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/_util.js")},collections:{"access-integrations.js":function(exports,module,require){eval("var basicIntegration = require( '../models/integration/base' );\n\n/**\n * List of Integration TA has to protect the content/course/module/etc\n */\nmodule.exports = Backbone.Collection.extend( {\n\n\tmodel: function ( model, options ) {\n\n\t\tif ( ! model ) {\n\t\t\tmodel = {slug: null};\n\t\t}\n\n\t\tswitch ( model.slug ) {\n\t\t\tdefault:\n\t\t\t\treturn new basicIntegration.model( model, options );\n\t\t}\n\t},\n\n\t/**\n\t * Get Items of an integration with slug\n\t *\n\t * @param slug\n\t * @return {{Backbone.Collection}}\n\t */\n\tgetItems: function ( slug ) {\n\n\t\tvar integration = this.findWhere( {slug: slug} );\n\n\t\tif ( integration instanceof basicIntegration.model ) {\n\t\t\treturn integration.getItems();\n\t\t}\n\n\t\treturn new basicIntegration.items_collection();\n\t},\n\n\t/**\n\t * Get integration from this collection by slug\n\t *\n\t * @param {String} slug\n\t * @return {basicIntegration.model}\n\t */\n\tgetIntegration: function ( slug ) {\n\n\t\tvar integration = this.findWhere( {slug: slug} );\n\n\t\tif ( integration instanceof basicIntegration.model ) {\n\t\t\treturn integration;\n\t\t}\n\n\t\treturn new basicIntegration.model();\n\t}\n} );\n//# sourceURL=workspace/admin/js/collections/access-integrations.js")},"base.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tmodule.exports = Backbone.Collection.extend( {\n\t\t/**\n\t\t * helper function to get the last item of a collection\n\t\t *\n\t\t * @return Backbone.Model\n\t\t */\n\t\tlast: function () {\n\t\t\treturn this.at( this.size() - 1 );\n\t\t},\n\t\tsync: function ( method, model, options ) {\n\t\t\tvar beforeSend;\n\n\t\t\toptions = options || {};\n\n\t\t\toptions.cache = false;\n\n\t\t\tif ( ! _.isUndefined( ThriveApp.nonce ) && ! _.isNull( ThriveApp.nonce ) ) {\n\t\t\t\tbeforeSend = options.beforeSend;\n\n\t\t\t\toptions.beforeSend = function ( xhr ) {\n\t\t\t\t\txhr.setRequestHeader( 'X-WP-Nonce', ThriveApp.nonce );\n\n\t\t\t\t\tif ( beforeSend ) {\n\t\t\t\t\t\treturn beforeSend.apply( this, arguments );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn Backbone.sync( method, model, options );\n\t\t},\n\t\t_pluck: function ( keys ) {\n\t\t\tif ( typeof keys !== 'object' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction parseModels( collection ) {\n\t\t\t\tvar result = [],\n\t\t\t\t\tmodels = $.extend( true, [], collection.models );\n\n\t\t\t\t_.each( models, function ( model, index ) {\n\t\t\t\t\tvar data = {};\n\n\t\t\t\t\t_.each( keys, function ( key ) {\n\t\t\t\t\t\tif ( ( typeof key === 'string' ) && ! _.isUndefined( model.get( key ) ) ) {\n\t\t\t\t\t\t\tdata[ key ] = ThriveApp.util.isCollection( model.get( key ) )\n\t\t\t\t\t\t\t\t? parseModels( model.get( key ) ) //ensure recursive calls for nested levels of collections\n\t\t\t\t\t\t\t\t: model.get( key );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\tresult.push( data );\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn parseModels( this );\n\t\t},\n\t\tpluckValues: function ( values ) {\n\t\t\treturn this._pluck( values );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/collections/base.js")},"chapters.js":function(exports,module,require){eval("/**\n * Collection of chapters which includes the collection of lessons\n */\n\nvar selected_items_collection = require( './selected_items' ),\n\tchapter_model = require( './../models/chapter' );\n\nmodule.exports = selected_items_collection.extend( {\n\tmodel: chapter_model,\n\t/**\n\t * Used to sort the collection\n\t *\n\t * @param model\n\t * @returns {*}\n\t */\n\tcomparator: function ( model ) {\n\t\treturn parseInt( model.get( 'order' ) );\n\t}\n} );\n//# sourceURL=workspace/admin/js/collections/chapters.js")},"collections.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar base_collection = require( './base' ),\n\t\tbase_model = require( './../models/base' ),\n\t\ttopic_model = require( './../models/topic' ),\n\t\tlabel_model = require( './../models/label' ),\n\t\tlevel_model = require( './../models/level' ),\n\t\trole_model = require( './../models/role' ),\n\t\ttemplate_model = require( './../models/template' ),\n\t\tfont_model = require( './../models/font' ),\n\t\tgoogle_font_model = require( './../models/google-font' ),\n\t\tmembermouse_model = require( './../models/membermouse' ),\n\t\tsendowl_model = require( './../models/sendowl' ),\n\t\twishlist_model = require( './../models/wishlist' ),\n\t\tlog_model = require( './../models/log' ),\n\t\tstack_model = require( './../models/stack' ),\n\t\ttype_model = require( './../models/type' ),\n\t\tsendowl_customer_model = require( './../models/sendowl/customer' ),\n\t\torder_item_model = require( './../models/order-item' ),\n\t\tbreadcrumb_link_model = require( './../models/breadcrumb/link' ),\n\t\tcollections = {\n\t\t\tSelectedItems: require( './selected_items' ),\n\t\t\tLessons: require( './lessons' ),\n\t\t\tCourses: require( './courses' ),\n\t\t\tChapters: require( './chapters' ),\n\t\t\tModules: require( './modules' ),\n\t\t\tSendowlProducts: require( './sendowl/products'),\n\t\t\tSendowlBundles: require( './sendowl/bundles'),\n\t\t\tSendowlDiscounts: require( './sendowl/discounts')\n\t\t};\n\n\tcollections.Base = base_collection;\n\n\t/**\n\t * Breadcrumbs Collection\n\t */\n\tcollections.Breadcrumbs = base_collection.extend( {\n\t\tmodel: base_model.extend( {\n\t\t\tdefaults: {\n\t\t\t\thash: '',\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t} ),\n\t\t/**\n\t\t * helper function allows adding items to the collection easier\n\t\t *\n\t\t * @param {string} route\n\t\t * @param {string} label\n\t\t */\n\t\tadd_page: function ( route, label ) {\n\t\t\tvar _model = new breadcrumb_link_model( {\n\t\t\t\thash: route,\n\t\t\t\tlabel: label\n\t\t\t} );\n\t\t\treturn this.add( _model );\n\t\t}\n\t} );\n\n\t/**\n\t * Collection of topics\n\t */\n\tcollections.TopicsCollection = base_collection.extend( {\n\t\tmodel: topic_model,\n\t\tcomparator: function ( topicA, topicB ) {\n\t\t\tif ( topicA.get( 'ID' ) > topicB.get( 'ID' ) ) {\n\t\t\t\treturn - 1;\n\t\t\t} // before\n\t\t\tif ( topicB.get( 'ID' ) > topicA.get( 'ID' ) ) {\n\t\t\t\treturn 1;\n\t\t\t} // after\n\t\t\treturn 0; // equal\n\t\t}\n\t} );\n\n\t/**\n\t * Collection of labels\n\t */\n\tcollections.LabelsCollection = collections.TopicsCollection.extend( {\n\t\tmodel: label_model,\n\t\tcomparator: function ( labelA, labelB ) {\n\t\t\tif ( labelA.get( 'ID' ) > labelB.get( 'ID' ) ) {\n\t\t\t\treturn - 1;\n\t\t\t} // before\n\t\t\tif ( labelB.get( 'ID' ) > labelA.get( 'ID' ) ) {\n\t\t\t\treturn 1;\n\t\t\t} // after\n\t\t\treturn 0; // equal\n\t\t}\n\t} );\n\n\n\tcollections.ImportCourses = collections.Courses.extend( {\n\t\turl: function () {\n\t\t\treturn ThriveApp.routes.settings + '/get_old_courses_lessons/';\n\t\t}\n\t} );\n\n\t/**\n\t * Collection of Levels\n\t */\n\tcollections.Levels = base_collection.extend( {\n\t\tmodel: level_model\n\t} );\n\n\t/**\n\t * Collection of Levels\n\t */\n\tcollections.Roles = base_collection.extend( {\n\t\tmodel: role_model\n\t} );\n\n\t/**\n\t * The collection of templates\n\t */\n\tcollections.Templates = base_collection.extend( {\n\t\tmodel: template_model\n\t} );\n\n\t/**\n\t * A collection of our web safe fonts\n\t */\n\tcollections.Fonts = base_collection.extend( {\n\t\tmodel: font_model\n\t} );\n\n\t/**\n\t * Fonts collection for Google\n\t */\n\tcollections.GoogleFonts = base_collection.extend( {\n\t\tmodel: google_font_model\n\t} );\n\t/**\n\t * Collection for all the membership plugins\n\t */\n\tcollections.MembershipsCollection = base_collection.extend( {\n\t\tmodel: base_model\n\t} );\n\n\t/**\n\t * Membermouse memberships and bundles collection\n\t */\n\tcollections.MembermouseCollection = base_collection.extend( {\n\t\tmodel: membermouse_model\n\t} );\n\n\t/**\n\t * Sendowl memberships and bundles collection\n\t */\n\tcollections.SendowlCollection = base_collection.extend( {\n\t\tmodel: sendowl_model\n\n\t} );\n\n\tcollections.WishlistCollection = base_collection.extend( {\n\t\tmodel: wishlist_model\n\t} );\n\n\tcollections.Logs = base_collection.extend( {\n\t\tmodel: log_model\n\t} );\n\n\tcollections.Stacks = base_collection.extend( {\n\t\tmodel: stack_model\n\t} );\n\n\tcollections.Types = base_collection.extend( {\n\t\tmodel: type_model\n\t} );\n\n\tcollections.SendowlCustomers = collections.SelectedItems.extend( {\n\t\tmodel: sendowl_customer_model\n\t} );\n\n\tcollections.OrderItems = base_collection.extend( {\n\t\tmodel: order_item_model\n\t} );\n\n\tmodule.exports = {\n\t\tcollections: collections\n\t};\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/collections/collections.js")},"courses.js":function(exports,module,require){eval("/**\n * Collection of courses which includes the collection of lessons\n */\n\nvar selected_items_collection = require( './selected_items' ),\n\tcourse_model = require( './../models/course' );\n\nmodule.exports = selected_items_collection.extend( {\n\tmodel: course_model,\n\t/**\n\t * @param a\n\t * @param b\n\t * @returns {number}\n\t */\n\tcomparator: function ( a, b ) {\n\t\treturn parseInt( b.get( 'order' ) ) - parseInt( a.get( 'order' ) );\n\t}\n} );\n//# sourceURL=workspace/admin/js/collections/courses.js")},"lessons.js":function(exports,module,require){eval("/**\n * Collection of Levels\n */\nvar selected_items_collection = require( './selected_items' ),\n\tlesson_model = require( './../models/lesson' );\n\nmodule.exports = selected_items_collection.extend( {\n\tmodel: lesson_model,\n\t/**\n\t * Used to sort the collection\n\t *\n\t * @param model\n\t * @returns {*}\n\t */\n\tcomparator: function ( model ) {\n\t\treturn parseInt( model.get( 'order' ) );\n\t}\n} );\n//# sourceURL=workspace/admin/js/collections/lessons.js")},"modules.js":function(exports,module,require){eval("/**\n * Collection of modules which includes the collection of lessons and chapters\n */\n\nvar selected_items_collection = require( './selected_items' ),\n\tmodule_model = require( './../models/module' );\n\nmodule.exports = selected_items_collection.extend( {\n\tmodel: module_model,\n\t/**\n\t * Used to sort the collection\n\t *\n\t * @param model\n\t * @returns {*}\n\t */\n\tcomparator: function ( model ) {\n\t\treturn parseInt( model.get( 'order' ) );\n\t}\n} );\n//# sourceURL=workspace/admin/js/collections/modules.js")},"rules.js":function(exports,module,require){eval("var rule_model = require( './../models/integration/rule' );\n\n/**\n * List of Rules which helps TA protect content\n */\nmodule.exports = Backbone.Collection.extend( {\n\n\tmodel: rule_model,\n\n\thasRuleWithIntegration: function ( integration ) {\n\n\t\treturn this.findWhere( {integration: integration} ) instanceof rule_model;\n\t},\n\n\t/**\n\t * Check if any of the model rule is for\n\t * - sendowl_product\n\t * or\n\t * - sendowl_bundle\n\t *\n\t * @return {boolean}\n\t */\n\thasSendOwlRule: function () {\n\n\t\tvar _has = this.hasRuleWithIntegration( 'sendowl_product' );\n\n\t\treturn _has || this.hasRuleWithIntegration( 'sendowl_bundle' );\n\t}\n} );\n//# sourceURL=workspace/admin/js/collections/rules.js")},"selected_items.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar base_collection = require( './base' ),\n\t\tbase_model = require( './../models/base' );\n\n\tmodule.exports = base_collection.extend( {\n\t\tmodel: base_model,\n\t\t/**\n\t\t * deep-json implementation for backbone collection - flattens a collection of models\n\t\t *\n\t\t * @returns {Array|Object}\n\t\t */\n\t\ttoDeepJson: function () {\n\n\t\t\t/**\n\t\t\t * flattens all collections within a model..\n\t\t\t *\n\t\t\t * @todo not sure if this should be here or we should implement it on model base\n\t\t\t * it may look like a \"struto-camila\" in the end!!!!\n\t\t\t */\n\t\t\tif ( this instanceof Backbone.Model ) {\n\t\t\t\treturn ThriveApp.collections.SelectedItems.prototype.parseModel.call( this )\n\t\t\t}\n\n\t\t\tvar models = $.extend( true, [], this.models ),\n\t\t\t\tself = this,\n\t\t\t\titems = [];\n\n\t\t\t_.each( models, function ( model, index ) {\n\t\t\t\tmodel = self.parseModel( model );\n\n\t\t\t\titems[ index ] = model;\n\t\t\t} );\n\n\t\t\treturn items;\n\t\t},\n\t\tcheckItems: function ( model, checked ) {\n\t\t\tvar modules = this.where( {type: 'module'} );\n\n\t\t\t/**\n\t\t\t * When we select chapters and lessons we need to also check if they're part of the same module,\n\t\t\t * otherwise we need to reset the selected items collection\n\t\t\t */\n\t\t\tif ( checked && this.length > 0 && ! this.findWhere( {type: 'module'} ) && ThriveApp.globals.course_elements.get( 'modules' ).length > 0 && model.get( 'type' ) !== 'module' ) {\n\t\t\t\tvar module_id,\n\t\t\t\t\treset = false;\n\t\t\t\tthis.each( function ( item ) {\n\t\t\t\t\tif ( item.get( 'post_parent' ) > 0 && ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: item.get( 'post_parent' )} ) ) {\n\t\t\t\t\t\tmodule_id = item.get( 'post_parent' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar parent = ThriveApp.globals.course_elements.get( 'chapters' ).findWhere( {ID: item.get( 'post_parent' )} );\n\t\t\t\t\t\tmodule_id = parent.get( 'post_parent' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tvar post_parent = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: model.get( 'post_parent' )} );\n\n\t\t\t\tif ( post_parent.get( 'type' ) === 'module' && post_parent.get( 'ID' ) !== module_id ) {\n\t\t\t\t\treset = true;\n\t\t\t\t}\n\n\t\t\t\tif ( post_parent.get( 'type' ) !== 'module' && post_parent.get( 'post_parent' ) !== module_id ) {\n\t\t\t\t\treset = true;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif ( ( this.length > 0 && model.get( 'type' ) === 'module' && modules.length === 0 ) || ( model.get( 'post_parent' ) > 0 && modules.length > 0 && ! this.findWhere( {ID: model.get( 'post_parent' )} ) ) || reset ) {\n\t\t\t\tthis.updateValues( {checked: false}, true );\n\t\t\t\tthis.reset();\n\t\t\t}\n\n\t\t\tmodel.set( {checked: checked} );\n\t\t\tchecked ? this.add( model ) : this.remove( model, {silent: true} );\n\n\t\t\tthis.setChildrenChecked( model, checked );\n\n\t\t\tif ( ! checked && model.get( 'post_parent' ) > 0 ) {\n\t\t\t\tthis.setParentsUnchecked( model );\n\t\t\t}\n\t\t},\n\t\tsetChildrenChecked: function ( model, checked ) {\n\t\t\tvar children = model.hasChildren();\n\n\t\t\tif ( children ) {\n\t\t\t\tmodel.get( children ).each( function ( item ) {\n\t\t\t\t\titem.set( {checked: checked} );\n\t\t\t\t\titem.trigger( 'item_checked' );\n\n\t\t\t\t\tchecked ? this.add( item ) : this.remove( item, {silent: true} );\n\t\t\t\t\tvar item_children = item.hasChildren();\n\t\t\t\t\tif ( item_children ) {\n\t\t\t\t\t\titem.get( item_children ).each( function ( lesson ) {\n\t\t\t\t\t\t\tlesson.set( {checked: checked} );\n\t\t\t\t\t\t\tchecked ? this.add( lesson ) : this.remove( lesson, {silent: true} );\n\t\t\t\t\t\t}, this );\n\t\t\t\t\t}\n\t\t\t\t}, this );\n\t\t\t}\n\t\t},\n\t\tsetParentsUnchecked: function ( model ) {\n\t\t\tvar parent = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: parseInt( model.get( 'post_parent' ) )} ),\n\t\t\t\tremove_other = false;\n\n\t\t\tif ( parent ) {\n\t\t\t\tparent.set( {checked: false} );\n\t\t\t\tthis.remove( parent, {silent: true} );\n\n\t\t\t\tif ( parent.get( 'type' ) === 'module' ) {\n\t\t\t\t\tremove_other = true;\n\t\t\t\t}\n\n\t\t\t\tif ( parent.get( 'post_parent' ) > 0 ) {\n\t\t\t\t\tvar module = ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: parseInt( parent.get( 'post_parent' ) )} );\n\t\t\t\t\tif ( module ) {\n\t\t\t\t\t\tremove_other = true;\n\t\t\t\t\t\tmodule.set( {checked: false} );\n\t\t\t\t\t\tthis.remove( module, {silent: true} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( remove_other ) {\n\t\t\t\tthis.removeOtherModules();\n\t\t\t}\n\n\t\t},\n\t\tremoveOtherModules: function () {\n\t\t\tvar other_modules = this.where( {type: 'module'} );\n\t\t\tif ( other_modules.length > 0 ) {\n\t\t\t\t_.each( other_modules, function ( other_module ) {\n\t\t\t\t\tthis.remove( other_module, {silent: true} );\n\t\t\t\t\tother_module.set( {checked: false} );\n\t\t\t\t\tthis.setChildrenChecked( other_module, false );\n\t\t\t\t}, this );\n\n\t\t\t}\n\t\t},\n\t\tgetHighestSelectedLevel: function () {\n\t\t\tif ( this.length === 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar level = 0;\n\n\t\t\tthis.each( function ( item ) {\n\t\t\t\tvar item_level = ThriveApp.util.levels[ item.get( 'type' ) ];\n\t\t\t\tif ( level < item_level ) {\n\t\t\t\t\tlevel = item_level;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn level;\n\t\t},\n\t\tparseCollection: function ( collection ) {\n\t\t\tvar models = $.extend( true, [], collection.models ),\n\t\t\t\tself = this,\n\t\t\t\titems = [];\n\n\t\t\t_.each( models, function ( item, index ) {\n\t\t\t\titems[ index ] = ThriveApp.collections.SelectedItems.prototype._call( 'parseModel', item );\n\t\t\t} );\n\n\t\t\treturn items;\n\t\t},\n\t\tparseModel: function ( model ) {\n\t\t\tmodel = this instanceof Backbone.Model ? this : model;\n\n\t\t\tvar obj = $.extend( true, {}, model.attributes ),\n\t\t\t\tself = this,\n\t\t\t\tjson_model = model.toJSON();\n\n\t\t\t_.each( _.keys( obj ), function ( key ) {\n\t\t\t\tif ( ! _.isUndefined( obj[ key ] ) && ! _.isNull( obj[ key ] ) && ( obj[ key ] instanceof Backbone.Collection ) ) {\n\t\t\t\t\tjson_model[ key ] = ThriveApp.collections.SelectedItems.prototype._call( 'parseCollection', obj[ key ] );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn json_model;\n\t\t},\n\t\t_call: function ( callback, args ) {\n\t\t\treturn this instanceof Backbone.Model ?\n\t\t\t\tThriveApp.collections.SelectedItems.prototype[ callback ].call( this ) :\n\t\t\t\tthis[ callback ]( args )\n\t\t},\n\t\t_pluck: function ( keys ) {\n\t\t\tif ( typeof keys !== 'object' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction parseModels( collection ) {\n\t\t\t\tvar result = [],\n\t\t\t\t\tmodels = $.extend( true, [], collection.models );\n\n\t\t\t\t_.each( models, function ( model, index ) {\n\t\t\t\t\tvar data = {};\n\n\t\t\t\t\t_.each( keys, function ( key ) {\n\t\t\t\t\t\tif ( ( typeof key === 'string' ) && ! _.isUndefined( model.get( key ) ) ) {\n\t\t\t\t\t\t\tdata[ key ] = ThriveApp.util.isCollection( model.get( key ) ) ?\n\t\t\t\t\t\t\t\tparseModels( model.get( key ) ) : //ensure recursive calls for nested levels of collections\n\t\t\t\t\t\t\t\tmodel.get( key );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( key === 'order' ) {\n\t\t\t\t\t\t\tdata[ key ] = index;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tresult.push( data );\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn parseModels( this );\n\t\t},\n\t\tpluckValues: function ( values ) {\n\t\t\treturn this._pluck( values );\n\t\t},\n\t\tlistValue: function ( value ) {\n\t\t\tif ( typeof value !== 'string' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunction parseModels( collection ) {\n\t\t\t\tvar result = collection.pluck( value ),\n\t\t\t\t\tmodels = $.extend( true, [], collection.models );\n\n\t\t\t\t_.each( models, function ( model ) {\n\t\t\t\t\tvar childs = model.hasChildren();\n\n\t\t\t\t\tif ( ThriveApp.util.isCollection( model.get( childs ) ) ) {\n\t\t\t\t\t\tvar concat = parseModels( model.get( childs ) );\n\t\t\t\t\t\tresult = result.concat( concat );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn parseModels( this );\n\t\t},\n\t\tupdateValues: function ( keys, with_children ) {\n\t\t\tif ( typeof keys !== 'object' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * TODO: Move this outside or in _utils.js\n\t\t\t * @param collection\n\t\t\t *\n\t\t\t * @param with_children\n\t\t\t */\n\t\t\tfunction parseModels( collection, with_children ) {\n\t\t\t\tvar models = $.extend( true, [], collection.models );\n\t\t\t\t_.each( models, function ( model, index ) {\n\t\t\t\t\tObject.keys( keys ).forEach( function ( key ) {\n\t\t\t\t\t\tif ( typeof key === 'string' ) {\n\t\t\t\t\t\t\tvar obj = {};\n\n\t\t\t\t\t\t\t// allways ensure the corect order for a model\n\t\t\t\t\t\t\tif ( key === 'order' ) {\n\t\t\t\t\t\t\t\tobj[ key ] = index;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tobj[ key ] = keys[ key ];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.set( obj );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\tvar childs = model.hasChildren();\n\t\t\t\t\tif ( ( with_children === true ) && ThriveApp.util.isCollection( model.get( childs ) ) ) {\n\t\t\t\t\t\tparseModels( model.get( childs ), with_children );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tparseModels( this, with_children );\n\t\t}\n\t} );\n} )( jQuery );\n//# sourceURL=workspace/admin/js/collections/selected_items.js")},sendowl:{"bundles.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseCollection = require( './../base' ),\n\t\tmodel = require( './../../models/sendowl/bundle' );\n\n\tmodule.exports = baseCollection.extend( {\n\t\tmodel: model\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/collections/sendowl/bundles.js")},"discounts.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseCollection = require( './../base' ),\n\t\tmodel = require( './../../models/sendowl/discount' );\n\n\tmodule.exports = baseCollection.extend( {\n\t\tmodel: model\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/collections/sendowl/discounts.js")},"products.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseCollection = require( './../base' ),\n\t\tmodel = require( './../../models/sendowl/product' );\n\n\tmodule.exports = baseCollection.extend( {\n\t\tmodel: model\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/collections/sendowl/products.js")}}},"course-views.js":function(exports,module,require){eval("var views = require( './views' );\n\n( function ( $ ) {\n\n\tvar courseView = {};\n\n\tcourseView.CommentStatusView = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/course-comment' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tTVE_Dash.materialize( this.$el );\n\t\t}\n\t} );\n\n\t/**\n\t * Render video url view\n\t */\n\tcourseView.CourseVideoUrl = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/video-url-options' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tTVE_Dash.materialize( this.$el );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for rendering video options for the course\n\t */\n\tcourseView.ChangeVideoTypeView = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/video-options' ),\n\t\tevents: {\n\t\t\t'change .tva-course-video-type': 'changeVideoType',\n\t\t\t'change #tva-course-featured-video': 'renderExtraOptions'\n\t\t},\n\t\trender: function () {\n\t\t\tif ( this.model.get( 'video_status' ) == true ) {\n\t\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\t\tthis.renderExtraOptions( this.model.get( 'video_type' ) );\n\t\t\t\tthis.renderInputVideoUrl();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tchangeVideoType: function ( e ) {\n\t\t\tvar value = e.currentTarget.value;\n\t\t\tthis.model.set( {video_type: value, video_url: '', video_extra: {}} );\n\t\t\tthis.renderExtraOptions( value );\n\t\t\tthis.renderInputVideoUrl();\n\t\t},\n\t\trenderExtraOptions: function ( video_type ) {\n\t\t\tthis.$( '.tva-course-video-extra-options' ).empty();\n\t\t\tif ( video_type && this.model.get( 'video_status' ) == true ) {\n\t\t\t\tif ( ! ThriveApp.views[ 'CourseVideo' + ThriveApp.util.upperFirst( video_type ) + 'Options' ] ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar view = new ThriveApp.views[ 'CourseVideo' + ThriveApp.util.upperFirst( video_type ) + 'Options' ]( {\n\t\t\t\t\tel: this.$( '.tva-course-video-extra-options' ),\n\t\t\t\t\tmodel: this.model\n\t\t\t\t} );\n\n\t\t\t\tview.render();\n\t\t\t}\n\t\t},\n\t\trenderInputVideoUrl: function () {\n\t\t\tvar view = new ThriveApp.views.CourseVideoUrl( {\n\t\t\t\tel: this.$( '.tva-video-url' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\t\t\tview.render();\n\t\t}\n\t} );\n\n\t/**\n\t * A base for all membership plugins\n\t */\n\tcourseView.MembershipOptionsBase = views.Base.extend( {\n\t\tclassName: 'tva-membership-plugin-wrapper',\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/base-options' ),\n\t\tevents: {\n\t\t\t'change .tva-membership-change': 'setMembership',\n\t\t\t'change .tva-bundle-change': 'setBundle'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.settings = options.settings;\n\t\t\tthis.tag = options.tag;\n\t\t\tthis.$el.addClass( 'tva-' + this.tag + 'wrapper' );\n\t\t},\n\t\trender: function () {\n\t\t\tif ( ! ( this.settings.get( 'membership_levels' ) instanceof Backbone.Collection ) ) {\n\t\t\t\tthis.settings.set( {membership_levels: new ThriveApp.collections.MembermouseCollection( this.settings.get( 'membership_levels' ) )} );\n\t\t\t}\n\t\t\tif ( ! ( this.settings.get( 'bundles' ) instanceof Backbone.Collection ) ) {\n\t\t\t\tthis.settings.set( {bundles: new ThriveApp.collections.MembermouseCollection( this.settings.get( 'bundles' ) )} );\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {model: this.settings} ) );\n\n\t\t\tthis.renderLevels();\n\t\t\tthis.renderBundles();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetMembership: function ( e ) {\n\t\t\tvar ids = this.model.get( 'membership_ids' )[ this.tag ],\n\t\t\t\tvalue = $( e.currentTarget ).val();\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\tids.push( parseInt( value ) );\n\t\t\t} else {\n\t\t\t\tvar key = this.getKeyByValue( ids, value );\n\t\t\t\tif ( key ) {\n\t\t\t\t\tids.splice( key, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.model.get( 'membership_ids' )[ this.tag ] = ids;\n\n\t\t\tif ( this.tag === 'sendowl' ) {\n\t\t\t\tthis.model.set( {update_sendowl_products: true} );\n\t\t\t}\n\t\t},\n\t\tsetBundle: function ( e ) {\n\t\t\tvar ids = this.model.get( 'bundle_ids' )[ this.tag ],\n\t\t\t\tvalue = $( e.currentTarget ).val();\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\tids.push( parseInt( value ) );\n\t\t\t} else {\n\t\t\t\tvar key = this.getKeyByValue( ids, value );\n\t\t\t\tif ( key ) {\n\t\t\t\t\tids.splice( key, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.model.get( 'bundle_ids' )[ this.tag ] = ids;\n\n\t\t\tif ( this.tag === 'sendowl' ) {\n\t\t\t\tthis.model.set( {update_sendowl_products: true} );\n\t\t\t}\n\t\t},\n\t\tgetKeyByValue: function ( array, value ) {\n\t\t\tfor ( var key in array ) {\n\t\t\t\tif ( array[ key ] === parseInt( value ) ) {\n\t\t\t\t\treturn key;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\trenderLevels: function () {\n\t\t\tif ( this.settings.get( 'membership_levels' ).length > 0 ) {\n\t\t\t\tthis.settings.get( 'membership_levels' ).each( this.renderLevel, this );\n\t\t\t} else {\n\t\t\t\tthis.$( '#tva-' + this.tag + '-levels' ).append( '<p>' + ThriveApp.t.NoMembershipLevels + '</p>' );\n\t\t\t}\n\t\t},\n\t\trenderLevel: function ( level ) {\n\t\t\tvar view = null;\n\t\t\t/**\n\t\t\t * if we don't have a specific view for the levels for this memberhip plugin then render a base\n\t\t\t */\n\t\t\tif ( ! ThriveApp.views[ ThriveApp.util.upperFirst( this.tag ) + 'Level' ] ) {\n\t\t\t\tview = new ThriveApp.views.BaseLevel( {\n\t\t\t\t\tmodel: level,\n\t\t\t\t\tchecked: this.model.get( 'membership_ids' )[ this.tag ],\n\t\t\t\t\ttag: this.tag\n\t\t\t\t} );\n\n\t\t\t} else {\n\t\t\t\tview = new ThriveApp.views[ ThriveApp.util.upperFirst( this.tag ) + 'Level' ]( {\n\t\t\t\t\tmodel: level,\n\t\t\t\t\tchecked: this.model.get( 'membership_ids' )[ this.tag ],\n\t\t\t\t\ttag: this.tag\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$( '#tva-' + this.tag + '-levels' ).append( view.render().$el )\n\n\t\t},\n\t\trenderBundles: function () {\n\t\t\tif ( this.settings.get( 'bundles' ).length > 0 ) {\n\t\t\t\tthis.settings.get( 'bundles' ).each( this.renderBundle, this );\n\t\t\t} else {\n\t\t\t\tthis.$( '#tva-' + this.tag + '-bundles' ).append( '<p>' + ThriveApp.t.NoMembershipBundles + '</p>' );\n\t\t\t}\n\t\t},\n\t\trenderBundle: function ( bundle ) {\n\t\t\tvar view = null;\n\t\t\t/**\n\t\t\t * if we don't have a specific view for the bundles for this memberhip plugin then render a base\n\t\t\t */\n\t\t\tif ( ! ThriveApp.views[ ThriveApp.util.upperFirst( this.tag ) + 'Bundle' ] ) {\n\t\t\t\tview = new ThriveApp.views.BaseBundle( {\n\t\t\t\t\tmodel: bundle,\n\t\t\t\t\tchecked: this.model.get( 'bundle_ids' )[ this.tag ],\n\t\t\t\t\ttag: this.tag\n\t\t\t\t} );\n\n\t\t\t} else {\n\t\t\t\tview = new ThriveApp.views[ ThriveApp.util.upperFirst( this.tag ) + 'Bundle' ]( {\n\t\t\t\t\tmodel: bundle,\n\t\t\t\t\tchecked: this.model.get( 'bundle_ids' )[ this.tag ],\n\t\t\t\t\ttag: this.tag\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$( '#tva-' + this.tag + '-bundles' ).append( view.render().$el )\n\t\t}\n\t} );\n\n\t/**\n\t * Render one Base level checkbox\n\t */\n\tcourseView.BaseLevel = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/base-level' ),\n\t\tclassName: 'tva-base-level',\n\t\tinitialize: function ( options ) {\n\t\t\tthis.checked = options.checked;\n\t\t\tthis.tag = options.tag;\n\t\t\tthis.$el.addClass( 'tva-' + this.tag + '-level' )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, checked: this.checked, tag: this.tag} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tcourseView.SendowlLevel = courseView.BaseLevel.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/sendowl-level' )\n\t} );\n\n\t/**\n\t * Render one Base bundle checkbox\n\t */\n\tcourseView.BaseBundle = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/base-bundle' ),\n\t\tclassName: 'tva-base-bundle',\n\t\tinitialize: function ( options ) {\n\t\t\tthis.checked = options.checked;\n\t\t\tthis.tag = options.tag;\n\t\t\tthis.$el.addClass( 'tva-' + this.tag + '-bundle' )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, checked: this.checked, tag: this.tag} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tcourseView.SendowlBundle = courseView.BaseBundle.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/sendowl-bundle' )\n\t} );\n\n\t/**\n\t * Membermouse Options view extended from the Membership options base\n\t * (we keep this just to keep track of our plugins, the base would be just as good)\n\t */\n\tcourseView.MembermouseMembershipOptions = courseView.MembershipOptionsBase.extend( {} );\n\n\t/**\n\t * Memberpress Options view extended from the Membership options base\n\t */\n\tcourseView.MemberpressMembershipOptions = courseView.MembershipOptionsBase.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/memberpress-options' )\n\t} );\n\n\t/**\n\t * Wishlist Options view extended from the Membership options base\n\t */\n\tcourseView.WishlistMembershipOptions = courseView.MembershipOptionsBase.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/wishlist-options' )\n\t} );\n\n\t/**\n\t * Sendowl options\n\t */\n\tcourseView.SendowlMembershipOptions = courseView.MembershipOptionsBase.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/sendowl-options' ),\n\t\tevents: function () {\n\t\t\treturn _.extend( {}, ThriveApp.views.MembershipOptionsBase.prototype.events, {\n\t\t\t\t'click .tva-refresh-memberships': 'refreshMembership'\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tif ( ! ( this.settings.get( 'membership_levels' ) instanceof Backbone.Collection ) ) {\n\t\t\t\tthis.settings.set( {membership_levels: new ThriveApp.collections.MembermouseCollection( this.settings.get( 'membership_levels' ) )} );\n\t\t\t}\n\t\t\tif ( ! ( this.settings.get( 'bundles' ) instanceof Backbone.Collection ) ) {\n\t\t\t\tthis.settings.set( {bundles: new ThriveApp.collections.MembermouseCollection( this.settings.get( 'bundles' ) )} );\n\t\t\t}\n\n\t\t\tvar disabled = ! ThriveApp.globals.settings.get( 'checkout_page_url' ) || ! ThriveApp.globals.settings.get( 'account_keys' ).secret;\n\n\t\t\tthis.$el.html( this.template( {model: this.settings, disabled: disabled} ) );\n\n\t\t\tthis.renderLevels();\n\t\t\tthis.renderBundles();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderLevels: function () {\n\t\t\tif ( this.settings.get( 'membership_levels' ).length > 0 ) {\n\t\t\t\tthis.settings.get( 'membership_levels' ).each( this.renderLevel, this );\n\t\t\t} else {\n\t\t\t\tthis.$( '#tva-' + this.tag + '-levels' ).append( '<p>' + ThriveApp.t.NoProducts + '</p>' );\n\t\t\t}\n\t\t},\n\n\t\trefreshMembership: function () {\n\n\t\t\t$( '.tva-membership-options' ).addClass( 'tva-sendowl-spinner' );\n\n\t\t\tvar self = this;\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: ThriveApp.routes.settings + '/refresh_sendowl_memberships/'\n\t\t\t} ).done( function ( response, status, options ) {\n\n\t\t\t\tif ( response.error ) {\n\t\t\t\t\tTVE_Dash.err( response.error, 5000 );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t_.each( ThriveApp.data.settings.membership_plugin, function ( value, index ) {\n\t\t\t\t\tif ( value.tag === 'sendowl' ) {\n\t\t\t\t\t\tThriveApp.data.settings.membership_plugin[ index ] = response\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tself.settings.set( {membership_levels: new ThriveApp.collections.MembermouseCollection( response.membership_levels )} );\n\t\t\t\tself.settings.set( {bundles: new ThriveApp.collections.MembermouseCollection( response.bundles )} );\n\n\t\t\t\tThriveApp.globals.settings.set( {\n\t\t\t\t\tsendowl_bundles: new ThriveApp.collections.Base( response.bundles ),\n\t\t\t\t\tsendowl_products: new ThriveApp.collections.Base( response.membership_levels )\n\t\t\t\t} );\n\n\t\t\t\tself.render();\n\t\t\t} ).always( function () {\n\t\t\t\t$( '.tva-membership-options' ).removeClass( 'tva-sendowl-spinner' );\n\t\t\t} );\n\t\t}\n\t} );\n\n\tmodule.exports = courseView;\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/course-views.js")},"font-manager.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tmodule.exports = {\n\n\t\t/**\n\t\t * Google API url\n\t\t */\n\t\t_api: 'https://www.googleapis.com/webfonts/v1/webfonts',\n\n\t\t/**\n\t\t * Google Fonts API key\n\t\t */\n\t\t_key: 'AIzaSyDJhU1bXm2YTz_c4VpWZrAyspOS37Nn-kI',\n\n\t\t/**\n\t\t * Add import rule for font in head css\n\t\t * @param {object} font\n\t\t * @return {int} rule index\n\t\t */\n\t\timport_font: function ( font ) {\n\t\t\tvar removeIndex = 0,\n\t\t\t\timports = TVE.CSS_Rule_Cache.getImports();\n\n\t\t\t/* check the rest of the imported fonts to see if we imported this font again */\n\t\t\t_.each( imports, function ( f, i ) {\n\t\t\t\tvar parsed = this.parse_link( f );\n\n\t\t\t\tif ( parsed.family === font.family ) {\n\t\t\t\t\t/* if we find the same font imported before, we get the variants and we remove it */\n\t\t\t\t\tfont.variants = font.variants.concat( parsed.variants );\n\n\t\t\t\t\tTVE.CSS_Rule_Cache.removeRule( i - ( removeIndex ++ ) );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t/* store unique variants only */\n\t\t\tfont.variants = font.variants.filter( function ( value, index, self ) {\n\t\t\t\treturn self.indexOf( value ) === index\n\t\t\t} );\n\n\t\t\treturn TVE.CSS_Rule_Cache.insertImport( this.generate_link( font ) );\n\t\t},\n\n\t\t/**\n\t\t * Get all imported fonts in the head css\n\t\t * @returns {{}}\n\t\t */\n\t\tget_imported_fonts: function () {\n\t\t\tvar imports = TVE.CSS_Rule_Cache.getImports(),\n\t\t\t\tfonts = {}, self = this;\n\n\t\t\timports.forEach( function ( font ) {\n\t\t\t\tvar f = self.parse_link( font );\n\t\t\t\tfonts[ f.family ] = f;\n\t\t\t} );\n\n\t\t\treturn fonts\n\t\t},\n\t\t/**\n\t\t * Generate api url from font object\n\t\t * @param font Object with family/variants/subsets\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tgenerate_link: function ( font ) {\n\t\t\tvar apiUrl = [];\n\n\t\t\tapiUrl.push( '//fonts.googleapis.com/css?family=' );\n\t\t\tapiUrl.push( font.family.replace( / /g, '+' ) );\n\t\t\tapiUrl.push( ':' );\n\t\t\tapiUrl.push( font.variants.join( ',' ) );\n\t\t\tapiUrl.push( '&subset=' );\n\t\t\tapiUrl.push( font.subset );\n\n\t\t\treturn apiUrl.join( '' );\n\t\t},\n\t\tparse_link: function ( url ) {\n\t\t\tvar match = /family=([a-zA-Z\\+\\d]*):([A-Za-z0-9,]*)&subset=(\\w*)/g.exec( url ),\n\t\t\t\tfont = {};\n\n\t\t\tif ( match.length > 3 ) {\n\t\t\t\tfont.family = match[ 1 ].replace( /\\+/g, ' ' );\n\t\t\t\tfont.variants = match[ 2 ].split( ',' );\n\t\t\t\tfont.subsets = match[ 3 ];\n\t\t\t}\n\n\t\t\treturn font;\n\t\t},\n\t\t/**\n\t\t * Get font name from import url\n\t\t * @param link\n\t\t * @returns string\n\t\t */\n\t\tread_font_name: function ( link ) {\n\t\t\tvar match = link.match( /family=((\\w|\\+)*)/ ),\n\t\t\t\tfont = link;\n\n\t\t\tif ( match.length > 1 ) {\n\t\t\t\tfont = match[ 1 ].replace( /\\+/g, ' ' );\n\t\t\t}\n\n\t\t\treturn font;\n\t\t},\n\t\t/**\n\t\t * Check if a font is used in the head css or not.\n\t\t * @param font {string}\n\t\t * @returns {boolean}\n\t\t */\n\t\tis_font_used: function ( font ) {\n\t\t\tif ( ! font ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/* if the font is sent as link, we parse it first */\n\t\t\tif ( font.indexOf( 'fonts.googleapis.com' ) !== - 1 ) {\n\t\t\t\tfont = this.read_font_name( font );\n\t\t\t}\n\n\t\t\tvar re = new RegExp( 'font-family: [\\\"]?' + font, 'g' ),\n\t\t\t\tcss = TVE.CSS_Rule_Cache.toText( CSSRule.MEDIA_RULE ),\n\t\t\t\tfontFound = re.test( css );\n\n\t\t\t/**\n\t\t\t * If no block elements match the font ( added through head_css )\n\t\t\t * also look for inline styles ( e.g. for text elements )\n\t\t\t */\n\t\t\tif ( ! fontFound ) {\n\t\t\t\tTVE.Editor_Page.editor.find( TVE.TEXT_ALL ).find( 'span[style]' ).each( function () {\n\t\t\t\t\tif ( this.style.fontFamily && this.style.fontFamily.replace( /\"/g, '' ) === font ) {\n\t\t\t\t\t\tfontFound = true;\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn fontFound;\n\t\t},\n\t\t/**\n\t\t * Get Google Fonts\n\t\t * @returns {Array}\n\t\t */\n\t\tget_google_fonts: function () {\n\t\t\t/* try and get google fonts from local storage */\n\t\t\tvar fonts = ThriveApp.util.localStorage.get( 'ta_google_fonts' );\n\n\t\t\tif ( ! fonts || ! fonts.length ) {\n\t\t\t\t/* if we don't have the fonts in the local storage we get them from the API */\n\t\t\t\tjQuery.ajax( {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: this._api,\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tasync: false,\n\t\t\t\t\tcache: true,\n\t\t\t\t\tdata: {key: this._key}\n\t\t\t\t} ).done( function ( response ) {\n\t\t\t\t\tfonts = response.items || [];\n\t\t\t\t} ).fail( function () {\n\t\t\t\t\tfonts = [];\n\t\t\t\t} );\n\t\t\t\t/* and save them afterwards  */\n\t\t\t\tThriveApp.util.localStorage.set( 'ta_google_fonts', fonts );\n\t\t\t}\n\n\t\t\treturn fonts;\n\t\t}\n\t};\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/font-manager.js")},"main.js":function(exports,module,require){eval("var soSettingsModel = require( './models/sendowl/settings' );\n\n( function ( $ ) {\n\n\tvar ThriveApp = window.ThriveApp || {};\n\tThriveApp.util = ThriveApp.util || {};\n\tThriveApp.globals = ThriveApp.globals || {};\n\n\t/**\n\t * Settings for the underscore templates\n\t * Enables <##> tags instead of <%%>\n\t *\n\t * @type {{evaluate: RegExp, interpolate: RegExp, escape: RegExp}}\n\t */\n\t_.templateSettings = {\n\t\tevaluate: /<#([\\s\\S]+?)#>/g,\n\t\tinterpolate: /<#=([\\s\\S]+?)#>/g,\n\t\tescape: /<#-([\\s\\S]+?)#>/g\n\t};\n\n\t/**\n\t * Fuck off IE TASK: TA-901\n\t * @type {*|(function(*=): boolean)}\n\t */\n\tNumber.isInteger = Number.isInteger || function ( value ) {\n\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\t};\n\n\tThriveApp.PostSearch = require( './post-search' );\n\tThriveApp.util.localStorage = require( './storage' ).instance();\n\tThriveApp.util.FontManager = require( './font-manager' );\n\n\n\t$.extend( true, ThriveApp, require( './models/models' ) );\n\t$.extend( true, ThriveApp, require( './collections/collections' ) );\n\t$.extend( true, ThriveApp.util, require( './_util' ) );\n\n\t/**\n\t * DOM Ready\n\t */\n\t$( function () {\n\t\tThriveApp.modals = require( './modals' );\n\t\tThriveApp.views = require( './views' );\n\t\t$.extend( true, ThriveApp.views, require( './course-views' ) );\n\t\tThriveApp.Router = require( './routes' );\n\n\t\tThriveApp.globals.settings = new ThriveApp.models.Settings( ThriveApp.data.settings );\n\t\tThriveApp.globals.soSettings = new soSettingsModel( ThriveApp.data.sendowl );\n\t\tThriveApp.globals.topics = new ThriveApp.collections.TopicsCollection( ThriveApp.data.topics );\n\t\tThriveApp.globals.labels = new ThriveApp.collections.LabelsCollection( ThriveApp.data.labels );\n\t\tThriveApp.globals.levels = new ThriveApp.collections.Levels( ThriveApp.data.levels );\n\t\tThriveApp.globals.roles = new ThriveApp.collections.Roles( ThriveApp.data.defaults.roles );\n\t\tThriveApp.globals.courses = new ThriveApp.collections.Courses( ThriveApp.data.courses );\n\n\t\tThriveApp.globals.settings.set( {\n\t\t\tmembership_plugin: new ThriveApp.collections.MembershipsCollection( ThriveApp.globals.settings.get( 'membership_plugin' ) )\n\t\t} );\n\n\t\tThriveApp.globals.available_settings = new ThriveApp.models.AvailableSettings();\n\t\tThriveApp.globals.fonts = new ThriveApp.collections.Fonts( ThriveApp.data.fonts );\n\t\tThriveApp.globals.googlefonts = new ThriveApp.collections.GoogleFonts( ThriveApp.util.FontManager.get_google_fonts() );\n\t\tThriveApp.globals.tva_iframe_loaded = '';\n\t\tThriveApp.globals.selected_items = new ThriveApp.collections.SelectedItems();\n\t\tThriveApp.globals.bulk_action_model = new ThriveApp.models.BulkActions();\n\t\tThriveApp.globals.moved_item = null;\n\t\tThriveApp.globals.sendowl_customers = new ThriveApp.collections.SendowlCustomers( ThriveApp.data.customers );\n\n\t\t/**\n\t\t * Logs Data\n\t\t */\n\t\tThriveApp.globals.logs = new ThriveApp.collections.Logs( ThriveApp.data.logs );\n\t\tThriveApp.globals.stacks = new ThriveApp.collections.Stacks( ThriveApp.data.stacks );\n\t\tThriveApp.globals.log_types = new ThriveApp.collections.Types( ThriveApp.data.log_types );\n\t\tThriveApp.globals.stack_types = new ThriveApp.collections.Types( ThriveApp.data.stack_types );\n\t\tThriveApp.globals.logs_settings = new ThriveApp.models.LogsSettings( ThriveApp.data.logs_settings );\n\n\t\tThriveApp.globals.icons = {\n\t\t\tcustomIcons: [],\n\t\t\tsvgIcons: [],\n\t\t\t$svgIconsHtml: '',\n\t\t\tfetched: false\n\t\t};\n\n\t\tThriveApp.router = new ThriveApp.Router();\n\t\tThriveApp.router.init_breadcrumbs();\n\t\tBackbone.history.start( {hashchange: true} );\n\n\t\tif ( ! ThriveApp.wizard ) {\n\t\t\tThriveApp.router.navigate( '#greeting', {trigger: true} );\n\t\t}\n\n\t\tif ( ! Backbone.history.fragment ) {\n\t\t\tThriveApp.router.navigate( '#dashboard', {trigger: true} );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/main.js")},"modals.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar modals = {};\n\n\t/**\n\t * Modal Steps View\n\t * If a wizard is needed implement or extend this view\n\t */\n\tmodals.ModalSteps = TVE_Dash.views.Modal.extend( {\n\t\tstepClass: '.tva-modal-step',\n\t\tcurrentStep: 0,\n\t\t$step: null,\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': \"next\",\n\t\t\t'click .tva-modal-prev-step': \"prev\"\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.steps = this.$el.find( this.stepClass ).hide();\n\t\t\tthis.gotoStep( 0 );\n\t\t\treturn this;\n\t\t},\n\t\tgotoStep: function ( index ) {\n\t\t\tvar step = this.steps.hide().eq( index ).show(),\n\t\t\t\tself = this;\n\t\t\tthis.$step = step;\n\t\t\tsetTimeout( function () {\n\t\t\t\tself.input_focus( step );\n\t\t\t}, 50 );\n\n\t\t\tthis.currentStep = index;\n\n\t\t\treturn this;\n\t\t},\n\t\tnext: function () {\n\t\t\tthis.beforeNext();\n\t\t\tthis.gotoStep( this.currentStep + 1 );\n\t\t\tthis.afterNext();\n\t\t},\n\t\tprev: function () {\n\t\t\tthis.beforePrev();\n\t\t\tthis.gotoStep( this.currentStep - 1 );\n\t\t\tthis.afterPrev();\n\t\t},\n\t\tbeforeNext: function () {\n\t\t\treturn this;\n\t\t},\n\t\tafterNext: function () {\n\t\t\treturn this;\n\t\t},\n\t\tbeforePrev: function () {\n\t\t\treturn this;\n\t\t},\n\t\tafterPrev: function () {\n\t\t\treturn this;\n\t\t},\n\t\tbind_zclip: function () {\n\t\t\tTVE_Dash.bindZClip( this.$el.find( 'a.tvd-copy-to-clipboard' ) );\n\t\t}\n\t} );\n\n\tmodals.ModalGreetings = modals.ModalSteps.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/greetings' ),\n\t\tempty_check: 0,\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': \"next\",\n\t\t\t'click .tva-modal-prev-step': \"prev\",\n\t\t\t'click .tva-go-to-templates': 'nextStep',\n\t\t\t'click .tva-go-to-wizard': 'goToWizard',\n\t\t\t'click .tva-go-to-dashboard': 'goToDashBoard',\n\t\t\t'input #tva-apprentice-page': function ( e ) {\n\t\t\t\tthis.empty_check = 1;\n\t\t\t\tvar current_val = $( e.currentTarget ).val();\n\t\t\t\tif ( ! current_val ) {\n\t\t\t\t\tthis.empty_check = 0;\n\t\t\t\t\tthis.$( '#tva-new-apprentice-page' ).removeAttr( 'disabled' );\n\t\t\t\t}\n\t\t\t},\n\t\t\t'input #tva-new-apprentice-page': function ( e ) {\n\t\t\t\tthis.model.get( 'index_page' ).ID = '';\n\t\t\t\tthis.model.get( 'index_page' ).name = '';\n\t\t\t\tif ( $( e.currentTarget ).val() === '' ) {\n\t\t\t\t\tthis.$( '#tva-apprentice-page' ).removeAttr( 'disabled' );\n\t\t\t\t\tthis.empty_check = 0;\n\t\t\t\t} else {\n\t\t\t\t\tthis.empty_check = 1;\n\t\t\t\t\tthis.$( '#tva-apprentice-page' ).attr( 'disabled', 'disabled' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.steps = this.$el.find( this.stepClass ).hide();\n\t\t\tthis.gotoStep( 0 );\n\n\t\t\tvar $post_search = this.$( '#tva-apprentice-page' ),\n\t\t\t\tmodel = this.model,\n\t\t\t\tself = this;\n\n\t\t\tnew ThriveApp.PostSearch( $post_search, {\n\t\t\t\turl: ThriveApp.routes.settings + '/search_pages/',\n\t\t\t\ttype: 'POST',\n\t\t\t\tselect: function ( event, ui ) {\n\t\t\t\t\tmodel.get( 'index_page' ).ID = parseInt( ui.item.id );\n\t\t\t\t\tmodel.get( 'index_page' ).name = ui.item.label;\n\t\t\t\t\tmodel.set( 'apprentice_url', ui.item.url );\n\t\t\t\t},\n\t\t\t\tsearch: function () {\n\t\t\t\t\tmodel.set( {index_page: {}} );\n\t\t\t\t\tself.$( '#tva-new-apprentice-page' ).removeAttr( 'disabled' );\n\t\t\t\t},\n\t\t\t\topen: function () {\n\t\t\t\t\tmodel.set( {index_page: {}} );\n\t\t\t\t\tself.$( '#tva-new-apprentice-page' ).attr( 'disabled', 'disabled' );\n\t\t\t\t},\n\t\t\t\tclose: function ( event, ui ) {\n\t\t\t\t\tif ( ! model.get( 'index_page' ).ID ) {\n\t\t\t\t\t\tself.$( '#tva-new-apprentice-page' ).removeAttr( 'disabled' );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfetch_single: model.get( 'index_page' )\n\t\t\t} );\n\t\t},\n\t\tnextStep: function () {\n\t\t\tthis.tvd_clear_errors();\n\t\t\tvar self = this;\n\n\t\t\tif ( this.empty_check == 0 ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.NotEmpty );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tthis.model.set( {first_time: true, preview_notification: true} );\n\t\t\tif ( ! this.model.get( 'index_page' ).ID ) {\n\t\t\t\tvar value = this.$( '#tva-new-apprentice-page' ).val();\n\n\t\t\t\tif ( value ) {\n\t\t\t\t\t$.ajax( {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\turl: ThriveApp.routes.settings + '/create_new_page/',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tpage_name: value\n\t\t\t\t\t\t}\n\t\t\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\t\t\tself.model.get( 'index_page' ).ID = response.ID;\n\t\t\t\t\t\tself.model.get( 'index_page' ).name = value;\n\t\t\t\t\t\tself.model.set( 'apprentice_url', response.apprentice_url );\n\t\t\t\t\t\tself.model.set( 'preview_url', response.preview_url );\n\n\t\t\t\t\t\tif ( ! self.model.isValid() ) {\n\t\t\t\t\t\t\treturn self.tvd_show_errors( self.model );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.next();\n\t\t\t\t\t} ).always( function () {\n\t\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\t\t\t\t\tTVE_Dash.err( ThriveApp.t.NoIndexInvalidIndex );\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( ! this.model.isValid() ) {\n\t\t\t\t\treturn this.tvd_show_errors( this.model );\n\t\t\t\t}\n\n\t\t\t\t$.ajax( {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'POST',\n\t\t\t\t\turl: ThriveApp.routes.settings + '/update_provisional_index_page/',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tindex_page: self.model.get( 'index_page' )\n\t\t\t\t\t}\n\t\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\t\tself.model.set( {apprentice_url: response.apprentice_url} );\n\t\t\t\t\tself.model.set( {preview_url: response.preview_url} );\n\t\t\t\t\tself.next();\n\t\t\t\t} ).always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tgoToWizard: function () {\n\t\t\tthis.close();\n\t\t\tThriveApp.router.navigate( \"#template_settings\", {trigger: true} );\n\t\t},\n\t\tgoToDashBoard: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t\tThriveApp.router.navigate( \"#dashboard\", {trigger: true} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t} );\n\n\t/**\n\t * General settings modal\n\t */\n\tmodals.ModalSettings = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/settings' ),\n\t\tevents: {\n\t\t\t'click .tvd-modal-submit': 'save',\n\t\t\t'input #tva-per-page': 'setCourses',\n\t\t\t'click #tva-load-scripts': 'setLoadScripts',\n\t\t\t'click #tva-auto-login': 'setAutoLogin',\n\t\t\t'click #tva-show-loginform': 'setLoginForm',\n\t\t\t'click #tva-show-apprentice-label': 'setApprenticeLabel',\n\t\t\t'click #tva-comements-status': 'setCommentsStatus'\n\t\t},\n\t\tregister_view: null,\n\t\tinitial_comment_status: null,\n\t\tafterRender: function () {\n\t\t\tvar $post_search = this.$( '#tva-apprentice-page' ),\n\t\t\t\t$login_page_search = this.$( '#tva-apprentice-login-page' ),\n\t\t\t\tmodel = this.model;\n\t\t\tthis.initial_comment_status = model.get( 'comment_status' );\n\t\t\tnew ThriveApp.PostSearch( $post_search, {\n\t\t\t\turl: ThriveApp.routes.settings + '/search_pages/',\n\t\t\t\ttype: 'POST',\n\t\t\t\tselect: function ( event, ui ) {\n\t\t\t\t\tmodel.get( 'index_page' ).ID = parseInt( ui.item.id );\n\t\t\t\t\tmodel.get( 'index_page' ).name = ui.item.label;\n\t\t\t\t},\n\t\t\t\tsearch: function () {\n\t\t\t\t\tmodel.set( {index_page: {}} );\n\t\t\t\t},\n\t\t\t\topen: function () {\n\t\t\t\t\tmodel.set( {index_page: {}} );\n\t\t\t\t},\n\t\t\t\tfetch_single: model.get( 'index_page' )\n\t\t\t} );\n\n\t\t\tthis.register_view = new ThriveApp.modals.RegisterPage( {\n\t\t\t\tel: this.$( '#tva-register-container' ),\n\t\t\t\tmodel: ThriveApp.globals.settings\n\t\t\t} );\n\n\t\t\tif ( model.get( 'loginform' ) == true ) {\n\t\t\t\tthis.register_view.render();\n\t\t\t}\n\t\t},\n\t\tisNormalInteger: function ( str ) {\n\t\t\tvar n = Math.floor( Number( str ) );\n\t\t\treturn String( n ) === str && n > 0;\n\t\t},\n\t\tsetCourses: function ( e ) {\n\t\t\tif ( ! this.isNormalInteger( $( e.currentTarget ).val() ) ) {\n\t\t\t\tthis.$( '.tvd-modal-submit' ).attr( 'disabled', 'disabled' );\n\t\t\t\treturn TVE_Dash.err( ThriveApp.t.IntegerFieldValidation );\n\t\t\t}\n\n\t\t\tthis.$( '.tvd-modal-submit' ).removeAttr( 'disabled' );\n\t\t\tthis.model.set( {per_page: $( e.currentTarget ).val()} )\n\t\t},\n\t\tsetLoadScripts: function ( e ) {\n\t\t\tvar value = $( e.currentTarget ).is( ':checked' );\n\n\t\t\tthis.model.set( {load_scripts: value} );\n\t\t},\n\t\tsetAutoLogin: function ( e ) {\n\t\t\tvar value = $( e.currentTarget ).is( ':checked' );\n\n\t\t\tthis.model.set( {auto_login: value} );\n\t\t},\n\t\tsetLoginForm: function ( e ) {\n\t\t\tvar value = $( e.currentTarget ).is( ':checked' );\n\t\t\tthis.model.set( {loginform: value} );\n\n\t\t\tvalue === true ?\n\t\t\t\tthis.register_view.render() :\n\t\t\t\tthis.register_view.$el.empty()\n\t\t},\n\t\tsetApprenticeLabel: function ( e ) {\n\t\t\tvar value = $( e.currentTarget ).is( ':checked' );\n\n\t\t\tthis.model.set( {apprentice_label: value} );\n\t\t},\n\t\tsetCommentsStatus: function ( e ) {\n\t\t\tvar value = $( e.currentTarget ).is( ':checked' );\n\n\t\t\tvalue === true ? this.model.set( {comment_status: 'open'} ) : this.model.set( {comment_status: 'closed'} );\n\t\t},\n\t\tsave: function () {\n\t\t\tthis.tvd_clear_errors();\n\t\t\tvar changed = this.initial_comment_status != this.model.get( 'comment_status' ) ? true : false;\n\t\t\tthis.model.set( {is_comment_status_changed: changed} );\n\n\t\t\tif ( ! this.model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.model );\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this,\n\t\t\t\txhr = this.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\t// should we do something with the response ?\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.model.set( {\n\t\t\t\t\t\t\tapprentice_url: response.apprentice_url,\n\t\t\t\t\t\t\tpreview_url: response.preview_url\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.model.trigger( 'tva_render_header' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tself.close();\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t} );\n\n\tmodals.ModalImportLessons = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/import' ),\n\t\tevents: {\n\t\t\t'click .tva-no': 'setImport',\n\t\t\t'click .tva-yes': 'setImport'\n\t\t},\n\t\tsetImport: function ( e ) {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/set_import/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tself.model.set( {import: response} );\n\t\t\t\tself.close();\n\t\t\t\tif ( $( e.currentTarget ).hasClass( 'tva-yes' ) ) {\n\t\t\t\t\tThriveApp.router.navigate( \"#import\", {trigger: true} );\n\t\t\t\t}\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t}\n\t} );\n\n\t/**\n\t * View to render delete modal\n\t */\n\tmodals.ConfirmBulkDelete = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/bulkdelete' ),\n\t\tevents: {\n\t\t\t'click .tvd-modal-submit': 'deleteBulkItems',\n\t\t\t'click .tvd-modal-close': 'closeModal'\n\t\t},\n\t\tafterInitialize: function ( args ) {\n\t\t\t_.bindAll( this, 'keyAction' );\n\t\t\t$( document ).bind( 'keydown', this.keyAction );\n\t\t},\n\t\tkeyAction: function ( e ) {\n\t\t\tvar code = e.which;\n\t\t\tif ( code == 13 ) {\n\t\t\t\tthis.deleteBulkItems();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Unbind when esc is pressed\n\t\t\t */\n\t\t\tif ( code === 27 ) {\n\t\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\t}\n\t\t},\n\t\tdeleteBulkItems: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this;\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce,\n\t\t\t\t\t'X-TVA-Request-ID': ThriveApp.request_id\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.courses + '/bulk_action/',\n\t\t\t\tdata: {\n\t\t\t\t\taction: 'delete',\n\t\t\t\t\titems: ThriveApp.globals.selected_items.listValue( 'ID' ),\n\t\t\t\t\tcourse_id: ThriveApp.globals.active_course.get( 'ID' )\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.ItemDeleted );\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_after_action', {\n\t\t\t\t\t\taction: 'delete',\n\t\t\t\t\t\tmodel: response\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t} ).always( function () {\n\t\t\t\t$( document ).unbind( 'keydown', self.keyAction );\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\tself.close();\n\t\t\t} );\n\t\t},\n\t\tcloseModal: function () {\n\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\tThriveApp.globals.selected_items.reset();\n\t\t\tThriveApp.globals.selected_items.trigger( 'tva_hide_bulk_actions' );\n\t\t\tThriveApp.globals.selected_items.trigger( 'tva_clear_selected' );\n\t\t\tthis.close();\n\t\t}\n\t} );\n\n\t/**\n\t * View to render move items modal\n\t */\n\tmodals.ConfirmBulkMove = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/bulkmove' ),\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': 'next',\n\t\t\t'click .tva-modal-prev-step': 'prev',\n\t\t\t'click .tva-receiver-course-item': function ( e ) {\n\t\t\t\tthis.$( '.tva-available-receivers-courses' ).slideToggle();\n\t\t\t},\n\t\t\t'click .tva-receiver-module-item': function ( e ) {\n\t\t\t\tthis.$( '.tva-available-receivers-modules' ).slideToggle();\n\t\t\t},\n\t\t\t'click .tva-receiver-chapter-item': function () {\n\t\t\t\tthis.$( '.tva-available-receivers-chapters' ).slideToggle();\n\t\t\t},\n\t\t\t'click .tva-single-course-item': 'renderReceiverCourseChange',\n\t\t\t'click .tva-single-module-item': 'renderReceiverModuleChange',\n\t\t\t'click .tva-single-chapter-item': 'renderReceiverChapterChange',\n\t\t\t'click .tvd-modal-submit': 'moveBulkItems',\n\t\t\t'click .tvd-modal-close': 'closeModal'\n\t\t},\n\t\treceiverCourseModel: null,\n\t\treceiverModuleModel: null,\n\t\treceiverChapterModel: null,\n\t\ttype: null,\n\t\tafterInitialize: function () {\n\t\t\tvar first_item = ThriveApp.globals.selected_items.at( 0 );\n\t\t\t$( document ).bind( 'keydown', this.keyAction );\n\t\t\tthis.item_level = ThriveApp.globals.selected_items.getHighestSelectedLevel();\n\n\t\t\tthis.selected = new ThriveApp.collections.SelectedItems( JSON.parse( JSON.stringify( ThriveApp.globals.selected_items ) ) );\n\n\t\t\tthis.type = first_item.get( 'item_type' ).toLowerCase();\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.steps = this.$el.find( this.stepClass ).hide();\n\t\t\tthis.renderOptions();\n\t\t\tthis.closeOnLoseFocus();\n\t\t},\n\t\tkeyAction: function ( e ) {\n\t\t\tvar code = e.which;\n\t\t\tif ( code == 13 ) {\n\t\t\t\tthis.moveBulkItems();\n\t\t\t}\n\t\t},\n\t\tcloseOnLoseFocus: function () {\n\t\t\tvar self = this;\n\n\t\t\tthis.$el.on( 'click', function ( e ) {\n\t\t\t\tvar $container = self.$( '.tva-material-list' ),\n\t\t\t\t\t$element = self.$( '.tva-dropdown' );\n\n\t\t\t\tif ( ! $container.is( e.target ) && $container.has( e.target ).length === 0 && ! $element.is( e.target ) ) {\n\t\t\t\t\t$container.slideUp();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\trenderOptions: function () {\n\t\t\tthis.renderReceiverCourse();\n\t\t\tthis.renderReceiverModule();\n\t\t\tthis.renderReceiverChapter();\n\t\t},\n\t\trenderReceiverCourse: function () {\n\t\t\tvar view = new ThriveApp.views.ReceiverMoveItem( {\n\t\t\t\tel: this.$( '.tva-receiver-course' ),\n\t\t\t\tmodel: this.receiverCourseModel ? this.receiverCourseModel : new ThriveApp.models.Base(),\n\t\t\t\tcollection: this.collection,\n\t\t\t\ttype: 'course'\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\trenderReceiverModule: function () {\n\n\t\t\tthis.$( '.tva-receiver-module' ).empty();\n\n\t\t\tif ( this.receiverCourseModel && this.receiverCourseModel.hasChildren() === 'modules' && ThriveApp.util.userHasToDecide( this.item_level, this.receiverCourseModel ) > 0 ) {\n\t\t\t\tvar view = new ThriveApp.views.ReceiverMoveItem( {\n\t\t\t\t\tel: this.$( '.tva-receiver-module' ),\n\t\t\t\t\tmodel: this.receiverModuleModel ? this.receiverModuleModel : new ThriveApp.models.Base(),\n\t\t\t\t\tcollection: this.receiverCourseModel.get( 'modules' ),\n\t\t\t\t\ttype: 'module'\n\t\t\t\t} );\n\n\t\t\t\tview.render();\n\t\t\t}\n\t\t},\n\t\trenderReceiverChapter: function () {\n\t\t\tthis.$( '.tva-receiver-chapter' ).empty();\n\t\t\tvar collection;\n\n\t\t\tif ( this.receiverModuleModel && ThriveApp.util.userHasToDecide( this.item_level, this.receiverModuleModel ) > 0 ) {\n\t\t\t\tcollection = this.receiverModuleModel.get( 'chapters' )\n\t\t\t} else if ( this.receiverCourseModel && this.receiverCourseModel.hasChildren() === 'chapters' && ThriveApp.util.userHasToDecide( this.item_level, this.receiverCourseModel ) > 0 ) {\n\t\t\t\tcollection = this.receiverCourseModel.get( 'chapters' )\n\t\t\t}\n\n\t\t\tif ( collection ) {\n\t\t\t\tvar view = new ThriveApp.views.ReceiverMoveItem( {\n\t\t\t\t\tel: this.$( '.tva-receiver-chapter' ),\n\t\t\t\t\tmodel: this.receiverChapterModel ? this.receiverChapterModel : new ThriveApp.models.Base(),\n\t\t\t\t\tcollection: collection,\n\t\t\t\t\ttype: 'chapter'\n\t\t\t\t} );\n\t\t\t\tview.render();\n\t\t\t}\n\t\t},\n\t\trenderReceiverCourseChange: function ( e ) {\n\t\t\tvar course_id = e.currentTarget.getAttribute( 'data-course-id' );\n\n\t\t\tthis.receiverCourseModel = ThriveApp.globals.courses.findWhere( {ID: parseInt( course_id )} );\n\t\t\tthis.receiverModuleModel = null;\n\t\t\tthis.receiverChapterModel = null;\n\t\t\tthis.post_parent = 0;\n\t\t\tthis.old_post_parent = this.selected.at( 0 ).get( 'post_parent' );\n\n\t\t\tthis.selected.each( function ( model ) {\n\t\t\t\tmodel.set( {course_id: course_id} );\n\t\t\t} );\n\n\t\t\tif ( ThriveApp.util.userHasToDecide( this.item_level, this.receiverCourseModel ) === 0 ) {\n\t\t\t\tthis.$( '.tvd-modal-submit' ).removeClass( 'tvd-disabled' );\n\t\t\t}\n\n\t\t\tthis.renderOptions();\n\t\t},\n\t\trenderReceiverModuleChange: function ( e ) {\n\t\t\tthis.post_parent = e.currentTarget.getAttribute( 'data-module-id' );\n\t\t\tthis.receiverModuleModel = this.receiverCourseModel.get( 'modules' ).findWhere( {ID: parseInt( this.post_parent )} );\n\t\t\tthis.receiverChapterModel = null;\n\n\t\t\tthis.renderReceiverModule();\n\t\t\tthis.renderReceiverChapter();\n\n\t\t\tif ( ThriveApp.util.userHasToDecide( this.item_level, this.receiverModuleModel ) === 0 ) {\n\t\t\t\tthis.$( '.tvd-modal-submit' ).removeClass( 'tvd-disabled' );\n\t\t\t}\n\t\t},\n\t\trenderReceiverChapterChange: function ( e ) {\n\t\t\tthis.post_parent = parseInt( e.currentTarget.getAttribute( 'data-chapter-id' ) );\n\n\t\t\tthis.receiverChapterModel = this.receiverModuleModel ?\n\t\t\t\tthis.receiverModuleModel.get( 'chapters' ).findWhere( {ID: this.post_parent} ) :\n\t\t\t\tthis.receiverCourseModel.get( 'chapters' ).findWhere( {ID: this.post_parent} );\n\n\t\t\tthis.renderReceiverChapter();\n\n\t\t\tthis.$( '.tvd-modal-submit' ).removeClass( 'tvd-disabled' );\n\t\t},\n\t\tvalidateBeforeSave: function () {\n\t\t\tif ( ! this.receiverCourseModel ) {\n\t\t\t\tTVE_Dash.err( 'Please select a course' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * No need to go further if we move modules\n\t\t\t */\n\t\t\tif ( this.type === 'module' ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar children = this.receiverCourseModel.hasChildren();\n\n\n\t\t\tif ( ! children ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( ( children === 'modules' ) && ! this.receiverModuleModel ) {\n\t\t\t\tTVE_Dash.err( 'Please select a module' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * No need to go further if we move chapters\n\t\t\t */\n\t\t\tif ( this.type === 'chapter' ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( this.type === 'lesson' ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( ! this.receiverChapterModel ) {\n\t\t\t\tTVE_Dash.err( 'Please select a chapter' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true\n\t\t},\n\n\t\tmoveBulkItems: function () {\n\t\t\tif ( ! this.validateBeforeSave() ) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.selected.each( function ( item ) {\n\t\t\t\titem.set( {old_post_parent: this.old_post_parent} );\n\t\t\t\titem.set( {post_parent: this.post_parent} );\n\t\t\t}, this );\n\n\t\t\tvar self = this,\n\t\t\t\tdata = this.selected.pluckValues(\n\t\t\t\t\t[ 'ID', 'post_parent', 'course_id', 'post_type', 'post_status', 'old_post_parent' ]\n\t\t\t\t);\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce,\n\t\t\t\t\t'X-TVA-Request-ID': ThriveApp.request_id\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.courses + '/bulk_action/',\n\t\t\t\tdata: {\n\t\t\t\t\taction: 'move',\n\t\t\t\t\titems: data,\n\t\t\t\t\thigh_level: ThriveApp.util.hierarchy[ this.item_level ],\n\t\t\t\t\tcourse_id: ThriveApp.globals.active_course.get( 'ID' )\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_after_action', {\n\t\t\t\t\t\taction: 'move',\n\t\t\t\t\t\tmodel: response\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t} ).always( function () {\n\t\t\t\t$( document ).unbind( 'keydown', self.keyAction );\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\tself.closeModal();\n\t\t\t} );\n\t\t},\n\t\tcloseModal: function () {\n\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\tthis.close();\n\t\t}\n\t} );\n\n\tmodals.ConfirmBulkMoveNo = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/bulkmoveno' )\n\t} );\n\n\t/**\n\t * Base view for grouping items\n\t */\n\tmodals.BaseItemGroup = modals.ModalSteps.extend( {\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': 'next',\n\t\t\t'click .tva-modal-prev-step': 'prev',\n\t\t\t'click .tvd-group-modal-submit': 'save',\n\t\t\t'click .tvd-modal-close': 'closeModal'\n\t\t},\n\t\tmain_item_model: null,\n\t\toptional_item_model: null,\n\t\titem_collection: null,\n\t\tnext_step: null,\n\t\tprev_step: null,\n\t\tchilds: null,\n\t\tafterRender: function () {\n\t\t\tthis.childs = this.model.hasChildren();\n\n\t\t\t/**\n\t\t\t * End it here if no childs are found for given model\n\t\t\t */\n\t\t\tif ( ( false === this.childs ) || ! ThriveApp.util.isCollection( this.model.get( this.childs ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.steps = this.$el.find( this.stepClass ).hide();\n\t\t\tthis.gotoStep( 0 );\n\t\t\treturn this;\n\t\t},\n\t\tnext: function () {\n\t\t\tif ( ( this.currentStep === 1 ) && this.optional_item_model && ! this.optional_item_model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.optional_item_model );\n\t\t\t}\n\n\t\t\tthis.getNextStep();\n\t\t\tthis.gotoStep( this.next_step );\n\t\t\tthis.renderCurrentStep();\n\n\t\t\treturn this;\n\t\t},\n\t\tprev: function () {\n\t\t\tthis.gotoStep( this.currentStep - 1 );\n\t\t\tthis.renderSmallEditor();\n\t\t\tthis.bindOnKeyDown();\n\t\t\treturn this;\n\t\t},\n\t\tbindOnKeyDown: function () {\n\t\t\tif ( this.currentStep === 2 ) {\n\t\t\t\t_.bindAll( this, 'keyAction' );\n\t\t\t\t$( document ).bind( 'keydown', this.keyAction );\n\t\t\t} else {\n\t\t\t\t$( document ).unbind( 'keydown', this.keyAction )\n\t\t\t}\n\t\t},\n\t\tkeyAction: function ( e ) {\n\t\t\tvar code = e.which;\n\t\t\tif ( code == 13 ) {\n\t\t\t\tthis.save();\n\t\t\t}\n\t\t},\n\t\tgetNextStep: function () {\n\t\t\treturn this;\n\t\t},\n\t\tgetPrevStep: function () {\n\t\t\treturn this;\n\t\t},\n\t\tmakeOptionalItemModel: function () {\n\t\t\treturn this;\n\t\t},\n\t\tmakeMainItemModel: function () {\n\t\t\treturn this\n\t\t},\n\t\trenderEditor: function () {\n\t\t\treturn this;\n\t\t},\n\t\trenderCurrentStep: function () {\n\t\t\tswitch ( this.currentStep ) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.makeOptionalItemModel();\n\t\t\t\t\tthis.renderSmallEditor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.tvd_clear_errors();\n\n\t\t\t\t\tif ( ! this.main_item_model ) {\n\t\t\t\t\t\tthis.makeMainItemModel();\n\t\t\t\t\t\tthis.renderEditor();\n\t\t\t\t\t\tthis.bindOnKeyDown();\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trenderSmallEditor: function () {\n\t\t\tif ( this.inputEditor ) {\n\t\t\t\tthis.inputEditor.render();\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.inputEditor = new ThriveApp.views.InputFieldEditor( {\n\t\t\t\tel: this.$( '.tva-default-module-editor' ),\n\t\t\t\tmodel: this.optional_item_model,\n\t\t\t\tplaceholder: ThriveApp.util.upperFirst( this.group_type )\n\t\t\t} );\n\n\t\t\tthis.inputEditor.render();\n\n\t\t\treturn this;\n\t\t},\n\t\tsave: function () {\n\t\t\tthis.tvd_clear_errors();\n\n\t\t\tif ( ! this.main_item_model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.main_item_model );\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar data = [],\n\t\t\t\tself = this;\n\n\t\t\tdata.push( this.main_item_model.toDeepJSON() );\n\n\t\t\tif ( this.optional_item_model ) {\n\t\t\t\tdata.push( this.optional_item_model.toDeepJSON() );\n\t\t\t}\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce,\n\t\t\t\t\t'X-TVA-Request-ID': ThriveApp.request_id\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes[ this.group_type + 's' ] + '/group_as_' + this.group_type + '/',\n\t\t\t\tdata: {\n\t\t\t\t\titems: data,\n\t\t\t\t\tcourse_id: ThriveApp.globals.active_course.get( 'ID' )\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_after_action', {\n\t\t\t\t\t\taction: 'group',\n\t\t\t\t\t\tmodel: response\n\t\t\t\t\t} );\n\t\t\t\t\tThriveApp.globals.bulk_action_model.clear().set( ThriveApp.globals.bulk_action_model.defaults );\n\t\t\t\t\tThriveApp.globals.selected_items.reset();\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t} ).always( function () {\n\t\t\t\t$( document ).unbind( 'keydown', self.keyAction );\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\tself.close();\n\t\t\t} );\n\t\t},\n\t\tcloseModal: function () {\n\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\tthis.close();\n\t\t}\n\t} );\n\n\t/**\n\t * View to render groping items in a module\n\t */\n\tmodals.ConfirmModuleGroup = modals.BaseItemGroup.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/module-group' ),\n\t\tgetNextStep: function () {\n\t\t\tvar type = this.childs.substring( 0, this.childs.length - 1 ),\n\t\t\t\ttype_items = ThriveApp.globals.selected_items.where( {type: type} );\n\n\t\t\tswitch ( this.currentStep ) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.next_step = ( this.model.get( 'modules' ).length === 0 ) &&\n\t\t\t\t\t                 ( type_items.length < this.model.get( this.childs ).length ) ? 1 : 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.next_step = 2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tmakeMainItemModel: function () {\n\t\t\tvar items = ThriveApp.globals.selected_items.where( {type: 'lesson'} ),\n\t\t\t\titem_ids = [];\n\t\t\tthis.item_collection = this.model.get( 'modules' );\n\t\t\tthis.main_item_model = new ThriveApp.models.Module( {\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\torder: ThriveApp.globals.active_course.get( 'modules' ).length,\n\t\t\t\tcomment_status: this.model.get( 'comment_status' )\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Only the direct descendent will have his post parent changed\n\t\t\t * so we don't need to send through the lessons if we have chapters\n\t\t\t */\n\t\t\tif ( ThriveApp.globals.selected_items.findWhere( {type: 'chapter'} ) ) {\n\t\t\t\titems = ThriveApp.globals.selected_items.where( {type: 'chapter'} );\n\t\t\t}\n\n\t\t\t_.each( items, function ( item ) {\n\t\t\t\tif ( item.get( 'post_status' ) === 'publish' ) {\n\t\t\t\t\tthis.main_item_model.set( {post_status: 'publish'} );\n\t\t\t\t}\n\n\t\t\t\titem_ids.push( item.get( 'ID' ) );\n\t\t\t}, this );\n\n\t\t\tthis.main_item_model.set( {item_ids: item_ids} );\n\n\t\t\treturn this;\n\t\t},\n\t\tmakeOptionalItemModel: function () {\n\t\t\tvar item_ids = [];\n\t\t\tthis.optional_item_model = new ThriveApp.models.Module( {\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\torder: ThriveApp.globals.active_course.get( 'modules' ).length + 1,\n\t\t\t\tcomment_status: this.model.get( 'comment_status' )\n\t\t\t} );\n\n\t\t\tvar type = ThriveApp.globals.active_course.hasChildren(),\n\t\t\t\telements = ThriveApp.globals.active_course.get( type ).reject( function ( item ) {\n\t\t\t\t\treturn !! ThriveApp.globals.selected_items.findWhere( {ID: item.get( 'ID' )} );\n\t\t\t\t} );\n\n\t\t\t_.each( elements, function ( item ) {\n\t\t\t\tif ( item.get( 'post_status' ) === 'publish' ) {\n\t\t\t\t\tthis.optional_item_model.set( {post_status: 'publish'} );\n\t\t\t\t}\n\n\t\t\t\titem_ids.push( item.get( 'ID' ) );\n\t\t\t}, this );\n\n\t\t\tthis.optional_item_model.set( {item_ids: item_ids} );\n\t\t},\n\t\trenderEditor: function () {\n\t\t\tvar view = new ThriveApp.views.ModuleEditor( {\n\t\t\t\tel: this.$( '.tva-main-item-editor' ),\n\t\t\t\tmodel: this.main_item_model,\n\t\t\t\tcollection: this.item_collection\n\t\t\t} );\n\n\t\t\tview.footerView = 'ModalGroupFooter';\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render chapter group screen\n\t */\n\tmodals.ConfirmChapterGroup = modals.BaseItemGroup.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/chapter/chapter-group' ),\n\t\tgetNextStep: function () {\n\t\t\tthis.parent_model = this.model;\n\t\t\tif ( this.model.get( 'lessons' ).length === 0 ) {\n\n\t\t\t\tvar self = this;\n\t\t\t\tThriveApp.globals.selected_items.each( function ( item ) {\n\t\t\t\t\tvar module = ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: item.get( 'post_parent' )} );\n\n\t\t\t\t\tif ( module ) {\n\t\t\t\t\t\tself.parent_model = module;\n\t\t\t\t\t}\n\t\t\t\t}, this );\n\t\t\t}\n\n\t\t\tif ( this.currentStep === 0 ) {\n\t\t\t\tthis.next_step = ThriveApp.globals.selected_items.length < this.parent_model.get( 'lessons' ).length ? 1 : 2;\n\t\t\t}\n\n\t\t\tif ( this.currentStep === 1 ) {\n\t\t\t\tthis.next_step = 2;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tmakeMainItemModel: function () {\n\t\t\tvar items = ThriveApp.globals.selected_items.where( {type: 'lesson'} ),\n\t\t\t\titem_ids = [],\n\t\t\t\tmodule_id,\n\t\t\t\tcollection = ThriveApp.globals.active_course.get( 'chapters' );\n\n\t\t\tthis.main_item_model = new ThriveApp.models.Chapter( {\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\torder: collection.length\n\t\t\t} );\n\n\n\t\t\t_.each( items, function ( item ) {\n\t\t\t\tif ( item.get( 'post_status' ) === 'publish' ) {\n\t\t\t\t\tthis.main_item_model.set( {post_status: 'publish'} );\n\t\t\t\t}\n\n\t\t\t\tif ( item.get( 'post_parent' ) > 0 && ThriveApp.globals.course_elements.get( 'modules' ).length > 0 ) {\n\t\t\t\t\tvar parent = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: item.get( 'post_parent' )} );\n\n\t\t\t\t\tif ( parent.get( 'type' ) === 'module' ) {\n\t\t\t\t\t\tmodule_id = item.get( 'post_parent' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodule_id = ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: parent.get( 'post_parent' )} ).get( 'ID' )\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titem_ids.push( item.get( 'ID' ) );\n\t\t\t}, this );\n\n\t\t\tif ( module_id ) {\n\t\t\t\tthis.main_item_model.set( {\n\t\t\t\t\tpost_parent: module_id,\n\t\t\t\t\torder: ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: module_id} ).get( 'chapters' ).length\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tthis.main_item_model.set( {item_ids: item_ids} );\n\t\t},\n\t\tmakeOptionalItemModel: function () {\n\t\t\tvar module_id,\n\t\t\t\titem_ids = [];\n\t\t\tthis.optional_item_model = new ThriveApp.models.Chapter( {\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\torder: ThriveApp.globals.active_course.get( 'modules' ).length + 1\n\t\t\t} );\n\n\t\t\tvar type = this.parent_model.hasChildren(),\n\t\t\t\telements = this.parent_model.get( type ).reject( function ( item ) {\n\t\t\t\t\treturn !! ThriveApp.globals.selected_items.findWhere( {ID: item.get( 'ID' )} );\n\t\t\t\t} );\n\n\n\t\t\t_.each( elements, function ( item ) {\n\t\t\t\tif ( item.get( 'post_status' ) === 'publish' ) {\n\t\t\t\t\tthis.optional_item_model.set( {post_status: 'publish'} );\n\t\t\t\t}\n\n\t\t\t\tif ( item.get( 'post_parent' ) > 0 && ThriveApp.globals.course_elements.get( 'modules' ).length > 0 ) {\n\t\t\t\t\tvar parent = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: item.get( 'post_parent' )} );\n\n\t\t\t\t\tif ( parent.get( 'type' ) === 'module' ) {\n\t\t\t\t\t\tmodule_id = item.get( 'post_parent' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodule_id = ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: parent.get( 'post_parent' )} ).get( 'ID' )\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titem_ids.push( item.get( 'ID' ) );\n\t\t\t}, this );\n\n\t\t\tif ( module_id ) {\n\t\t\t\tthis.optional_item_model.set( {\n\t\t\t\t\tpost_parent: module_id,\n\t\t\t\t\torder: ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: module_id} ).get( 'chapters' ).length\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tthis.optional_item_model.set( {item_ids: item_ids} );\n\t\t},\n\t\trenderEditor: function () {\n\t\t\tvar view = new ThriveApp.views.ChapterEditor( {\n\t\t\t\tel: this.$( '.tva-chapter-group-editor' ),\n\t\t\t\tmodel: this.main_item_model\n\t\t\t} );\n\n\t\t\tview.footerView = 'ModalGroupFooter';\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tmodals.ConfirmTopicDelete = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/confirm-topic-delete' ),\n\t\tevents: {\n\t\t\t'click .tva-confirm-delete': 'deleteTopic'\n\t\t},\n\t\tafterInitialize: function ( args ) {\n\t\t\tthis.$el.addClass( 'tvd-red' );\n\t\t\tvar _this = this;\n\t\t\t_.defer( function () {\n\t\t\t\t_this.$( '.tva-confirm-delete' ).focus();\n\t\t\t} );\n\t\t},\n\t\tdeleteTopic: function ( e ) {\n\t\t\tvar self = this;\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.destroy();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response.edited ) {\n\t\t\t\t\t\t_.each( response.edited, function ( id, index ) {\n\t\t\t\t\t\t\tvar edit_courses = ThriveApp.globals.courses.where( {ID: parseInt( id )} );\n\t\t\t\t\t\t\tif ( Object.keys( edit_courses ).length > 0 ) {\n\t\t\t\t\t\t\t\t_.each( edit_courses, function ( course, index ) {\n\t\t\t\t\t\t\t\t\tcourse.set( {topic: 0} );\n\t\t\t\t\t\t\t\t\tcourse.set( {topic_name: course.getTopicName()} );\n\t\t\t\t\t\t\t\t\tcourse.set( {topic_color: course.getTopicColor()} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tself.close();\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t} );\n\n\t/**\n\t * Label modal to confirm deletion\n\t */\n\tmodals.ConfirmLabelDelete = modals.ConfirmTopicDelete.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/confirm-label-delete' ),\n\t\tevents: {\n\t\t\t'click .tva-confirm-delete': 'deleteTopic'\n\t\t},\n\t\tafterInitialize: function ( args ) {\n\t\t\tthis.$el.addClass( 'tvd-red' );\n\t\t\tvar _this = this;\n\t\t\t_.defer( function () {\n\t\t\t\t_this.$( '.tva-confirm-delete' ).focus();\n\t\t\t} );\n\t\t},\n\t\tdeleteTopic: function ( e ) {\n\t\t\tvar self = this;\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.destroy();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response.edited ) {\n\t\t\t\t\t\t_.each( response.edited, function ( id, index ) {\n\t\t\t\t\t\t\tvar edit_courses = ThriveApp.globals.courses.where( {ID: parseInt( id )} );\n\t\t\t\t\t\t\tif ( Object.keys( edit_courses ).length > 0 ) {\n\t\t\t\t\t\t\t\t_.each( edit_courses, function ( course, index ) {\n\t\t\t\t\t\t\t\t\tcourse.set( {topic: 0} );\n\t\t\t\t\t\t\t\t\tcourse.set( {topic_name: course.getTopicName()} );\n\t\t\t\t\t\t\t\t\tcourse.set( {topic_color: course.getTopicColor()} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tself.close();\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t} );\n\n\t/**\n\t * Modal for notifying the user he can change between live and demo previews\n\t */\n\tmodals.ModalFirstTimeNotification = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/notification' ),\n\t\tafterInitialize: function ( args ) {\n\t\t\tthis.$el.addClass( 'tva-first-time-notification' );\n\t\t},\n\t\tafterClose: function () {\n\t\t\t$( 'body' ).css( {overflowY: 'hidden'} );\n\t\t\t$( 'body' ).css( {overflowX: 'hidden'} );\n\t\t}\n\t} );\n\n\tmodals.ConfirmEditorClose = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/close-editor' ),\n\t\tevents: {\n\t\t\t'click .tva-confirm-delete': 'closeEditor'\n\t\t},\n\t\tafterInitialize: function ( args ) {\n\t\t\tthis.$el.addClass( 'tvd-red' );\n\t\t\tvar _this = this;\n\t\t\t_.defer( function () {\n\t\t\t\t_this.$( '.tva-confirm-delete' ).focus();\n\t\t\t} );\n\t\t},\n\t\tcloseEditor: function () {\n\t\t\tif ( this.model.get( 'first_time' ) ) {\n\t\t\t\tThriveApp.router.navigate( \"#greeting\", {trigger: true} );\n\t\t\t} else {\n\t\t\t\tThriveApp.router.navigate( \"#dashboard\", {trigger: true} );\n\t\t\t}\n\t\t\tthis.close()\n\t\t}\n\t} );\n\n\t/**\n\t * Base View\n\t */\n\tmodals.Base = Backbone.View.extend( {\n\t\t/**\n\t\t * Always try to return this !!!\n\t\t *\n\t\t * @returns {ThriveChurn.views.Base}\n\t\t */\n\t\trender: function () {\n\t\t\treturn this;\n\t\t},\n\t\t/**\n\t\t *\n\t\t * Instantiate and open a new modal which has the view constructor assigned and send params further along\n\t\t *\n\t\t * @param ViewConstructor View constructor\n\t\t * @param params\n\t\t */\n\t\tmodal: function ( ViewConstructor, params ) {\n\t\t\treturn TVE_Dash.modal( ViewConstructor, params );\n\t\t},\n\t\tbind_zclip: function () {\n\t\t\tTVE_Dash.bindZClip( this.$el.find( 'a.tvd-copy-to-clipboard' ) );\n\t\t}\n\t} );\n\n\tmodals.RegisterPage = TVE_Dash.views.Modal.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/register-page' ),\n\n\t\trender: function () {\n\t\t\tvar self = this;\n\n\t\t\tself.$el.html( self.template( {model: self.model} ) );\n\t\t\tTVE_Dash.materialize( self.$el );\n\n\t\t\tnew ThriveApp.PostSearch( self.$( '#tva-apprentice-register-page' ), {\n\t\t\t\turl: ThriveApp.routes.settings + '/search_pages/',\n\t\t\t\ttype: 'POST',\n\n\t\t\t\tselect: function ( event, ui ) {\n\t\t\t\t\tself.model.get( 'register_page' ).ID = parseInt( ui.item.id );\n\t\t\t\t\tself.model.get( 'register_page' ).name = ui.item.label;\n\t\t\t\t},\n\t\t\t\tsearch: function () {\n\t\t\t\t\tself.model.set( {register_page: {}} );\n\t\t\t\t},\n\t\t\t\topen: function () {\n\t\t\t\t\tself.model.set( {register_page: {}} );\n\t\t\t\t},\n\n\t\t\t\tfetch_single: self.model.get( 'register_page' )\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render add content modal\n\t */\n\tmodals.AddContentModal = modals.ModalSteps.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/add-content' ),\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': 'next',\n\t\t\t'click .tva-modal-prev-step': 'prev'\n\t\t},\n\t\titem: null,\n\t\titem_type: null,\n\t\tfooterView: 'StepModalFooter',\n\t\tnext: function ( e ) {\n\t\t\tthis.beforeNext();\n\n\t\t\tvar step = 1;\n\t\t\tif ( this.currentStep === 0 ) {\n\t\t\t\tthis.item_type = e.currentTarget.getAttribute( 'id' );\n\t\t\t\tvar item_level = parseInt( e.currentTarget.getAttribute( 'data-level' ) ),\n\t\t\t\t\tdecision = ThriveApp.util.userHasToDecide( item_level );\n\n\t\t\t\tthis.makeItemModel();\n\n\t\t\t\tif ( decision ) {\n\t\t\t\t\tvar collection;\n\t\t\t\t\tif ( decision === 1 ) {\n\t\t\t\t\t\tcollection = ThriveApp.globals.active_course.get( ThriveApp.util.getPlural( this.item_type ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar children = ThriveApp.globals.active_course.hasChildren();\n\t\t\t\t\t\tcollection = ThriveApp.globals.active_course.get( children );\n\t\t\t\t\t}\n\n\n\t\t\t\t\tvar decision_maker = new ThriveApp.views.ItemDecisionMaker( {\n\t\t\t\t\t\tmodel: this.item,\n\t\t\t\t\t\tcollection: collection,\n\t\t\t\t\t\tmodal_view: this\n\t\t\t\t\t} );\n\n\t\t\t\t\tthis.$( '.tva-decision-container' ).html( decision_maker.render().$el );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! ThriveApp.views[ ThriveApp.util.upperFirst( this.item_type ) + 'Editor' ] ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Instantiate the correct view of inputs\n\t\t\t\t\t */\n\t\t\t\t\tvar view = new ThriveApp.views[ ThriveApp.util.upperFirst( this.item_type ) + 'Editor' ]( {\n\t\t\t\t\t\tmodel: this.item,\n\t\t\t\t\t\tcollection: this.model.get( this.item_type + 's' ),\n\t\t\t\t\t\tmodal_view: this\n\t\t\t\t\t} );\n\n\t\t\t\t\tthis.$( '.tva-editor-container' ).html( view.render().$el );\n\t\t\t\t\tstep ++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.gotoStep( this.currentStep + step );\n\t\t\tthis.afterNext();\n\t\t},\n\t\tprev: function () {\n\t\t\tthis.beforePrev();\n\t\t\tif ( this.currentStep === 0 ) {\n\t\t\t\tthis.item.set( {post_parent: 0} );\n\t\t\t}\n\n\t\t\tvar step = this.currentStep - 1;\n\n\t\t\tvar decision = ThriveApp.util.userHasToDecide( ThriveApp.util.levels[ this.item.get( 'type' ) ] );\n\n\t\t\tif ( ! decision ) {\n\t\t\t\tthis.gotoStep( 0 );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.gotoStep( step );\n\n\t\t\tif ( step === 0 ) {\n\t\t\t\tthis.item_type = null;\n\t\t\t\tthis.item = null;\n\t\t\t}\n\n\t\t\tthis.afterPrev();\n\t\t\treturn this;\n\t\t},\n\t\tmakeItemModel: function () {\n\t\t\tif ( this.item ) {\n\t\t\t\tthis.item = null;\n\t\t\t}\n\n\t\t\tthis.item = new ThriveApp.models[ ThriveApp.util.upperFirst( this.item_type ) ]( {\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\tcomment_status: this.model.get( 'comment_status' )\n\t\t\t} );\n\n\t\t\tif ( this.item_type === 'lesson' ) {\n\t\t\t\tthis.item.set( {\n\t\t\t\t\tlesson_type: ThriveApp.globals.active_course.get( 'lesson_template' ).lesson_type,\n\t\t\t\t\tpost_media: ThriveApp.globals.active_course.get( 'lesson_template' ).post_media,\n\t\t\t\t\tcomment_status: ThriveApp.globals.active_course.get( 'lesson_template' ).comment_status\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t} );\n\n\t/**\n\t * Test modal\n\t */\n\tmodals.ModalEditor = TVE_Dash.views.Modal.extend( {\n\t\tevents: {\n\t\t\t'click .tvd-modal-submit': 'save'\n\t\t},\n\t\teditor: null,\n\t\tfooterView: '',\n\t\tafterInitialize: function ( options ) {\n\t\t\tthis.footerView = options.footerView ? options.footerView : 'ModalFooter';\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.renderEditor();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderEditor: function () {\n\t\t\tif ( ! ThriveApp.views[ this.viewName ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor = new ThriveApp.views[ this.viewName ]( {\n\t\t\t\tel: this.getEl(),\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\tfooterView: this.footerView,\n\t\t\t\tmodal_view: this\n\t\t\t} );\n\n\t\t\tthis.editor.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tmodals.ModalDelete = modals.ModalEditor.extend( {\n\t\tevents: {\n\t\t\t'click .tva-delete-yes': 'deleteItem',\n\t\t\t'click .tva-delete-no': 'closeItem'\n\t\t},\n\t\tafterInitialize: function ( options ) {\n\t\t\tthis.footerView = options.footerView ? options.footerView : 'ModalFooterDelete';\n\t\t\t_.bindAll( this, 'keyAction' );\n\t\t\t$( document ).bind( 'keydown', this.keyAction );\n\t\t},\n\t\tkeyAction: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tvar code = e.which;\n\t\t\tif ( code == 13 ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.deleteItem();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Unbind when esc is pressed\n\t\t\t */\n\t\t\tif ( code === 27 ) {\n\t\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\t\tthis.close();\n\t\t\t}\n\t\t},\n\t\tdeleteItem: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.destroy(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.ItemDeleted );\n\t\t\t\t\tself.collection.updateValues( {order: ''} );\n\n\t\t\t\t\tif ( response.length > 0 ) {\n\t\t\t\t\t\t_.each( response, function ( id ) {\n\t\t\t\t\t\t\tvar element = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: id} );\n\t\t\t\t\t\t\tif ( element ) {\n\t\t\t\t\t\t\t\telement.set( {post_status: 'draft'} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_render_content' );\n\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tself.close();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tcloseItem: function () {\n\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\tthis.close();\n\t\t}\n\t} );\n\n\t/**\n\t * View to render Module editor modal\n\t */\n\tmodals.ModuleModalEditor = modals.ModalEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/modal-module-editor' ),\n\t\tgetEl: function () {\n\t\t\treturn this.$( '.tva-add-module' );\n\t\t}\n\t} );\n\n\tmodals.ModuleModalDelete = modals.ModalDelete.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/modal-module-delete' ),\n\t\tgetEl: function () {\n\t\t\treturn this.$( '.tva-delete-module' );\n\t\t}\n\t} );\n\n\tmodals.ChapterModalDelete = modals.ModalDelete.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/chapter/modal-chapter-delete' ),\n\t\tgetEl: function () {\n\t\t\treturn this.$( '.tva-delete-chapter' );\n\t\t}\n\t} );\n\n\n\t/**\n\t * View to render chapter modal editor\n\t */\n\tmodals.ChapterModalEditor = modals.AddContentModal.extend( {\n\t\tafterInitialize: function ( options ) {\n\t\t\tthis.module = options.module;\n\t\t\tthis.item_type = 'chapter';\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.steps = this.$el.find( this.stepClass ).hide();\n\t\t\tvar item_level = 1,\n\t\t\t\tdecision = ThriveApp.util.userHasToDecide( item_level, this.module );\n\n\t\t\tthis.makeItemModel();\n\n\t\t\tif ( decision ) {\n\t\t\t\tvar collection = this.module.get( 'chapters' );\n\n\t\t\t\tvar decision_maker = new ThriveApp.views.ItemDecisionMaker( {\n\t\t\t\t\tmodel: this.item,\n\t\t\t\t\tcollection: collection,\n\t\t\t\t\tdecision_model: this.module,\n\t\t\t\t\tmodal_view: this,\n\t\t\t\t\trestrict_back: true\n\t\t\t\t} );\n\n\t\t\t\tthis.$( '.tva-decision-container' ).html( decision_maker.render().$el );\n\n\t\t\t\tthis.gotoStep( 1 );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Instantiate the correct view of inputs\n\t\t\t\t */\n\t\t\t\tvar view = new ThriveApp.views.ChapterEditor( {\n\t\t\t\t\tmodel: this.item,\n\t\t\t\t\tcollection: this.module.get( 'chapters' ),\n\t\t\t\t\tmodal_view: this,\n\t\t\t\t\tfooterView: 'ModalFooter'\n\t\t\t\t} );\n\n\t\t\t\tthis.$( '.tva-editor-container' ).html( view.render().$el );\n\n\t\t\t\tthis.gotoStep( 2 );\n\t\t\t}\n\t\t},\n\t\tmakeItemModel: function () {\n\t\t\tif ( this.item ) {\n\t\t\t\tthis.item = null;\n\t\t\t}\n\n\t\t\tif ( this.module instanceof ThriveApp.models.Module ) {\n\n\t\t\t\tthis.item = new ThriveApp.models.Chapter( {\n\t\t\t\t\tpost_parent: this.module.get( 'ID' ),\n\t\t\t\t\tcourse_id: this.module.get( 'course_id' ),\n\t\t\t\t\tcomment_status: this.model.get( 'comment_status' )\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tthis.item = this.model;\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * View to render lesson modal editor\n\t */\n\tmodals.LessonModalEditor = modals.ModalEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/lesson/modal-lesson-editor' ),\n\t\tgetEl: function () {\n\t\t\treturn this.$( '.tva-lesson-editor' );\n\t\t}\n\t} );\n\n\t/**\n\t * View to render Add customer modal\n\t */\n\tmodals.AddCustomerModal = modals.ModalSteps.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/sendowl/add-customer' ),\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': 'next',\n\t\t\t'click .tva-modal-prev-step': 'prev',\n\t\t\t'click .tva-import-type': 'setImportType',\n\t\t\t'click .tva-process-csv-file': 'processFile',\n\t\t\t'click .tva-import-customers': 'importCustomers',\n\t\t\t'click .tva-add-file': function () {\n\t\t\t\tthis.$( '#tva-upload-file' ).click();\n\t\t\t},\n\t\t\t'change #tva-upload-file': function ( e ) {\n\t\t\t\tthis.files = e.currentTarget.files;\n\t\t\t\tthis.renderBulkImport();\n\t\t\t\tthis.registerEventListeners();\n\t\t\t},\n\t\t\t'change .tva-membership-change': 'setMembership',\n\t\t\t'change .tva-bundle-change': 'setBundle',\n\t\t\t'input #tva-customer-name': 'seName',\n\t\t\t'input #tva-list-import': 'setCustomersList',\n\t\t\t'input #tva-customer-email': 'setEmail',\n\t\t\t'input .tva-to-bulk-import-customers': 'renderBulkImport',\n\t\t\t'click .tvd-modal-submit': 'save'\n\t\t},\n\t\timported_users: 0,\n\t\tfiles: [],\n\t\tcustomers: '',\n\t\tmembership_ids: [],\n\t\tbundle_ids: [],\n\t\tcustomers_list: '',\n\t\terrors: {\n\t\t\tinvalid_lines: [],\n\t\t\tinvalid_emails: []\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.resetData();\n\t\t\tthis.steps = this.$el.find( this.stepClass ).hide();\n\n\t\t\tif ( this.import_type ) {\n\t\t\t\tthis.gotoStep( 2 );\n\t\t\t\tthis.renderBulkImport();\n\n\t\t\t\tif ( this.import_type === 'csvFile' ) {\n\t\t\t\t\tthis.registerEventListeners();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t} else {\n\t\t\t\tthis.gotoStep( 0 );\n\t\t\t\tthis.renderSingleCustomerImport();\n\t\t\t\tthis.$products_el = this.$( '.tva-sendowl-products' );\n\t\t\t\tthis.$bundles_el = this.$( '.tva-sendowl-bundles' );\n\t\t\t\tthis.renderOptions();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnext: function () {\n\t\t\tthis.beforeNext();\n\n\t\t\tif ( ! this.isValid() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.gotoStep( this.currentStep + 1 );\n\n\t\t\tif ( this.currentStep === 2 ) {\n\t\t\t\tthis.renderBulkImport();\n\n\t\t\t\tif ( this.import_type === 'csvFile' ) {\n\t\t\t\t\tthis.registerEventListeners();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.currentStep === 3 ) {\n\t\t\t\tif ( this.import_type === 'listNames' ) {\n\t\t\t\t\tthis.renderImportPreview();\n\t\t\t\t} else if ( this.files.length > 0 ) {\n\t\t\t\t\tthis.processFile();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.afterNext();\n\t\t},\n\t\tprev: function () {\n\t\t\tthis.beforePrev();\n\t\t\tthis.gotoStep( this.currentStep - 1 );\n\n\t\t\tthis.$( '.tva-invalid-file-type, .tva-invalid-file, .tva-invalid-list-message, .tva-invalid-customers' ).hide();\n\t\t\tthis.$( '.tva-import-customers' ).removeClass( 'tvd-disabled' );\n\n\t\t\tif ( this.currentStep === 0 ) {\n\t\t\t\tthis.files = [];\n\t\t\t\tthis.import_type = '';\n\t\t\t\tthis.model = new ThriveApp.models.SendowlCustomer( {} );\n\t\t\t\tthis.renderSingleCustomerImport();\n\t\t\t\tthis.$products_el = this.$( '.tva-sendowl-products' );\n\t\t\t\tthis.$bundles_el = this.$( '.tva-sendowl-bundles' );\n\t\t\t\tthis.$( '.tva-import-type' ).removeClass( 'tva-selected-import-option' );\n\t\t\t\tthis.$( '.tva-toggle-disable' ).addClass( 'tvd-disabled' );\n\t\t\t\tthis.renderOptions();\n\t\t\t}\n\n\t\t\tthis.customers = '';\n\t\t\tthis.afterPrev();\n\t\t},\n\t\t/**\n\t\t * Register the listeners for drop file area\n\t\t */\n\t\tregisterEventListeners: function () {\n\t\t\tvar dropArea = document.getElementById( 'tva-drop-layer' ),\n\t\t\t\tevents = [ 'dragover', 'dragleave', 'drop' ],\n\t\t\t\tself = this;\n\n\t\t\tdropArea.addEventListener( 'drop', function ( ev ) {\n\t\t\t\tself.$( '.tva-drop-file-elem' ).removeClass( 'tva-can-drop' );\n\t\t\t\tself.files = ev.dataTransfer.files;\n\t\t\t\tself.renderBulkImport();\n\t\t\t\tself.registerEventListeners();\n\t\t\t}, false );\n\n\t\t\tevents.forEach( function ( eventName ) {\n\t\t\t\tdropArea.addEventListener( eventName, preventDefaults, false );\n\t\t\t\tdocument.body.addEventListener( eventName, preventDefaults, false )\n\t\t\t} );\n\n\t\t\tdropArea.addEventListener( 'dragover', function ( ev ) {\n\t\t\t\tself.$( '.tva-drop-file-elem' ).addClass( 'tva-can-drop' );\n\t\t\t}, false );\n\t\t\tdropArea.addEventListener( 'dragleave', function ( ev ) {\n\t\t\t\tself.$( '.tva-drop-file-elem' ).removeClass( 'tva-can-drop' );\n\t\t\t}, false );\n\n\t\t\tfunction preventDefaults( e ) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation()\n\t\t\t}\n\t\t},\n\t\trenderOptions: function () {\n\t\t\tthis.settings.get( 'products' ).each( this.renderProduct, this );\n\t\t\tthis.settings.get( 'bundles' ).each( this.renderBundles, this );\n\t\t},\n\t\trenderProduct: function ( model ) {\n\t\t\tvar view = new ThriveApp.views.SendowlLevel( {\n\t\t\t\ttag: 'sendowl',\n\t\t\t\tmodel: model\n\t\t\t} );\n\n\t\t\tthis.$products_el.append( view.render().$el );\n\t\t},\n\t\trenderBundles: function ( model ) {\n\t\t\tvar view = new ThriveApp.views.SendowlBundle( {\n\t\t\t\ttag: 'sendowl',\n\t\t\t\tmodel: model\n\t\t\t} );\n\n\t\t\tthis.$bundles_el.append( view.render().$el );\n\t\t},\n\t\trenderBulkImport: function () {\n\t\t\tif ( ! ThriveApp.views[ 'ImportFrom' + ThriveApp.util.upperFirst( this.import_type ) ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.model = new ThriveApp.models.SendowlCustomer( {} );\n\t\t\tthis.$( '.tva-add-single-customer' ).empty();\n\n\t\t\tvar self = this,\n\t\t\t\tview = new ThriveApp.views[ 'ImportFrom' + ThriveApp.util.upperFirst( this.import_type ) ]( {\n\t\t\t\t\tel: this.$( '.tva-import-container' ),\n\t\t\t\t\tfiles: this.files\n\t\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\tthis.$( '#tva-drop-layer' ).mouseover( function () {\n\t\t\t\tself.$( '.tva-drop-file-elem' ).zIndex( 1 );\n\t\t\t} );\n\t\t\tthis.$( '.tva-drop-file-elem' ).mouseleave( function () {\n\t\t\t\tself.$( this ).zIndex( - 1 );\n\t\t\t} );\n\t\t},\n\t\trenderImportPreview: function () {\n\t\t\tthis.model = new ThriveApp.models.SendowlCustomer( {} );\n\t\t\tthis.$( '.tva-csv-customers-list' ).empty();\n\t\t\tthis.customers.each( this.renderOne, this );\n\n\t\t\tvar is_valid = this.customers.findWhere( {is_valid: 0} );\n\n\t\t\tif ( is_valid ) {\n\t\t\t\tthis.$( '.tva-invalid-customers' ).show();\n\t\t\t}\n\n\t\t\tthis.$products_el = this.$( '.tva-csv-sendowl-products' );\n\t\t\tthis.$bundles_el = this.$( '.tva-csv-sendowl-bundles' );\n\t\t\tthis.$products_el.empty();\n\t\t\tthis.$bundles_el.empty();\n\t\t\tthis.renderOptions();\n\t\t\tthis.$( '.tva-available-options' ).addClass( 'tva-bulk-options' )\n\t\t},\n\t\trenderOne: function ( model ) {\n\t\t\tvar view = new ThriveApp.views.SendowlCsvCustomer( {\n\t\t\t\tmodel: model,\n\t\t\t\tel: this.$( '.tva-csv-customers-list' )\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\trenderSingleCustomerImport: function () {\n\t\t\tvar view = new ThriveApp.views.SingleCustomerImport( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-add-single-customer ' )\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\tsetMembership: function ( e ) {\n\t\t\tvar ids = this.model.get( 'membership_ids' ),\n\t\t\t\tvalue = $( e.currentTarget ).val(),\n\t\t\t\t$bulk = this.$( '.tva-bulk-options' );\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\tids.push( parseInt( value ) );\n\t\t\t} else {\n\t\t\t\tvar key = ThriveApp.util.getKeyByValue( ids, value );\n\t\t\t\tif ( key ) {\n\t\t\t\t\tids.splice( key, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$bulk ? this.membership_ids = ids : this.model.set( {membership_ids: ids} );\n\t\t},\n\t\tsetBundle: function ( e ) {\n\t\t\tvar ids = this.model.get( 'bundle_ids' ),\n\t\t\t\tvalue = $( e.currentTarget ).val(),\n\t\t\t\t$bulk = this.$( '.tva-bulk-options' );\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\tids.push( parseInt( value ) );\n\t\t\t} else {\n\t\t\t\tvar key = ThriveApp.util.getKeyByValue( ids, value );\n\t\t\t\tif ( key ) {\n\t\t\t\t\tids.splice( key, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$bulk ? this.bundle_ids = ids : this.model.get( {bundle_ids: ids} );\n\t\t},\n\t\tseName: function ( e ) {\n\t\t\tthis.model.set( {display_name: e.target.value} );\n\t\t\tthis.model.set( {user_login: e.target.value} );\n\t\t},\n\t\tsetEmail: function ( e ) {\n\t\t\tthis.model.set( {user_email: e.target.value} );\n\t\t},\n\t\tsetImportType: function ( e ) {\n\t\t\tthis.import_type = e.currentTarget.getAttribute( 'data-option' );\n\n\t\t\tvar self = this;\n\n\t\t\tthis.$( '.tva-selected-import-option' ).each( function () {\n\t\t\t\tself.$( this ).removeClass( 'tva-selected-import-option' )\n\t\t\t} );\n\n\t\t\tthis.$( e.currentTarget ).addClass( 'tva-selected-import-option' );\n\t\t\tthis.$( '.tva-toggle-disable' ).removeClass( 'tvd-disabled' );\n\t\t},\n\t\tsetCustomersList: function ( e ) {\n\t\t\tthis.customers_list = e.currentTarget.value;\n\t\t},\n\t\tresetData: function () {\n\t\t\tthis.files = [];\n\t\t\tthis.membership_ids = [];\n\t\t\tthis.bundle_ids = [];\n\t\t\tthis.errors.invalid_lines = [];\n\t\t\tthis.errors.invalid_emails = [];\n\t\t},\n\t\timportCustomers: function () {\n\t\t\t$( '.tvd-hiddendiv' ).empty();\n\n\t\t\tif ( ( this.membership_ids.length === 0 &&\n\t\t\t       this.bundle_ids.length === 0 ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.MissingAccessRights );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar req_limit = ThriveApp.globals.soSettings.get( 'customers_per_request' );\n\n\t\t\tthis.current_request_index = 0;\n\t\t\tthis.total_requests_numer = Math.ceil( this.customers.length / req_limit );\n\n\t\t\tthis.json_customers = this.customers.pluckValues(\n\t\t\t\t[ 'user_email', 'user_login', 'display_name', 'is_valid' ]\n\t\t\t);\n\n\t\t\tthis.json_customers = _.filter( this.json_customers, function ( item ) {\n\t\t\t\tif ( item.is_valid ) {\n\t\t\t\t\treturn parseInt( item.is_valid ) === 1;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.doImportAjaxCall();\n\t\t},\n\t\tprocessFile: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar form_data = new FormData(),\n\t\t\t\tself = this;\n\n\t\t\t$.each( this.files, function ( key, value ) {\n\t\t\t\tform_data.append( 'tva_csv_file', value )\n\t\t\t} );\n\n\t\t\t$.ajax( {\n\t\t\t\turl: ThriveApp.routes.users + '/upload_file',\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: form_data,\n\t\t\t\tcache: false,\n\t\t\t\tdataType: 'json',\n\t\t\t\tprocessData: false,\n\t\t\t\tcontentType: false\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\n\t\t\t\t\tif ( response.invalid_file ) {\n\t\t\t\t\t\tself.$( '.tva-customers-import-options' ).hide();\n\t\t\t\t\t\tself.$( '.tva-invalid-file' ).show();\n\t\t\t\t\t\tself.$( '.tva-import-customers' ).addClass( 'tvd-disabled' );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tself.$( '.tva-customers-import-options' ).show();\n\t\t\t\t\tself.$( '.tva-csv-customers-list' ).empty();\n\t\t\t\t\tself.model = new ThriveApp.models.SendowlCustomer( {} );\n\t\t\t\t\tself.customers = new ThriveApp.collections.SendowlCustomers( response );\n\t\t\t\t\tself.customers.each( self.renderOne, self );\n\n\t\t\t\t\tvar is_valid = self.customers.findWhere( {is_valid: 0} );\n\n\t\t\t\t\tif ( is_valid ) {\n\t\t\t\t\t\tself.$( '.tva-invalid-customers' ).show();\n\t\t\t\t\t}\n\n\t\t\t\t\tself.$products_el = self.$( '.tva-csv-sendowl-products' );\n\t\t\t\t\tself.$bundles_el = self.$( '.tva-csv-sendowl-bundles' );\n\t\t\t\t\tself.$products_el.empty();\n\t\t\t\t\tself.$bundles_el.empty();\n\t\t\t\t\tself.renderOptions();\n\t\t\t\t\tself.$( '.tva-available-options' ).addClass( 'tva-bulk-options' );\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tparseCustomersList: function () {\n\t\t\tthis.customers_arr = this.customers_list.split( '\\n' );\n\t\t\tthis.customers = new ThriveApp.collections.SendowlCustomers();\n\n\t\t\t_.each( this.customers_arr, function ( line, key ) {\n\t\t\t\tvar valid = this.isValidLine( line, key ),\n\t\t\t\t\tchunks = line.split( ',' );\n\n\t\t\t\tthis.customers.add( new ThriveApp.models.SendowlCustomer( {\n\t\t\t\t\tdisplay_name: chunks[ 0 ] ? chunks[ 0 ] : '',\n\t\t\t\t\tuser_login: chunks[ 0 ] ? chunks[ 0 ] : '',\n\t\t\t\t\tuser_email: chunks[ 1 ] ? chunks[ 1 ].replace( ',', '' ) : '',\n\t\t\t\t\tis_valid: valid ? 1 : 0\n\t\t\t\t} ) );\n\t\t\t}, this );\n\t\t},\n\t\tisValid: function () {\n\t\t\tswitch ( this.currentStep ) {\n\t\t\t\tcase 1:\n\t\t\t\t\tif ( ! this.import_type ) {\n\t\t\t\t\t\tTVE_Dash.err( ThriveApp.t.ChooseImportType );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tif ( this.import_type === 'csvFile' && this.files.length === 0 ) {\n\t\t\t\t\t\tTVE_Dash.err( ThriveApp.t.ChooseCsv );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.import_type === 'csvFile' ) {\n\t\t\t\t\t\tvar ext = this.files[ 0 ].name.split( '.' ).pop();\n\n\t\t\t\t\t\tif ( ext !== 'csv' ) {\n\t\t\t\t\t\t\tthis.$( '.tva-invalid-file-type' ).show();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.import_type === 'listNames' ) {\n\t\t\t\t\t\tthis.errors.invalid_emails = [];\n\t\t\t\t\t\tthis.errors.invalid_lines = [];\n\n\t\t\t\t\t\tthis.$( '.tva-invalid-list-message' ).hide();\n\t\t\t\t\t\tthis.$( '.tva-invalid-lines' ).empty();\n\n\t\t\t\t\t\tthis.customers_list = ThriveApp.util.removeEmptyLine( this.customers_list );\n\n\t\t\t\t\t\tif ( ! this.customers_list.length ) {\n\t\t\t\t\t\t\tTVE_Dash.err( ThriveApp.t.MissingCustomers );\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.parseCustomersList();\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\t\tisValidLine: function ( line, key ) {\n\t\t\tvar chunks = line.split( ',' );\n\n\t\t\t// we only accept two fields here\n\t\t\tif ( chunks.length !== 2 ) {\n\t\t\t\tthis.errors.invalid_lines.push( {line: key, data: line} );\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tif ( chunks[ 1 ].substr( chunks[ 1 ].length - 1 ) === ',' ) {\n\t\t\t\tchunks[ 1 ] = chunks[ 1 ].replace( ',', '' )\n\t\t\t}\n\n\t\t\tif ( ! ThriveApp.util.isEmail( chunks[ 1 ].trim() ) ) {\n\t\t\t\tthis.errors.invalid_emails.push( {line: key, email: chunks[ 1 ]} );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\t\tdoImportAjaxCall: function () {\n\t\t\tif ( this.json_customers.length === 0 ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.noValidCustomers );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar self = this,\n\t\t\t\treq_limit = ThriveApp.globals.soSettings.get( 'customers_per_request' ),\n\t\t\t\tleft_limit = this.current_request_index * req_limit,\n\t\t\t\tright_limit = req_limit * ( this.current_request_index + 1 ),\n\t\t\t\tdata = {\n\t\t\t\t\tmembership_ids: this.membership_ids,\n\t\t\t\t\tbundle_ids: this.bundle_ids,\n\t\t\t\t\tcustomers: this.json_customers.slice( left_limit, right_limit ),\n\t\t\t\t\tis_last_request: this.current_request_index + 1 === this.total_requests_numer ? 1 : 0\n\t\t\t\t};\n\n\t\t\t$.ajax( {\n\t\t\t\turl: ThriveApp.routes.users + '/import_customers',\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: data\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.current_request_index ++;\n\t\t\t\t\tself.imported_users = self.imported_users + parseInt( response.imported_users.length );\n\n\t\t\t\t\tif ( self.current_request_index < self.total_requests_numer ) {\n\t\t\t\t\t\tself.doImportAjaxCall();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tThriveApp.globals.soSettings.set( {customers_count: response.count} );\n\t\t\t\t\t\tThriveApp.globals.sendowl_customers.trigger( 'tva_render_customers', {\n\t\t\t\t\t\t\tdata: response.customers,\n\t\t\t\t\t\t\tcount: response.count\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tTVE_Dash.success( ThriveApp.t.Success + self.imported_users + ThriveApp.t.NewUsersAdded );\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message, 5000 );\n\t\t\t} ).always( function ( response, textStatus, options ) {\n\t\t\t\tif ( response === null ) {\n\t\t\t\t\tTVE_Dash.err( ThriveApp.t.UnknownError, '10000' );\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( self.current_request_index >= self.total_requests_numer ) {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\tsave: function () {\n\t\t\tthis.tvd_clear_errors();\n\n\t\t\tif ( ! this.model.isValid() ) {\n\t\t\t\tthis.tvd_show_errors( this.model );\n\t\t\t\tthis.$( '[data-error]' ).addClass( 'tva-custom-err-label' );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ( this.model.get( 'membership_ids' ).length === 0 &&\n\t\t\t       this.model.get( 'bundle_ids' ).length === 0 ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.MissingAccessRights );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response && response.customers ) {\n\t\t\t\t\t\tThriveApp.globals.soSettings.set( {customers_count: response.count} );\n\t\t\t\t\t\tThriveApp.globals.sendowl_customers.trigger( 'tva_render_customers', {\n\t\t\t\t\t\t\tdata: response.customers,\n\t\t\t\t\t\t\tcount: response.count\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tvar names = '',\n\t\t\t\t\t\t\ttotal = self.model.get( 'membership_ids' ).length + self.model.get( 'bundle_ids' ).length,\n\t\t\t\t\t\t\tadded = 0;\n\n\t\t\t\t\t\t_.each( self.model.get( 'membership_ids' ), function ( id ) {\n\t\t\t\t\t\t\tvar model = ThriveApp.globals.soSettings.get( 'products' ).findWhere( {id: id} );\n\n\t\t\t\t\t\t\tif ( model ) {\n\t\t\t\t\t\t\t\tadded ++;\n\t\t\t\t\t\t\t\tnames += model.get( 'name' );\n\t\t\t\t\t\t\t\tnames += added < total ? ', ' : '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t_.each( self.model.get( 'bundle_ids' ), function ( id ) {\n\t\t\t\t\t\t\tvar model = ThriveApp.globals.soSettings.get( 'bundles' ).findWhere( {id: id} );\n\n\t\t\t\t\t\t\tif ( model ) {\n\t\t\t\t\t\t\t\tadded ++;\n\t\t\t\t\t\t\t\tnames += model.get( 'name' );\n\t\t\t\t\t\t\t\tnames += added < total ? ', ' : '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tvar msg = ThriveApp.t.Success + '  ' + self.model.get( 'display_name' ) + ' ' + ThriveApp.t.HasAccess + ' ' + names;\n\n\t\t\t\t\tTVE_Dash.success( msg, 3000 );\n\n\t\t\t\t\tself.close();\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message, 5000 );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * View to render Edit customer modal\n\t */\n\tmodals.EditCustomerModal = modals.ModalEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/sendowl/edit-customer' ),\n\t\tevents: {\n\t\t\t'change .tva-membership-change': 'setMembership',\n\t\t\t'change .tva-bundle-change': 'setBundle',\n\t\t\t'click .tvd-modal-submit': 'save'\n\t\t},\n\t\tafterRender: function () {\n\t\t\tthis.settings.get( 'products' ).each( this.renderProduct, this );\n\t\t\tthis.settings.get( 'bundles' ).each( this.renderBundles, this );\n\t\t},\n\t\trenderProduct: function ( model ) {\n\t\t\tvar view = new ThriveApp.views.SendowlLevel( {\n\t\t\t\tmodel: model,\n\t\t\t\tchecked: this.model.get( 'membership_ids' ),\n\t\t\t\ttag: 'sendowl'\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-sendowl-products' ).append( view.render().$el );\n\t\t},\n\t\trenderBundles: function ( model ) {\n\t\t\tvar view = new ThriveApp.views.SendowlBundle( {\n\t\t\t\tmodel: model,\n\t\t\t\tchecked: this.model.get( 'bundle_ids' ),\n\t\t\t\ttag: 'sendowl'\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-sendowl-bundles' ).append( view.render().$el );\n\t\t},\n\t\trenderBulkImport: function () {\n\t\t\tif ( ! ThriveApp.views[ 'ImportFrom' + ThriveApp.util.upperFirst( this.import_type ) ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar view = new ThriveApp.views[ 'ImportFrom' + ThriveApp.util.upperFirst( this.import_type ) ]( {\n\t\t\t\tel: this.$( '.tva-import-container' )\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\tsetMembership: function ( e ) {\n\t\t\tvar ids = this.model.get( 'membership_ids' ),\n\t\t\t\tvalue = $( e.currentTarget ).val();\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\tids.push( parseInt( value ) );\n\t\t\t} else {\n\t\t\t\tvar key = ThriveApp.util.getKeyByValue( ids, value );\n\t\t\t\tif ( key ) {\n\t\t\t\t\tids.splice( key, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.model.set( {membership_ids: ids} );\n\t\t},\n\t\tsetBundle: function ( e ) {\n\t\t\tvar ids = this.model.get( 'bundle_ids' ),\n\t\t\t\tvalue = $( e.currentTarget ).val();\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\tids.push( parseInt( value ) );\n\t\t\t} else {\n\t\t\t\tvar key = ThriveApp.util.getKeyByValue( ids, value );\n\t\t\t\tif ( key ) {\n\t\t\t\t\tids.splice( key, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.model.set( {bundle_ids: ids} );\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * Font Awesome modal\n\t */\n\tmodals.FontAwsemowModal = modals.ModalEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/icons/font-awesome' ),\n\t\tevents: {\n\t\t\t'click .tva-icon-item': 'selectIcon',\n\t\t\t'click .tvd-modal-submit': 'setIcon',\n\t\t\t'input .tva-search-icons': 'searchIcon'\n\t\t},\n\t\tselectedClass: 'tva-icon-selected',\n\t\tlistOffset: 0,\n\t\tloadCount: 200,\n\t\tcontainerScroll: 0,\n\t\tcustomIcons: {},\n\t\tafterRender: function () {\n\t\t\tthis.$( '.tva-font-awesome-icons, .tva-custom-icons-list' ).empty();\n\n\t\t\tif ( ThriveApp.globals.icons.fetched === false ) {\n\t\t\t\tThriveApp.globals.icons = this.getIcons();\n\t\t\t} else {\n\t\t\t\tthis.$( '#tva-icons-svg' ).html( ThriveApp.globals.icons.$svgIconsHtml );\n\t\t\t\tthis.renderCustomIcons();\n\t\t\t\tthis.renderSvgIcons( ThriveApp.globals.icons.svgIcons, this.listOffset );\n\t\t\t}\n\n\t\t\tvar $container = this.$( '.tva-icons-list' ),\n\t\t\t\tself = this;\n\n\t\t\t$container.scroll( function () {\n\t\t\t\tself.iconsContainerHeight = self.$( '.tva-font-awesome-icons' ).height();\n\n\t\t\t\tif ( $container.scrollTop() + 400 > self.iconsContainerHeight ) {\n\t\t\t\t\tself.listOffset += self.loadCount;\n\t\t\t\t\tself.iconsContainerHeight += $container.height();\n\t\t\t\t\tself.renderSvgIcons( ThriveApp.globals.icons.svgIcons, self.listOffset );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\t/**\n\t\t * Get svg icons from the server and insert them in html\n\t\t *\n\t\t * IF icons are already fetched, just return them\n\t\t *\n\t\t * @returns {*}\n\t\t */\n\t\tgetIcons: function () {\n\t\t\tvar self = this;\n\n\t\t\tif ( ThriveApp.globals.icons.fetched === true ) {\n\t\t\t\tthis.$( '#tva-icons-svg' ).html( ThriveApp.globals.icons.$svgIconsHtml );\n\t\t\t\tThriveApp.globals.svgIcons = this.$( '#tve-default-icons symbol' );\n\n\t\t\t\treturn ThriveApp.globals.icons;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\t$.ajax( {\n\t\t\t\turl: ThriveApp.routes.topics + '/get_fontawesome_icons',\n\t\t\t\ttype: 'GET'\n\t\t\t} ).done( function ( response ) {\n\t\t\t\tif ( ! response ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.$( '#tva-icons-svg' ).html( response.tcb_icons );\n\n\t\t\t\tThriveApp.globals.icons = {\n\t\t\t\t\tcustomIcons: response.custom_icons,\n\t\t\t\t\t$svgIconsHtml: self.$( '#tva-icons-svg' ),\n\t\t\t\t\tsvgIcons: self.$( '#tve-default-icons symbol' ),\n\t\t\t\t\tfetched: true\n\t\t\t\t};\n\n\t\t\t\tself.renderCustomIcons();\n\t\t\t\tself.renderSvgIcons( ThriveApp.globals.icons.svgIcons, self.listOffset );\n\n\t\t\t\tTVE_Dash.hideLoader();\n\n\t\t\t\treturn ThriveApp.globals.icons;\n\t\t\t} );\n\t\t},\n\t\tsearchIcon: function ( event ) {\n\t\t\tvar text = event.currentTarget.value.toLowerCase();\n\n\t\t\tthis.searchCustomIcons( text );\n\t\t\tthis.searchFontAwesomeIcons( text, text.replace( / /g, '-' ) );\n\t\t},\n\n\t\t/**\n\t\t * @param text from search input\n\t\t * @param text_dash value resulted after replacing spaces with - in text param\n\t\t */\n\t\tsearchFontAwesomeIcons: function ( text, text_dash ) {\n\t\t\tvar $icons = jQuery( '#tve-default-icons symbol' ).filter( function () {\n\t\t\t\treturn this.id.indexOf( text ) !== - 1 || this.id.indexOf( text_dash ) !== - 1;\n\t\t\t} );\n\n\t\t\tthis.resetIconsList();\n\t\t\tthis.renderSvgIcons( $icons, 0 );\n\t\t},\n\t\tresetIconsList: function () {\n\t\t\tthis.$( '.tva-font-awesome-icons' ).empty();\n\t\t\tthis.$( '.tva-font-awesome-icons' ).scrollTop( 0 );\n\t\t\tthis.listOffset = 0;\n\t\t\tthis.containerScroll = 0;\n\t\t},\n\n\t\t/**\n\t\t * @param $icons string representation of svg icons\n\t\t * @param offset\n\t\t */\n\t\trenderSvgIcons: function ( $icons, offset ) {\n\n\t\t\tif ( ! $icons || $icons.length === 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar self = this,\n\t\t\t\tid;\n\n\t\t\tif ( ! offset ) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\t$icons.slice( offset, offset + self.loadCount ).each( function ( index, $icon ) {\n\t\t\t\tid = $icon.getAttribute( 'id' );\n\n\t\t\t\tnew ThriveApp.views.SingleIcon( {\n\t\t\t\t\tel: self.$( '.tva-font-awesome-icons' ),\n\t\t\t\t\ticon_id: id,\n\t\t\t\t\textra_class: 'tva-icon-extra-class'\n\t\t\t\t} ).render();\n\t\t\t} );\n\t\t},\n\t\tselectIcon: function ( e ) {\n\t\t\tthis.$( '.tva-icon-item' ).removeClass( this.selectedClass );\n\t\t\tthis.$( e.currentTarget ).addClass( this.selectedClass )\n\t\t},\n\t\tsetIcon: function () {\n\t\t\tvar $icon = this.$( '.' + this.selectedClass ),\n\t\t\t\t$html = '';\n\n\t\t\tif ( $icon.hasClass( 'tva-custom-icon' ) ) {\n\t\t\t\t$html = '<div class=\"tva-icon-item tva-custom-icon\"><span class=\"' + $icon.data( 'cls' ) + '\"></span></div>';\n\t\t\t} else {\n\t\t\t\tvar $symbol = jQuery( 'symbol#' + $icon.data( 'cls' ) );\n\n\t\t\t\t$html = '<svg class=\"tva-icon\" ' + 'viewBox=\"' + $symbol[ 0 ].getAttribute( 'viewBox' ) + '\"' + 'data-id=\"' + $symbol.attr( \"id\" ) + '\" ' + 'data-name=\"' + $symbol.find( '> title' ).first().text() + '\">' + $symbol.html() + '</svg>';\n\t\t\t}\n\n\t\t\tthis.model.set( {\n\t\t\t\tsvg_icon: $html,\n\t\t\t\ttitle: this.topic_title,\n\t\t\t\ticon_type: 'svg_icon'\n\t\t\t} );\n\t\t\tthis.save();\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.model.trigger( 'tva_render_topic' );\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tafterClose: function () {\n\t\t\tthis.model.set( {title: this.topic_title} )\n\t\t},\n\t\trenderCustomIcons: function () {\n\n\t\t\tvar iconsObj = ThriveApp.globals.icons.customIcons;\n\n\t\t\tif ( ! iconsObj.icons || ( iconsObj.icons.length === 0 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$( '.tva-custom-icons-title' ).show();\n\n\t\t\t_.each( iconsObj.icons, function ( icon ) {\n\t\t\t\tnew ThriveApp.views.SingleCustomIcon( {\n\t\t\t\t\tel: this.$( '.tva-custom-icons-list' ),\n\t\t\t\t\ticon: icon\n\t\t\t\t} ).render();\n\t\t\t}, this );\n\t\t},\n\t\tsearchCustomIcons: function ( text ) {\n\t\t\tvar $customIcons = this.$( '.tva-custom-icon' ),\n\t\t\t\t$filteredIcons;\n\n\t\t\t$customIcons.hide();\n\t\t\t$filteredIcons = $customIcons.filter( function () {\n\t\t\t\treturn this.getAttribute( 'title' ).toLowerCase().indexOf( text ) !== - 1;\n\t\t\t} );\n\n\t\t\t$filteredIcons.show();\n\t\t\t$filteredIcons.length ? this.$( '.tva-custom-icons-title' ).show() : this.$( '.tva-custom-icons-title' ).hide();\n\t\t}\n\t} );\n\n\n\tmodule.exports = modals;\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/modals.js")
},models:{"author.js":function(exports,module,require){eval("var base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tdefaults: {\n\t\tID: ThriveApp.data.defaults.author.ID,\n\t\turl: ThriveApp.data.defaults.author.url,\n\t\tuser_login: ThriveApp.data.defaults.author.user_login,\n\t\tbiography_type: 'wordpress_bio',\n\t\tcustom_biography: ''\n\t},\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tif ( ! attrs.author.user_login ) {\n\t\t\treturn this.validation_error( 'author', ThriveApp.t.NoAuthor )\n\t\t}\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/author.js")},"base.js":function(exports,module,require){eval("( function ( $ ) {\n\n\t/**\n\t * Base Model\n\t */\n\tmodule.exports = Backbone.Model.extend( {\n\n\t\tidAttribute: 'ID',\n\t\t/**\n\t\t * deep-json implementation for backbone models - flattens any abject, collection etc from the model\n\t\t *\n\t\t * @returns {Object}\n\t\t */\n\t\ttoDeepJSON: function () {\n\t\t\tvar obj = $.extend( true, {}, this.attributes );\n\t\t\t_.each( _.keys( obj ), function ( key ) {\n\t\t\t\tif ( ! _.isUndefined( obj[ key ] ) && ! _.isNull( obj[ key ] ) && _.isFunction( obj[ key ].toJSON ) ) {\n\t\t\t\t\tobj[ key ] = obj[ key ].toJSON();\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn obj;\n\t\t},\n\t\t/**\n\t\t * deep clone a backbone model\n\t\t * this will duplicate all included collections, models etc located in the attributes field\n\t\t *\n\t\t * @returns {models.Base}\n\t\t */\n\t\tdeepClone: function () {\n\t\t\treturn new this.constructor( this.toDeepJSON() );\n\t\t},\n\t\t/**\n\t\t * ensures the same instance of a collection is used in a Backbone model\n\t\t *\n\t\t * @param {object} data\n\t\t * @param {object} collection_map map with object keys and collection constructors\n\t\t */\n\t\tensureCollectionData: function ( data, collection_map ) {\n\t\t\t_.each( collection_map, _.bind( function ( constructor, key ) {\n\t\t\t\tif ( ! data[ key ] ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tvar instanceOf = this.get( key ) instanceof constructor;\n\t\t\t\tif ( ! instanceOf ) {\n\t\t\t\t\tdata[ key ] = new constructor( data[ key ] );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tthis.get( key ).reset( data[ key ] );\n\t\t\t\tdata[ key ] = this.get( key );\n\t\t\t}, this ) );\n\t\t},\n\t\tvalidation_error: function ( field, message ) {\n\t\t\treturn {\n\t\t\t\tfield: field,\n\t\t\t\tmessage: message\n\t\t\t};\n\t\t},\n\t\t/**\n\t\t * Set nonce header before every Backbone sync.\n\t\t *\n\t\t * @param {string} method.\n\t\t * @param {Backbone.Model} model.\n\t\t * @param {{beforeSend}, *} options.\n\t\t * @returns {*}.\n\t\t */\n\t\tsync: function ( method, model, options ) {\n\t\t\tvar beforeSend;\n\n\t\t\toptions = options || {};\n\n\t\t\toptions.cache = false;\n\n\t\t\tif ( ! _.isUndefined( ThriveApp.nonce ) && ! _.isNull( ThriveApp.nonce ) ) {\n\t\t\t\tbeforeSend = options.beforeSend;\n\n\t\t\t\toptions.beforeSend = function ( xhr ) {\n\t\t\t\t\txhr.setRequestHeader( 'X-WP-Nonce', ThriveApp.nonce );\n\t\t\t\t\txhr.setRequestHeader( 'X-TVA-Request-ID', ThriveApp.request_id );\n\n\t\t\t\t\tif ( beforeSend ) {\n\t\t\t\t\t\treturn beforeSend.apply( this, arguments );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn Backbone.sync( method, model, options );\n\t\t},\n\t\tisValidProtocol: function ( url ) {\n\t\t\tif ( url ) {\n\t\t\t\treturn ( url.indexOf( document.location.protocol ) === - 1 ) ? false : true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\t/**\n\t\t * Set all fields required for a list\n\t\t */\n\t\tsetListRequiredFields: function () {\n\t\t\tthis.set( {\n\t\t\t\tID: this.getId(),\n\t\t\t\tname: this.getName()\n\t\t\t}, {silent: true} );\n\t\t},\n\t\tgetName: function () {\n\t\t\treturn this.get( 'name' )\n\t\t},\n\t\tgetId: function () {\n\t\t\treturn this.get( 'ID' );\n\t\t}\n\t} );\n} )( jQuery );\n//# sourceURL=workspace/admin/js/models/base.js")},breadcrumb:{"link.js":function(exports,module,require){eval("/**\n * Breadcrumb Link\n */\n\nvar base_model = require( './../base' );\n\nmodule.exports = base_model.extend( {\n\tdefaults: {\n\t\tID: '',\n\t\thash: '',\n\t\tlabel: '',\n\t\tfull_link: false\n\t},\n\t/**\n\t * we pass only hash and label, and build the ID based on the label\n\t *\n\t * @param {object} att\n\t */\n\tinitialize: function ( att ) {\n\t\tif ( ! this.get( 'ID' ) ) {\n\t\t\tif ( att.label ) {\n\t\t\t\tthis.set( 'ID', att.label.split( ' ' ).join( '' ).toLowerCase() );\n\t\t\t}\n\t\t}\n\t\tthis.set( 'full_link', att.hash.match( /^http/ ) );\n\t},\n\t/**\n\t *\n\t * @returns {String}\n\t */\n\tget_url: function () {\n\t\treturn this.get( 'full_link' ) ? this.get( 'hash' ) : ( '#' + this.get( 'hash' ) );\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/breadcrumb/link.js")}},"chapter.js":function(exports,module,require){eval("var base_model = require( './base' ),\n\tlessons_collections = require( './../collections/lessons' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: {\n\t\tpost_title: '',\n\t\tpost_excerpt: '',\n\t\tdata_field: 'chapter_name',\n\t\tstate: ThriveApp.t.normal_state,\n\t\tedit_text: ThriveApp.t.edit_chapter,\n\t\tpost_status: 'draft',\n\t\tcourse_id: '',\n\t\tpost_parent: 0,\n\t\ttype: 'chapter',\n\t\ttooltip_text: '',\n\t\titem_type: 'Chapter',\n\t\texpanded: false,\n\t\tchecked: false\n\n\t},\n\tinitialize: function () {\n\t\tthis.set_data();\n\t},\n\tset_data: function () {\n\t\tthis.set( 'lessons', new lessons_collections( this.get( 'lessons' ) ) );\n\t},\n\tcheckData: function () {\n\t\treturn true;\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.chapters;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tvar errors = [];\n\n\t\tif ( ! attrs.post_title ) {\n\t\t\terrors.push( this.validation_error( 'item_name', ThriveApp.t.InvalidName ) );\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\t},\n\thasChildren: function () {\n\t\tif ( this.get( 'lessons' ).length > 0 ) {\n\t\t\treturn 'lessons';\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/chapter.js")},"course.js":function(exports,module,require){eval("/**\n * Course Model\n */\n\nvar lessons_collection = require( './../collections/lessons' ),\n\tchapters_collection = require( './../collections/chapters' ),\n\tmodules_collection = require( './../collections/modules' ),\n\trules_collection = require( './../collections/rules' ),\n\tbase_model = require( './base' ),\n\tauthor_model = require( './author' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: function () {\n\t\treturn {\n\t\t\tname: '',\n\t\t\tslug: '',\n\t\t\tdescription: '',\n\t\t\ttopic: 0,\n\t\t\tlabel: 0,\n\t\t\tdisplay: 1,\n\t\t\tlevel: 0,\n\t\t\troles: {},\n\t\t\tcover_image: '',\n\t\t\tconversions: 0,\n\t\t\tlogged_in: 0,\n\t\t\turl: '',\n\t\t\tstatus: 'draft',\n\t\t\tstate: ThriveApp.t.normal_state,\n\t\t\tmessage: ThriveApp.t.NotLoggedIn,\n\t\t\texcluded: 0,\n\t\t\tvideo_status: false,\n\t\t\tlesson_type: '',\n\t\t\tcomment_status: ThriveApp.data.settings.comment_status,\n\t\t\tcomment_status_changed: false,\n\t\t\tselect_all: false,\n\t\t\tlessons_count: 0,\n\t\t\ttaxonomy: 'tva_courses',\n\t\t\tmembership_ids: {\n\t\t\t\tmembermouse: [],\n\t\t\t\tmemberpress: [],\n\t\t\t\twishlist: [],\n\t\t\t\tsendowl: []\n\t\t\t},\n\t\t\tbundle_ids: {\n\t\t\t\tmembermouse: [],\n\t\t\t\tmemberpress: [],\n\t\t\t\tsendowl: []\n\t\t\t},\n\t\t\tlesson_template: {\n\t\t\t\tlesson_type: 'text',\n\t\t\t\tpost_media: {\n\t\t\t\t\tmedia_extra_options: [],\n\t\t\t\t\tmedia_type: '',\n\t\t\t\t\tmedia_url: ''\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t},\n\tinitialize: function ( data ) {\n\n\t\tthis.set( 'rules', new rules_collection( data && data.rules ? data.rules : [] ) );\n\n\t\tthis.set_data();\n\t},\n\tset_data: function () {\n\t\tthis.set( {level_name: this.getLevelName()} );\n\t\tthis.set( {topic_name: this.getTopicName()} );\n\t\tthis.set( {topic_color: this.getTopicColor()} );\n\t\tthis.set( {label_name: this.getLabelName()} );\n\t\tthis.set( {label_color: this.getLabelColor()} );\n\t\tthis.set( {author: new author_model( this.get( 'author' ) )} );\n\t\tthis.set( 'lessons', new lessons_collection( this.get( 'lessons' ) ) );\n\t\tthis.set( 'chapters', new chapters_collection( this.get( 'chapters' ) ) );\n\t\tthis.set( 'modules', new modules_collection( this.get( 'modules' ) ) );\n\t\tthis.get( 'lesson_template' ).comment_status = this.get( 'comment_status' );\n\t\tthis.checkData();\n\t\tthis.checkStatus();\n\n\t\t/**\n\t\t * for the case when the course is updated with an ajax response\n\t\t */\n\t\tif ( false === this.get( 'rules' ) instanceof rules_collection ) {\n\t\t\tthis.set( 'rules', new rules_collection( typeof this.get( 'rules' ) === 'object' ? this.get( 'rules' ) : [] ) );\n\t\t}\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.courses;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\tgetLabelName: function () {\n\t\tvar label_id = this.get( 'label' ) ? this.get( 'label' ) : 0;\n\t\tvar label = ThriveApp.globals.labels.findWhere( {ID: parseInt( label_id )} );\n\n\t\treturn label ? label.get( 'title' ) : '';\n\t},\n\tgetLabelColor: function () {\n\t\tvar label_id = this.get( 'label' ) ? this.get( 'label' ) : 0;\n\t\tvar label = ThriveApp.globals.labels.findWhere( {ID: parseInt( label_id )} );\n\n\t\treturn label ? label.get( 'color' ) : '';\n\t},\n\tgetTopicName: function () {\n\t\t// use parseint just to be sure the ID will be an intiger and not a string\n\t\tvar topic = ThriveApp.globals.topics.findWhere( {ID: parseInt( this.get( 'topic' ) )} );\n\n\t\treturn topic ? topic.get( 'title' ) : '';\n\t},\n\tgetTopicColor: function () {\n\t\t// use parseint just to be sure the ID will be an intiger and not a string\n\t\tvar topic = ThriveApp.globals.topics.findWhere( {ID: parseInt( this.get( 'topic' ) )} );\n\n\t\treturn topic ? topic.get( 'color' ) : '';\n\t},\n\tgetLevelName: function () {\n\t\t// use parseint just to be sure the ID will be an intiger and not a string\n\t\tvar level = ThriveApp.globals.levels.findWhere( {ID: parseInt( this.get( 'level' ) )} );\n\n\t\treturn level && level.get( 'name' ) ? level.get( 'name' ) : '';\n\t},\n\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tvar errors = [];\n\n\t\tif ( ! attrs.name ) {\n\t\t\terrors.push( this.validation_error( 'course_name', ThriveApp.t.InvalidName ) );\n\t\t\treturn errors;\n\t\t}\n\n\t\tif ( ! attrs.description ) {\n\t\t\tTVE_Dash.err( ThriveApp.t.InvalidDescription );\n\t\t\treturn errors;\n\t\t}\n\n\t\tif ( attrs.logged_in && this.get( 'rules' ).length <= 0 ) {\n\t\t\tTVE_Dash.err( ThriveApp.t.rule.errors.no_rule_set );\n\t\t\treturn ThriveApp.t.rule.errors.no_rule_set;\n\t\t}\n\n\t\tif ( ! attrs.slug ) {\n\t\t\terrors.push( this.validation_error( 'course_slug', ThriveApp.t.InvalidSlug ) );\n\t\t}\n\n\t\tif ( attrs.excluded < 0 || ! Number.isInteger( parseFloat( attrs.excluded ) ) ) {\n\t\t\terrors.push( this.validation_error( 'course_excluded', ThriveApp.t.IntegerNumber ) );\n\t\t}\n\n\t\tif ( ! this.isValidProtocol( attrs.video_url ) && attrs.video_type == 'wistia' ) {\n\t\t\terrors.push( this.validation_error( 'video_url', ThriveApp.t.InvalidProtocol + document.location.protocol ) );\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\t},\n\tvalidateMemberships: function () {\n\t\tif ( this.get( 'logged_in' ) && ThriveApp.globals.settings.get( 'membership_plugin' ).length ) {\n\t\t\tvar valid = false;\n\t\t\tThriveApp.globals.settings.get( 'membership_plugin' ).each( function ( plugin ) {\n\t\t\t\tvar tag = plugin.get( 'tag' );\n\n\t\t\t\tif ( Object.keys( this.get( 'membership_ids' )[ tag ] ).length > 0 || ( this.get( 'bundle_ids' )[ tag ] && Object.keys( this.get( 'bundle_ids' )[ tag ] ).length > 0 ) ) {\n\t\t\t\t\tvalid = true;\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t/**\n\t\t\t * Is valid if there is at least one rule defined\n\t\t\t */\n\t\t\tif ( valid === false && this.get( 'rules' ).length > 0 ) {\n\t\t\t\tvalid = true;\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\treturn true;\n\t},\n\tvalidateRoles: function () {\n\n\t\tif ( ! this.get( 'logged_in' ) || ThriveApp.globals.settings.get( 'membership_plugin' ).length ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn Object.keys( this.get( 'roles' ) ).length > 0\n\t},\n\thasChildren: function () {\n\t\tif ( this.get( 'lessons' ).length > 0 ) {\n\t\t\treturn 'lessons';\n\t\t}\n\n\t\tif ( this.get( 'chapters' ).length > 0 ) {\n\t\t\treturn 'chapters';\n\t\t}\n\n\t\tif ( this.get( 'modules' ).length > 0 ) {\n\t\t\treturn 'modules';\n\t\t}\n\n\t\treturn false;\n\t},\n\tcheckData: function () {\n\t\tif ( this.get( 'modules' ).length > 0 ) {\n\t\t\tif ( this.get( 'chapters' ).length > 0 ) {\n\t\t\t\tthis.get( 'chapters' ).reset();\n\t\t\t}\n\n\t\t\tif ( this.get( 'lessons' ).length > 0 ) {\n\t\t\t\tthis.get( 'lessons' ).reset();\n\t\t\t}\n\t\t}\n\n\t\tif ( ( this.get( 'chapters' ).length > 0 ) && ( this.get( 'lessons' ).length > 0 ) ) {\n\t\t\tthis.get( 'lessons' ).reset();\n\t\t}\n\t},\n\tcheckStatus: function () {\n\t\tvar status = 'draft';\n\n\t\tif ( this.get( 'status' ) === 'publish' ) {\n\t\t\tvar children = this.hasChildren();\n\n\t\t\tif ( children ) {\n\t\t\t\tstatus = this.get( children ).findWhere( {post_status: 'publish'} ) ? 'publish' : 'draft';\n\t\t\t}\n\t\t}\n\n\t\tif ( status !== this.get( 'status' ) ) {\n\t\t\tthis.set( {status: status} );\n\t\t\tthis.save();\n\t\t}\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/course.js")},"font.js":function(exports,module,require){eval("/**\n * Web safe Fonts model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {} );\n//# sourceURL=workspace/admin/js/models/font.js")},"google-font.js":function(exports,module,require){eval("var base_model = require( './base' )\n\nmodule.exports = base_model.extend( {} );\n//# sourceURL=workspace/admin/js/models/google-font.js")},integration:{"base.js":function(exports,module,require){eval("/**\n * Model of an Integration Item\n * An abstract Class which can be extend specifically\n * SendOwl: - product\n *          - bundle\n *\n * Usually is has and ID and a Name\n */\nvar item_model = Backbone.Model.extend( {\n\t\t/**\n\t\t * Usually a Model has and ID but for this one the ID prop can be anything/string\n\t\t * @return {*}\n\t\t */\n\t\tgetId: function () {\n\t\t\treturn this.get( 'id' );\n\t\t},\n\n\t\t/**\n\t\t * Any integration item should have a name/label to be displayed\n\t\t * @return {*}\n\t\t */\n\t\tgetName: function () {\n\t\t\treturn this.get( 'name' );\n\t\t}\n\t} ),\n\n\titems_collection = Backbone.Collection.extend( {\n\t\tmodel: item_model\n\t} );\n\n/**\n * Each integration model should have and items/products collection\n * Usually a Plugin or an API Connection:\n * - SendOwl\n * - MemberMouse\n * - WishList\n * - etc\n */\nmodule.exports = {\n\titems_collection: items_collection,\n\tmodel: Backbone.Model.extend( {\n\n\t\tinitialize: function ( options ) {\n\n\t\t\tthis.set( 'items', new items_collection( options && options.items && Array.isArray( options.items ) ? options.items : [] ) );\n\t\t},\n\n\t\t/**\n\t\t * Predefined method\n\t\t * @return {items_collection}\n\t\t */\n\t\tgetItems: function () {\n\t\t\treturn this.get( 'items' );\n\t\t},\n\n\t\t/**\n\t\t * Based on its slug a no item message is returned\n\t\t * @return {string}\n\t\t */\n\t\tgetNoItemsMessage: function () {\n\n\t\t\tvar _message = 'No Items';\n\n\t\t\tif ( ThriveApp.t.integrations[ this.get( 'slug' ) ] ) {\n\t\t\t\t_message = ThriveApp.t.integrations[ this.get( 'slug' ) ].no_item_message;\n\t\t\t}\n\n\t\t\treturn _message;\n\t\t},\n\n\t\t/**\n\t\t * Based on the slug property returns a text which is used for a rule model to be human readable\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\tgetText: function () {\n\n\t\t\tvar _text = 'Give access if user has any of the following:';\n\t\t\tvar _integration = ThriveApp.t.integrations[ this.get( 'slug' ) ];\n\n\t\t\tif ( _integration ) {\n\t\t\t\t_text = _integration.rule_text;\n\t\t\t}\n\n\t\t\treturn _text;\n\t\t}\n\t} )\n};\n//# sourceURL=workspace/admin/js/models/integration/base.js")},"rule.js":function(exports,module,require){eval("var baseModel = require( './base' );\nvar integrations = require( './../../collections/access-integrations' );\n\nvar integrations_collection = new integrations( ThriveApp.access_integrations );\n\n/**\n * Access Rule Model based on which TA protects content\n */\nmodule.exports = baseModel.model.extend( {\n\n\t/**\n\t * A rule should have at least and integration name and a list of items\n\t * @return {*}\n\t */\n\tvalidate: function () {\n\n\t\tif ( ! this.get( 'integration' ) || typeof this.get( 'integration' ) !== 'string' ) {\n\t\t\treturn ThriveApp.t.rule.errors.no_integration_set;\n\t\t}\n\n\t\tif ( ! this.get( 'items' ) || this.get( 'items' ).length <= 0 ) {\n\t\t\treturn ThriveApp.t.rule.errors.no_item_selected;\n\t\t}\n\t},\n\n\tresetItems: function ( items ) {\n\n\t\tthis.set( 'items', items instanceof Backbone.Collection ? items : new Backbone.Collection );\n\t},\n\n\t/**\n\t * Wrapper over this.get('integration')\n\t *\n\t * @return {string}\n\t */\n\tgetIntegration: function () {\n\n\t\treturn this.get( 'integration' ) ? this.get( 'integration' ) : 'no-integration';\n\t},\n\n\t/**\n\t * Check if the rule has/contains the item based on ID\n\t *\n\t * @param item {{Backbone.Model}}\n\t * @return {boolean}\n\t */\n\tcontains: function ( item ) {\n\n\t\tif ( false === ( item instanceof Backbone.Model ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getItems().findWhere( {id: item.getId()} ) instanceof Backbone.Model;\n\t},\n\n\t/**\n\t * Returns a string built from name property of items collection\n\t *\n\t * @return {String}\n\t */\n\tgetItemsToString: function () {\n\n\t\tvar _names = this.get( 'items' ).pluck( 'name' );\n\n\t\t_names = _names.join( ', ' );\n\n\t\treturn _names;\n\t},\n\n\t/**\n\t * Check if this rule is a SendOwl one\n\t *\n\t * @return {boolean}\n\t */\n\tisSendOwl: function () {\n\n\t\treturn this.get( 'integration' ) === 'sendowl_product' || this.get( 'integration' ) === 'sendowl_bundle';\n\t},\n\n\ttoString: function () {\n\n\t\tif ( this.getIntegration() === 'no-integration' ) {\n\t\t\treturn 'Integration has to been set';\n\t\t}\n\n\t\tvar integration = integrations_collection.findWhere( {slug: this.getIntegration()} );\n\t\tvar _text = 'Unknown ' + this.integrationName( this.get( 'integration' ) ) + ' rule ';\n\n\t\tif ( integration instanceof Backbone.Model ) {\n\t\t\t_text = integration.getText();\n\t\t}\n\n\t\treturn _text;\n\t},\n\n\tintegrationName: function ( slug ) {\n\n\t\tvar _name = slug;\n\n\t\tif ( ! _name ) {\n\t\t\t_name = this.get( 'integration' );\n\t\t}\n\n\t\tswitch ( slug ) {\n\t\t\tcase 'sendowl_product':\n\t\t\t\t_name = 'SendOwl product';\n\t\t\t\tbreak;\n\t\t\tcase 'sendowl_bundle':\n\t\t\t\t_name = 'SendOwl bundle';\n\t\t\t\tbreak;\n\t\t\tcase 'wishlist':\n\t\t\t\t_name = 'WishList Membership';\n\t\t\t\tbreak;\n\t\t\tcase 'memberpress':\n\t\t\t\t_name = 'Memberpress Membership';\n\t\t\t\tbreak;\n\t\t\tcase 'membermouse':\n\t\t\t\t_name = 'MemberMouse Membership';\n\t\t\t\tbreak;\n\t\t\tcase 'membermouse_bundle':\n\t\t\t\t_name = 'Membermouse Bundle';\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn _name;\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/integration/rule.js")}},"label.js":function(exports,module,require){eval("/**\n * Label Model\n */\n\nvar topic_model = require( './topic' );\n\nmodule.exports = topic_model.extend( {\n\tdefaults: {\n\t\ttitle: 'New Label',\n\t\tcolor: '#58a545',\n\t\tlabel_color: '#58a545',\n\t\tchecked: 1\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.labels;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/label.js")},"lesson.js":function(exports,module,require){eval("/**\n * Level Model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: function () {\n\t\treturn {\n\t\t\tpost_title: '',\n\t\t\tpost_excerpt: '',\n\t\t\tpost_parent: 0,\n\t\t\tlesson_type: 'text',\n\t\t\tpost_media: {\n\t\t\t\tmedia_type: '',\n\t\t\t\tmedia_url: '',\n\t\t\t\tmedia_extra_options: {}\n\t\t\t},\n\t\t\tcover_image: '',\n\t\t\tstate: ThriveApp.t.normal_state,\n\t\t\tpost_status: 'draft',\n\t\t\tcourse_id: '',\n\t\t\ttypes: {\n\t\t\t\ttext: {\n\t\t\t\t\tlabel: 'Text Lesson',\n\t\t\t\t\ttype: 'text'\n\t\t\t\t},\n\t\t\t\taudio: {\n\t\t\t\t\tlabel: 'Audio Lesson',\n\t\t\t\t\ttype: 'audio'\n\t\t\t\t},\n\t\t\t\tvideo: {\n\t\t\t\t\tlabel: 'Video Lesson',\n\t\t\t\t\ttype: 'video'\n\t\t\t\t}\n\t\t\t},\n\t\t\ttype: 'lesson',\n\t\t\titem_type: 'Lesson',\n\t\t\tchecked: false,\n\t\t\tcomment_status: 'closed',\n\t\t\thas_tcb_content: false\n\t\t}\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.lessons;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tvar errors = [];\n\n\t\tif ( ! attrs.post_title ) {\n\t\t\terrors.push( this.validation_error( 'item_name', ThriveApp.t.InvalidName ) );\n\t\t}\n\n\t\tif ( attrs.lesson_type !== 'text' ) {\n\t\t\tvar media_select = new ThriveApp.models.MediaSelect( attrs.post_media );\n\t\t\tif ( ! media_select.isValid() ) {\n\t\t\t\t_.each( media_select.validationError, function ( error ) {\n\t\t\t\t\terrors.push( error );\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\t},\n\tchangeParentsStatus: function () {\n\t\tvar collection = this.collection,\n\t\t\tchanged_parents = [],\n\t\t\tcurrent = this.get( 'post_status' ),\n\t\t\tpost_status = current === 'draft' ? 'publish' : 'draft',\n\t\t\tsame_status = collection.where( {post_status: post_status} );\n\n\t\tif ( ( ( post_status === 'publish' && same_status.length === 0 ) || ( post_status === 'draft' && same_status.length === ( this.collection.length - 1 ) ) ) && this.get( 'post_parent' ) > 0 ) {\n\t\t\tvar parent_model = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: this.get( 'post_parent' )} );\n\t\t\tif ( parent_model ) {\n\t\t\t\tif ( parent_model instanceof ThriveApp.models.Chapter && parent_model.get( 'post_parent' ) > 0 ) {\n\t\t\t\t\tvar module_model = ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: parent_model.get( 'post_parent' )} );\n\t\t\t\t\tif ( module_model ) {\n\t\t\t\t\t\tvar chapters_same_status = module_model.get( 'chapters' ).where( {post_status: post_status} );\n\n\t\t\t\t\t\tif ( ( post_status === 'publish' && chapters_same_status.length === 0 ) || ( post_status === 'draft' && chapters_same_status.length === ( module_model.get( 'chapters' ).length - 1 ) ) ) {\n\t\t\t\t\t\t\tmodule_model.set( {post_status: post_status} );\n\t\t\t\t\t\t\tchanged_parents.push( module_model )\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparent_model.set( {post_status: post_status} );\n\t\t\t\tchanged_parents.push( parent_model )\n\t\t\t}\n\t\t}\n\n\t\treturn changed_parents;\n\t},\n\thasChildren: function () {\n\t\treturn false;\n\t},\n\tcheckData: function () {\n\t\treturn true;\n\t},\n\tset_data: function () {\n\t\treturn true;\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/lesson.js")},"level.js":function(exports,module,require){eval("/**\n * Level Model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: {\n\t\tname: ''\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.levels;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tvar errors = [];\n\t\tif ( ! attrs.name ) {\n\t\t\terrors.push( this.validation_error( 'add_level', ThriveApp.t.NoLevel ) );\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/level.js")},"log.js":function(exports,module,require){eval("var base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'id',\n\tdefaults: {\n\t\ttype: '',\n\t\tidentifier: '',\n\t\tproduct: 'None',\n\t\tdata: {},\n\t\tdate: ''\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/log.js")},"membermouse.js":function(exports,module,require){eval("/**\n * Membermouse membership and bundle model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tdefaults: {\n\t\tid: '',\n\t\tname: 'None'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/membermouse.js")},"models.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar base_collection = require( './../collections/base' );\n\tvar models = {\n\t\tBase: require( './base' ),\n\t\tLabel: require( './label' ),\n\t\tTopic: require( './topic' ),\n\t\tCourse: require( './course' ),\n\t\tLevel: require( './level' ),\n\t\tRole: require( './role' ),\n\t\tLesson: require( './lesson' ),\n\t\tTemplate: require( './template' ),\n\t\tFont: require( './font' ),\n\t\tGoogleFont: require( './google-font' ),\n\t\tMembermouse: require( './membermouse' ),\n\t\tSendowl: require( './sendowl' ),\n\t\tWishlist: require( './wishlist' ),\n\t\tChapter: require( './chapter' ),\n\t\tModule: require( './module' ),\n\t\tLog: require( './log' ),\n\t\tStack: require( './stack' ),\n\t\tType: require( './type' ),\n\t\tSendowlCustomer: require( './sendowl/customer' ),\n\t\tOrderItem: require( './order-item' ),\n\t\tBreadcrumbLink: require( './breadcrumb/link' )\n\t};\n\n\tmodels.MediaSelect = models.Base.extend( {\n\t\tdefaults: function () {\n\t\t\treturn {\n\t\t\t\tmedia_options: {\n\t\t\t\t\tyoutube: {\n\t\t\t\t\t\tname: 'Youtube',\n\t\t\t\t\t\textra: {},\n\t\t\t\t\t\tvalidate_domain: true\n\t\t\t\t\t},\n\t\t\t\t\tvimeo: {\n\t\t\t\t\t\tname: 'Vimeo',\n\t\t\t\t\t\tvalidate_domain: true\n\t\t\t\t\t},\n\t\t\t\t\twistia: {\n\t\t\t\t\t\tname: 'Wistia',\n\t\t\t\t\t\tvalidate_domain: true\n\t\t\t\t\t},\n\t\t\t\t\tcustom: {\n\t\t\t\t\t\tname: 'Custom',\n\t\t\t\t\t\tvalidate_domain: false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmedia_type: 'youtube',\n\t\t\t\tmedia_url: '',\n\t\t\t\tmedia_extra_options: {}\n\t\t\t}\n\t\t},\n\t\tinitialize: function () {\n\t\t\tif ( this.get( 'media_type' ) === 'soundcloud' ) {\n\t\t\t\tthis.set( {\n\t\t\t\t\tmedia_options: {\n\t\t\t\t\t\tsoundcloud: {\n\t\t\t\t\t\t\tname: 'SoundCloud',\n\t\t\t\t\t\t\tvalidate_domain: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcustom: {\n\t\t\t\t\t\t\tname: 'Custom',\n\t\t\t\t\t\t\tvalidate_domain: false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Check if youtube url is valid\n\t\t * @param url\n\t\t * @param errors array of error messages\n\t\t * @returns {boolean}\n\t\t */\n\t\tis_youtube_url: function ( url, errors ) {\n\n\t\t\tif ( typeof url === 'undefined' ) {\n\t\t\t\turl = '';\n\t\t\t}\n\n\t\t\tif ( ( url.indexOf( 'youtube' ) === - 1 ) && ( url.indexOf( 'youtu' ) === - 1 ) ) {\n\t\t\t\terrors.push( this.validation_error( 'media_url', ThriveApp.t.invalidDomainUrl ) );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Check if url is Video one\n\t\t * @param url\n\t\t * @param errors array of error messages\n\t\t * @returns {boolean}\n\t\t */\n\t\tis_vimeo_url: function ( url, errors ) {\n\n\t\t\tif ( typeof url === 'undefined' ) {\n\t\t\t\turl = '';\n\t\t\t}\n\n\t\t\tif ( url.indexOf( 'vimeo' ) === - 1 ) {\n\t\t\t\terrors.push( this.validation_error( 'media_url', ThriveApp.t.invalidDomainUrl ) );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Check if wistia url is valid\n\t\t * @param url\n\t\t * @param errors array of error messages\n\t\t * @returns {boolean}\n\t\t */\n\t\tis_wistia_url: function ( url, errors ) {\n\n\t\t\tif ( typeof url === 'undefined' ) {\n\t\t\t\turl = '';\n\t\t\t}\n\n\t\t\tif ( ! this.isValidProtocol( url ) ) {\n\t\t\t\tvar msg = ThriveApp.t.InvalidProtocol + document.location.protocol;\n\n\t\t\t\terrors.push( this.validation_error( 'media_url', msg ) );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( url.indexOf( 'wistia' ) === - 1 ) {\n\t\t\t\terrors.push( this.validation_error( 'media_url', ThriveApp.t.invalidDomainUrl ) );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Check if soundcloud url is valid\n\t\t *\n\t\t * @param url\n\t\t * @param errors array of error messages\n\t\t * @returns {boolean}\n\t\t */\n\t\tis_soundcloud_url: function ( url, errors ) {\n\t\t\tif ( typeof url === 'undefined' ) {\n\t\t\t\turl = '';\n\t\t\t}\n\n\t\t\tif ( url.indexOf( 'soundcloud' ) === - 1 ) {\n\t\t\t\terrors.push( this.validation_error( 'media_url', ThriveApp.t.invalidDomainUrl ) );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tvalidate: function ( attrs ) {\n\n\t\t\tvar errors = [];\n\n\t\t\tif ( attrs.media_url === '' ) {\n\t\t\t\tvar msg = attrs.media_type === 'custom' ? ThriveApp.t.NoEmbedCode : ThriveApp.t.NoURL;\n\n\t\t\t\treturn this.validation_error( 'media_url', msg );\n\t\t\t}\n\n\t\t\tvar callback = 'is_' + attrs.media_type + '_url';\n\n\t\t\tif ( typeof this[ callback ] === 'function' && this[ callback ]( attrs.media_url, errors ) === false ) {\n\t\t\t\treturn errors;\n\t\t\t}\n\t\t}\n\t} );\n\n\tmodels.MediaSelect.prototype.isValidModel = function ( attrs ) {\n\t\tvar errors = [];\n\n\t\tif ( attrs.media_url == '' ) {\n\t\t\terrors.push( this.validation_error( 'media_url', ThriveApp.t.NoURL ) );\n\t\t}\n\n\t\tvar regexp = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/,\n\t\t\tdomainRegex = new RegExp( attrs.media_type, 'g' );\n\n\t\tif ( ! regexp.test( attrs.media_url ) ) {\n\t\t\terrors.push( this.validation_error( 'media_url', ThriveApp.t.URLNotValid ) );\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\t};\n\n\t/**\n\t * Settings model\n\t */\n\tmodels.Settings = models.Base.extend( {\n\t\tdefaults: {\n\t\t\tper_page: '',\n\t\t\tpreview_option: true,\n\t\t\tapprentice_label: true,\n\t\t\tindex_page: {\n\t\t\t\tID: '',\n\t\t\t\tname: ''\n\t\t\t},\n\t\t\ttemplate: {\n\t\t\t\tfont_family: '',\n\t\t\t\tfont_source: 'safe',\n\t\t\t\tmain_color: '',\n\t\t\t\tcourse_title: '',\n\t\t\t\tcourse_title_color: '',\n\t\t\t\tpage_headline: '',\n\t\t\t\tpage_headline_color: '',\n\t\t\t\tlesson_headline: '',\n\t\t\t\tchapter_headline: '',\n\t\t\t\tmodule_headline: '',\n\t\t\t\tparagraph: '',\n\t\t\t\tparagraph_color: '',\n\t\t\t\tview_lesson: '',\n\t\t\t\tlogo_type: false\n\t\t\t}\n\t\t},\n\t\turl: function () {\n\t\t\tvar url = ThriveApp.routes.settings + '/save_settings/';\n\n\t\t\treturn url;\n\t\t},\n\t\tvalidate: function ( attrs, options ) {\n\t\t\tvar errors = [];\n\n\t\t\tif ( ! attrs.per_page ) {\n\t\t\t\terrors.push( this.validation_error( 'per_page', ThriveApp.t.InvalidPerPage ) );\n\t\t\t}\n\n\t\t\tif ( ! attrs.index_page.ID ) {\n\t\t\t\terrors.push( this.validation_error( 'index_page', ThriveApp.t.InvalidIndexPage ) );\n\t\t\t}\n\n\t\t\tif ( ( attrs.loginform === true ) && ( attrs.index_page.ID === attrs.register_page.ID ) ) {\n\t\t\t\terrors.push( this.validation_error( 'index_page', ThriveApp.t.InvalidPagesSetup ) );\n\t\t\t\terrors.push( this.validation_error( 'register_page', ThriveApp.t.InvalidPagesSetup ) );\n\t\t\t}\n\n\t\t\tif ( errors.length ) {\n\t\t\t\treturn errors;\n\t\t\t}\n\n\t\t},\n\t\tchangeTemplate: function ( template ) {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/get_user_settings/',\n\t\t\t\tdata: {\n\t\t\t\t\ttemplate: template.toJSON()\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.set( {old_template: response.template} );\n\t\t\t\t}\n\t\t\t\tself.set( {template: template.toJSON()} );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\timportLessons: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/import_lessons/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tif ( response.length > 0 ) {\n\t\t\t\t\t\tThriveApp.globals.courses.add( response );\n\t\t\t\t\t\tTVE_Dash.success( ThriveApp.t.SuccessImport )\n\t\t\t\t\t} else {\n\t\t\t\t\t\tTVE_Dash.success( ThriveApp.t.NoNewCoursesImported )\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Generates the checkout page url for a SendOwl product: simple or bundle\n\t\t *\n\t\t * @param product Backbone.Model\n\t\t * @param collection string default is 'products'\n\t\t * @returns string\n\t\t */\n\t\tget_checkout_page_url: function ( product, collection ) {\n\n\t\t\tvar id,\n\t\t\t\turl = this.get( 'checkout_endpoint' ) || this.get( 'checkout_page_url' );\n\n\t\t\tif ( typeof collection === 'undefined' ) {\n\t\t\t\tcollection = 'products';\n\t\t\t}\n\n\t\t\tif ( false === ( product instanceof Backbone.Model ) ) {\n\t\t\t\tproduct = this.get( 'sendowl_' + collection ).first();\n\t\t\t}\n\n\t\t\tif ( product instanceof Backbone.Model ) {\n\t\t\t\tid = product.get( 'id' );\n\t\t\t}\n\n\t\t\tif ( url.length && id ) {\n\n\t\t\t\tvar glue = url.indexOf( '?' ) !== - 1 ? '&' : '?';\n\n\t\t\t\turl += glue + 'pp=Sendowl&' + ( collection === 'bundles' ? 'bid' : 'pid' ) + '=' + id;\n\t\t\t}\n\n\t\t\treturn url;\n\t\t}\n\t} );\n\n\tmodels.AvailableSettings = models.Base.extend( {\n\t\tdefaults: {\n\t\t\t'tooltip': 'data-position=\"top\" data-tooltip=\"' + ThriveApp.t.OptionUnavailable + '\"'\n\t\t},\n\t\turl: function () {\n\t\t\treturn ThriveApp.routes.settings + '/get_available_settings/';\n\t\t}\n\t} );\n\n\tmodels.ModuleParent = models.Base.extend( {\n\t\tdefaults: {\n\t\t\tname: 'Select Module'\n\t\t}\n\t} );\n\n\tmodels.ChapterParent = models.Base.extend( {\n\t\tdefaults: {\n\t\t\tname: 'Select Chapter'\n\t\t}\n\t} );\n\n\tmodels.CourseElements = models.Base.extend( {\n\t\tdefaults: {\n\t\t\tmodules: {},\n\t\t\tchapters: {},\n\t\t\tlessons: {},\n\t\t\tall: {}\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.set_data()\n\t\t},\n\t\tset_data: function () {\n\t\t\tthis.set( {modules: new base_collection( this.get( 'modules' ) )} );\n\t\t\tthis.set( {chapters: new base_collection( this.get( 'chapters' ) )} );\n\t\t\tthis.set( {lessons: new base_collection( this.get( 'lessons' ) )} );\n\t\t\tthis.set( {all: new base_collection( this.get( 'all' ) )} );\n\t\t}\n\t} );\n\n\tmodels.BulkActions = models.Base.extend( {\n\t\tinitialize: function () {\n\n\t\t\tvar module = ThriveApp.globals.selected_items.findWhere( {post_type: 'tva_module'} ),\n\t\t\t\tchapter = ThriveApp.globals.selected_items.findWhere( {post_type: 'tva_chapter'} ),\n\t\t\t\tlesson = ThriveApp.globals.selected_items.findWhere( {post_type: 'tva_lesson'} ),\n\t\t\t\tall_selected_lessons = ThriveApp.globals.selected_items.where( {type: 'lesson'} ),\n\t\t\t\tchapter_lessons = [],\n\t\t\t\tfull_chapters = true,\n\t\t\t\tfull_modules = ThriveApp.globals.selected_items.where( {type: 'module'} ).length > 0;\n\n\t\t\t/**\n\t\t\t * Check if we have full chapters, this way we could group them into a module\n\t\t\t */\n\t\t\t_.each( ThriveApp.globals.selected_items.where( {type: 'chapter'} ), function ( chapter ) {\n\t\t\t\tvar items = ThriveApp.globals.course_elements.get( 'lessons' ).where( {post_parent: chapter.get( 'ID' )} );\n\n\t\t\t\t/**\n\t\t\t\t * chapter_lessons = [ ...chapter_lessons, ...items]; would have worked here well but the uglification doesn't recognize the syntax\n\t\t\t\t */\n\t\t\t\t_.each( items, function ( item ) {\n\t\t\t\t\tchapter_lessons.push( item );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tif ( all_selected_lessons.length !== chapter_lessons.length ) {\n\t\t\t\tfull_chapters = false;\n\t\t\t}\n\n\t\t\tvar self = this,\n\t\t\t\tactions = {\n\t\t\t\t\tpublish: ! ! ThriveApp.globals.selected_items.findWhere( {type: 'lesson'} ),\n\t\t\t\t\tunpublish: ThriveApp.globals.selected_items.length > 0,\n\t\t\t\t\tdelete: ThriveApp.globals.selected_items.length > 0,\n\t\t\t\t\tmoduleGroup: ( (\n\t\t\t\t\t\t\t( ! module ) &&                           // no modules\n\t\t\t\t\t\t\t( ( ! ! lesson && ! chapter ) ||          // lessons only\n\t\t\t\t\t\t\t  ( ! ! chapter && full_chapters ) )      // chapters only\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tchapterGroup: (\n\t\t\t\t\t\tThriveApp.globals.selected_items.length > 0 && ! module && ! chapter  // no modules and no chapters\n\t\t\t\t\t),\n\t\t\t\t\tmove: ( (\n\t\t\t\t\t\t\t( full_modules ) ||\n\t\t\t\t\t\t\t( ( ! ! lesson && ! chapter ) ||     // lessons only\n\t\t\t\t\t\t\t( ! ! chapter && full_chapters ) )   // chapters only\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t};\n\n\t\t\tthis.set( {actions: []} );\n\n\t\t\tObject.keys( actions ).forEach( function ( action ) {\n\t\t\t\tif ( actions[ action ] === true ) {\n\t\t\t\t\tvar name = action + 'Name',\n\t\t\t\t\t\tobj = {};\n\n\t\t\t\t\tobj[ name ] = typeof ThriveApp.t[ action ] !== \"undefined\" ? ThriveApp.t[ action ] : '';\n\n\t\t\t\t\tself.get( 'actions' ).push( action );\n\t\t\t\t\tself.set( obj );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n\n\n\tmodels.LogsSettings = models.Base.extend( {\n\t\tdefaults: {\n\t\t\tlimit: 20,\n\t\t\ttypes: [],\n\t\t\ts: ''\n\t\t}\n\t} );\n\n\tmodule.exports = {\n\t\tmodels: models\n\t}\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/models/models.js")},"module.js":function(exports,module,require){eval("var base_model = require( './base' ),\n\tchapters_collection = require( './../collections/chapters' ),\n\tlessons_collection = require( './../collections/lessons' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: {\n\t\tpost_title: '',\n\t\tpost_excerpt: '',\n\t\tdata_field: 'module_name',\n\t\tstate: ThriveApp.t.normal_state,\n\t\tedit_text: ThriveApp.t.edit_module,\n\t\tpost_status: 'draft',\n\t\tcourse_id: '',\n\t\ttype: 'module',\n\t\tcover_image: '',\n\t\ttooltip_text: '',\n\t\titem_type: 'Module',\n\t\tpost_parent: 0,\n\t\texpanded: false,\n\t\tchecked: false\n\t},\n\tinitialize: function () {\n\t\tthis.set_data();\n\t},\n\tset_data: function () {\n\t\tthis.set( 'chapters', new chapters_collection( this.get( 'chapters' ) ) );\n\t\tthis.set( 'lessons', new lessons_collection( this.get( 'lessons' ) ) );\n\t\tthis.checkData();\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.modules;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tvar errors = [];\n\n\t\tif ( ! attrs.post_title ) {\n\t\t\terrors.push( this.validation_error( 'item_name', ThriveApp.t.InvalidName ) );\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\t},\n\ttoDeepJson: function () {\n\t\treturn ThriveApp.collections.SelectedItems.prototype.toDeepJson.call( this );\n\t},\n\thasChildren: function () {\n\t\tif ( this.get( 'lessons' ).length > 0 ) {\n\t\t\treturn 'lessons';\n\t\t}\n\n\t\tif ( this.get( 'chapters' ).length > 0 ) {\n\t\t\treturn 'chapters';\n\t\t}\n\n\t\treturn false;\n\t},\n\tcheckData: function () {\n\t\tif ( ( this.get( 'chapters' ).length > 0 ) && ( this.get( 'lessons' ).length > 0 ) ) {\n\t\t\tthis.get( 'lessons' ).reset();\n\t\t}\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/module.js")},"order-item.js":function(exports,module,require){eval("var base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tinitialize: function () {\n\t\tthis.set( {\n\t\t\tproduct_id: parseInt( this.get( 'product_id' ) )\n\t\t} )\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/order-item.js")},"role.js":function(exports,module,require){eval("var base_model = require( './base' );\nmodule.exports = base_model;\n//# sourceURL=workspace/admin/js/models/role.js")},sendowl:{"base.js":function(exports,module,require){eval("var baseModel = require( './../base' );\n\nmodule.exports = baseModel.extend( {\n\tdefaults: function () {\n\t\treturn {\n\t\t\tqueryParams: new baseModel( {\n\t\t\t\tpp: 'Sendowl'\n\t\t\t} ),\n\t\t\tdiscountCode: '',\n\t\t\tidentifier: ''\n\t\t}\n\t},\n\tgetPurchaseLink: function () {\n\t\tvar url = this.getBaseUrl();\n\n\t\tif ( ! url.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar params = _.clone( this.get( 'queryParams' ).attributes );\n\n\t\tObject.keys( params ).forEach( function ( param ) {\n\t\t\turl += '&' + param + '=' + params[ param ];\n\t\t} );\n\n\t\treturn url;\n\t},\n\tgetPurchaseShortcode: function () {\n\n\t\tvar discount = '',\n\t\t\targs = this.get( 'identifier' ) + '=' + this.get( 'id' );\n\n\t\tif ( this.get( 'queryParams' ).get( 'thrv_so_discount' ) ) {\n\t\t\tdiscount = ' thrv_so_discount=' + this.get( 'queryParams' ).get( 'thrv_so_discount' );\n\t\t}\n\n\t\targs = args + discount;\n\n\t\treturn '[tva_sendowl_buy ' + args + ' pp=' + \"'Sendowl'\" + ' title=' + \"'Buy Now'\" + ']'\n\t},\n\tgetPurchaseHtml: function () {\n\t\treturn '<a href=\"' + this.getPurchaseLink() + '\">Buy now</a>';\n\t},\n\tgetBaseUrl: function () {\n\t\tvar url = ThriveApp.globals.settings.get( 'checkout_endpoint' ) || ThriveApp.globals.settings.get( 'checkout_page_url' );\n\n\t\tif ( url.length ) {\n\t\t\turl += url.indexOf( '?' ) !== - 1 ? '&' : '?';\n\t\t}\n\n\t\treturn url;\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/base.js")},"bundle.js":function(exports,module,require){eval("var baseModel = require( './base' );\n\nmodule.exports = baseModel.extend( {\n\tinitialize: function () {\n\t\tthis.set( {\n\t\t\tID: this.get( 'id' ),\n\t\t\tidentifier: 'bundle'\n\t\t} );\n\t\tthis.get( 'queryParams' ).set( {bid: this.get( 'id' )} )\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/bundle.js")},"customer.js":function(exports,module,require){eval("var base_model = require( './../base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: function () {\n\t\treturn {\n\t\t\tdisplay_name: '',\n\t\t\tuser_email: '',\n\t\t\tuser_login: '',\n\t\t\tedit_url: '',\n\t\t\tmembership_ids: [],\n\t\t\tbundle_ids: []\n\t\t}\n\t},\n\tinitialize: function () {\n\n\t\tif ( this.get( 'ID' ) ) {\n\t\t\tthis.set( {ID: parseInt( this.get( 'ID' ) )} );\n\t\t}\n\n\t\tif ( this.get( 'buyer_name' ) ) {\n\t\t\tthis.set( {\n\t\t\t\tdisplay_name: this.get( 'buyer_name' ),\n\t\t\t\tuser_login: this.get( 'buyer_email' )\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.get( 'buyer_email' ) ) {\n\t\t\tthis.set( {user_email: this.get( 'buyer_email' )} );\n\t\t}\n\n\t\tif ( parseInt( this.get( 'is_valid' ) !== 1 ) ) {\n\t\t\tthis.set( {is_valid: 0} );\n\t\t}\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.users;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\t/**\n\t * Overwrite Backbone validation\n\t * Return something to invalidate the model\n\t *\n\t * @param {Object} attrs\n\t * @param {Object} options\n\t */\n\tvalidate: function ( attrs, options ) {\n\t\tvar errors = [];\n\n\t\tif ( ! attrs.user_login ) {\n\t\t\terrors.push( this.validation_error( 'user_login', ThriveApp.t.MissingUserLogin ) );\n\t\t}\n\n\t\tif ( ! attrs.user_email ) {\n\t\t\terrors.push( this.validation_error( 'user_email', ThriveApp.t.MissingEmail ) );\n\t\t}\n\n\t\tif ( errors.length ) {\n\t\t\treturn errors;\n\t\t}\n\n\t\tif ( ! ThriveApp.util.isEmail( attrs.user_email ) ) {\n\t\t\treturn this.validation_error( 'user_email', ThriveApp.t.InvalidCustomerEmail );\n\t\t}\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/customer.js")},"discount.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseModel = require( './base' );\n\n\tmodule.exports = baseModel.extend( {\n\t\tinitialize: function () {\n\t\t\tthis.set( this.get( 'discount_code' ) );\n\t\t\tthis.set( {ID: this.get( 'id' )} );\n\t\t\tthis.unset( 'discount_code' );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/models/sendowl/discount.js")},"keys.js":function(exports,module,require){eval("var baseModel = require( './../base' );\n\nmodule.exports = baseModel.extend( {\n\tdefaults: function () {\n\t\treturn {\n\t\t\tkey: '',\n\t\t\tsecret: ''\n\t\t}\n\t},\n\turl: function () {\n\t\treturn ThriveApp.routes.sendowl + '/save_account_keys/'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/keys.js")},pages:{"base.js":function(exports,module,require){eval("var baseModel = require( './../../base' );\n\nmodule.exports = baseModel.extend( {\n\tinitialize: function ( options ) {\n\t\tif ( this.get( 'ID' ) ) {\n\t\t\tthis.set( {state: 'normal'} );\n\t\t}\n\t},\n\tvalidate: function ( options ) {\n\t\tvar errors = [];\n\n\t\tif ( ! options.name ) {\n\t\t\terrors.push( this.validation_error( 'name', ThriveApp.t.pageTitleMissing ) );\n\t\t\treturn errors;\n\t\t}\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/pages/base.js")},"checkout.js":function(exports,module,require){eval("var baseModel = require( './base' );\n\nmodule.exports = baseModel.extend( {\n\tidAttribute: 'ID',\n\tdefaults: function () {\n\t\treturn {\n\t\t\tname: '',\n\t\t\told_ID: '',\n\t\t\tstate: 'empty',\n\t\t\tedit_text: 'Edit with Thrive Architect'\n\t\t}\n\t},\n\turl: function () {\n\t\treturn ThriveApp.routes.sendowl + '/save_checkout_page/'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/pages/checkout.js")},"thankyou-multiple.js":function(exports,module,require){eval("var baseModel = require( './thankyou' );\n\nmodule.exports = baseModel.extend( {\n\turl: function () {\n\t\treturn ThriveApp.routes.sendowl + '/save_thankyou_multiple_page/'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/pages/thankyou-multiple.js")},"thankyou.js":function(exports,module,require){eval("var baseModel = require( './base' );\n\nmodule.exports = baseModel.extend( {\n\tidAttribute: 'ID',\n\tdefaults: function () {\n\t\treturn {\n\t\t\tname: '',\n\t\t\told_ID: '',\n\t\t\tstate: 'empty',\n\t\t\tedit_url: '',\n\t\t\tedit_text: 'Edit',\n\t\t\tpreview_url: ''\n\t\t}\n\t},\n\turl: function () {\n\t\treturn ThriveApp.routes.sendowl + '/save_thankyou_page/'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/pages/thankyou.js")}},"product.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseModel = require( './base' );\n\n\tmodule.exports = baseModel.extend( {\n\t\tinitialize: function () {\n\t\t\tthis.set( {\n\t\t\t\tID: this.get( 'id' ),\n\t\t\t\tidentifier: 'product'\n\t\t\t} );\n\t\t\tthis.get( 'queryParams' ).set( {pid: this.get( 'id' )} )\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/models/sendowl/product.js")},"settings.js":function(exports,module,require){eval("var baseModel = require( './base' ),\n\tthPageModel = require( './pages/thankyou' ),\n\tthPageTypeModel = require( './thankyou-type' ),\n\tthMultiplePageModel = require( './pages/thankyou-multiple' ),\n\tchPageModel = require( './pages/checkout' ),\n\tbaseCollection = require( './../../collections/base' ),\n\taccountKeys = require( './keys' ),\n\twelcomeMsgModel = require( './welcome-msg' );\n\n/**\n * Sendowl settings model\n */\nmodule.exports = baseModel.extend( {\n\tdefaults: function () {\n\t\treturn {\n\t\t\tcustomers_per_page: 10,\n\t\t\tcustomers_per_request: 100\n\t\t}\n\t},\n\tinitialize: function ( options ) {\n\t\tif ( false === options.is_connected ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.set( {\n\t\t\taccount_keys: new accountKeys( this.get( 'account_keys' ) ),\n\t\t\twelcome_message: new welcomeMsgModel( this.get( 'welcome_message' ) ),\n\t\t\tthankyou_page: new thPageModel( this.get( 'thankyou_page' ) ),\n\t\t\tthankyou_page_type: new thPageTypeModel( {type: this.get( 'thankyou_page_type' )} ),\n\t\t\tthankyou_multiple_page: new thMultiplePageModel( this.get( 'thankyou_multiple_page' ) ),\n\t\t\tcheckout_page: new chPageModel( options.checkout_page ),\n\t\t\tproducts: new baseCollection( this.get( 'products' ) ),\n\t\t\tbundles: new baseCollection( this.get( 'bundles' ) )\n\t\t} );\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/settings.js")},"thankyou-type.js":function(exports,module,require){eval("var baseModel = require( './../base' );\n\nmodule.exports = baseModel.extend( {\n\tdefaults: function() {\n\t\treturn {\n\t\t\ttype: 'static'\n\t\t}\n\t},\n\turl: function () {\n\t\treturn ThriveApp.routes.sendowl + '/save_thankyou_page_type/'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/thankyou-type.js")},"welcome-msg.js":function(exports,module,require){eval("var base = require( './../base' );\n\nmodule.exports = base.extend( {\n\tdefaults: function () {\n\t\treturn {\n\t\t\tmessage: ''\n\t\t}\n\t},\n\turl: function () {\n\t\treturn ThriveApp.routes.sendowl + '/save_welcome_message/'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl/welcome-msg.js")}},"sendowl.js":function(exports,module,require){eval("/**\n * Sendowl membership and bundle model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tdefaults: {\n\t\tid: '',\n\t\tname: 'None'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/sendowl.js")},"stack.js":function(exports,module,require){eval("var base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'id',\n\tdefaults: {\n\t\ttype: '',\n\t\tproduct: 'None',\n\t\tdata: {},\n\t\tdate: ''\n\t},\n\tinitialize: function () {\n\t\tthis.set( {data: new collections.Logs( this.get( 'data' ) )} );\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/stack.js")},"template.js":function(exports,module,require){eval("/**\n * Model for one template\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: {\n\t\tname: ''\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/template.js")},"topic.js":function(exports,module,require){eval("/**\n * Topic Model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tidAttribute: 'ID',\n\tdefaults: {\n\t\ttitle: 'New Topic',\n\t\ticon: '',\n\t\tcolor: '#00c1ef',\n\t\tchecked: 1,\n\t\tdefault_icon: ThriveApp.data.defaults.icon,\n\t\toverview_icon_color: '#ffffff',\n\t\tlayout_icon_color: '#000000',\n\t\ticon_type: 'icon', // A better name would be img_icon but to avoid backwards compatibility issues we will keep it as it is\n\t\tsvg_icon: ''\n\t},\n\tinitialize: function () {\n\n\t\tvar switchOptions = ThriveApp.globals.settings.get( 'switch_topic_options' );\n\n\t\tif ( switchOptions && ( typeof this.get( 'ID' ) === \"undefined\" || ( ( this.get( 'ID' ) === 0 && ! this.get( 'svg_icon' ) ) ) ) ) {\n\t\t\tthis.set( {\n\t\t\t\ticon_type: 'svg_icon',\n\t\t\t\tsvg_icon: '<svg class=\"tva-icon\" viewBox=\"0 0 576 512\" ' +\n\t\t\t\t          'data-id=\"icon-file-signature-light\" data-name=\"\">\\n' +\n\t\t\t\t          '<path d=\"M560.83 135.96l-24.79-24.79c-20.23-20.24-53-20.26-73.26 0L384 189.72v-57.75c0-12.7-5.1-25-14.1-33.99L286.02 14.1c-9-9-21.2-14.1-33.89-14.1H47.99C21.5.1 0 21.6 0 48.09v415.92C0 490.5 21.5 512 47.99 512h288.02c26.49 0 47.99-21.5 47.99-47.99v-80.54c6.29-4.68 12.62-9.35 18.18-14.95l158.64-159.3c9.79-9.78 15.17-22.79 15.17-36.63s-5.38-26.84-15.16-36.63zM256.03 32.59c2.8.7 5.3 2.1 7.4 4.2l83.88 83.88c2.1 2.1 3.5 4.6 4.2 7.4h-95.48V32.59zm95.98 431.42c0 8.8-7.2 16-16 16H47.99c-8.8 0-16-7.2-16-16V48.09c0-8.8 7.2-16.09 16-16.09h176.04v104.07c0 13.3 10.7 23.93 24 23.93h103.98v61.53l-48.51 48.24c-30.14 29.96-47.42 71.51-47.47 114-3.93-.29-7.47-2.42-9.36-6.27-11.97-23.86-46.25-30.34-66-14.17l-13.88-41.62c-3.28-9.81-12.44-16.41-22.78-16.41s-19.5 6.59-22.78 16.41L103 376.36c-1.5 4.58-5.78 7.64-10.59 7.64H80c-8.84 0-16 7.16-16 16s7.16 16 16 16h12.41c18.62 0 35.09-11.88 40.97-29.53L144 354.58l16.81 50.48c4.54 13.51 23.14 14.83 29.5 2.08l7.66-15.33c4.01-8.07 15.8-8.59 20.22.34C225.44 406.61 239.9 415.7 256 416h32c22.05-.01 43.95-4.9 64.01-13.6v61.61zm27.48-118.05A129.012 129.012 0 0 1 288 384v-.03c0-34.35 13.7-67.29 38.06-91.51l120.55-119.87 52.8 52.8-119.92 120.57zM538.2 186.6l-21.19 21.19-52.8-52.8 21.2-21.19c7.73-7.73 20.27-7.74 28.01 0l24.79 24.79c7.72 7.73 7.72 20.27-.01 28.01z\"></path>\\n' +\n\t\t\t\t          '</svg>'\n\t\t\t} );\n\t\t}\n\n\t\tif ( ! this.get( 'ID' ) && ! this.get( 'icon' ) ) {\n\t\t\tthis.set( {icon: this.get( 'default_icon' )} );\n\t\t}\n\t},\n\turl: function () {\n\t\tvar url = ThriveApp.routes.topics;\n\n\t\tif ( this.get( 'ID' ) || this.get( 'ID' ) === 0 ) {\n\t\t\turl += '/' + this.get( 'ID' );\n\t\t}\n\n\t\treturn url;\n\t},\n\tgetName: function () {\n\t\treturn this.get( 'title' );\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/topic.js")},"type.js":function(exports,module,require){eval("var base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tdefaults: {\n\t\ttype: '',\n\t\tchecked: true\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/type.js")},"wishlist.js":function(exports,module,require){eval("/**\n * Membermouse membership and bundle model\n */\n\nvar base_model = require( './base' );\n\nmodule.exports = base_model.extend( {\n\tdefaults: {\n\t\tid: '',\n\t\tname: 'None'\n\t}\n} );\n//# sourceURL=workspace/admin/js/models/wishlist.js")}},"post-search.js":function(exports,module,require){
eval("( function ( $ ) {\n\t/**\n\t * ajax-suggest post search for an input\n\t * if fetch_single is passed and it's not empty, it will also fetch the selected post from the server and populate the input with it\n\t *\n\t * @param {object} $input jquery wrapper over the autocomplete input\n\t * @param {object} options map of autocomplete options to control jquery ui autocomplete\n\t * @constructor\n\t */\n\tmodule.exports = function ( $input, options ) {\n\t\toptions = options || {};\n\t\toptions.no_value_callback = options.no_value_callback || jQuery.noop;\n\t\toptions.change_callback = options.change_callback || jQuery.noop;\n\n\t\tfunction matches() {\n\t\t\tvar regex;\n\n\t\t\tif ( ! ( regex = $input.data( 'allow-regex' ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn $input.val().match( new RegExp( regex ) );\n\t\t}\n\n\t\tvar defaults = {\n\t\t\tappendTo: $input.parent(),\n\t\t\tminLength: 2,\n\t\t\tdelay: 200,\n\t\t\tchange: function ( event, ui ) {\n\t\t\t\tif ( ! ui.item && ! $input.data( 'value-filled' ) && ! matches() ) {\n\t\t\t\t\t$input.val( '' );\n\t\t\t\t\toptions.no_value_callback.apply( $input, arguments );\n\t\t\t\t}\n\t\t\t\t$input.data( 'value-filled', null );\n\n\t\t\t\tif ( matches() ) {\n\t\t\t\t\toptions.change_callback.apply( $input, arguments );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\toptions = jQuery.extend( true, defaults, options );\n\n\t\tif ( ! options.source ) {\n\t\t\toptions.source = options.url;\n\t\t}\n\n\t\t$.ajaxSetup( {\n\t\t\theaders: {'X-WP-Nonce': ThriveApp.nonce}\n\t\t} );\n\n\t\t$input.autocomplete( options ).data( \"ui-autocomplete\" )._renderItem = function ( ul, item ) {\n\t\t\tvar _class = '';\n\t\t\tif ( options.collection && options.collection.length ) {\n\t\t\t\tvar model = options.collection.findWhere( {id: item.id} );\n\t\t\t\tif ( model ) {\n\t\t\t\t\t_class = 'tva-selected-post';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jQuery( \"<li class='\" + _class + \"'>\" ).append( \"<span class='tva-ps-result-title'>\" + item.label + \"</span><span class='tva-ps-result-email'>\" + \"(\" + item.type + \")\" + \"</span>\" ).appendTo( ul );\n\t\t};\n\n\t\t$input.on( 'blur', function () {\n\t\t\tif ( ! jQuery.trim( this.value ).length ) {\n\t\t\t\toptions.no_value_callback.apply( $input, arguments );\n\t\t\t}\n\t\t} );\n\n\t\tif ( options.fetch_single && typeof options.fetch_single === 'number' ) {\n\t\t\t$input.addClass( 'ui-autocomplete-loading' );\n\t\t\tjQuery.ajax( {\n\t\t\t\turl: ThriveApp.router.courses,\n\t\t\t\tdata: {\n\t\t\t\t\tid: options.fetch_single\n\t\t\t\t},\n\t\t\t\tsuccess: function ( result ) {\n\t\t\t\t\t$input.data( 'value-filled', 1 ).val( result.title ).removeClass( 'ui-autocomplete-loading' ).next( 'label' ).addClass( 'tvd-active' );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tif ( options.fetch_single && typeof options.fetch_single === 'string' ) {\n\t\t\t$input.data( 'value-filled', 1 ).val( options.fetch_single ).next( 'label' ).addClass( 'tvd-active' );\n\t\t}\n\t};\n} )( jQuery );\n//# sourceURL=workspace/admin/js/post-search.js")},"routes.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar dashboardView = require( './views/ta-dashboard' );\n\n\tvar courseDashboardView = require( './views/course/dashboard' );\n\n\tvar headerView = require( './views/header' );\n\n\tvar breadcrumbsView = require( './views/breadcrubs' );\n\n\tvar wizardView = require( './views/wizard' );\n\n\tvar sendowlDash = require( './views/sendowl/dashboard' );\n\n\tvar sendowlDashView = require( './views/sendowl/quickStart' );\n\n\tvar sendowlCheckout = require( './views/sendowl/checkout' );\n\n\tvar sendowlLinks = require( './views/sendowl/purchase-links' );\n\n\tvar sendowlIntegration = require( './views/sendowl/integration' );\n\n\tvar courseModel = require( './models/course' );\n\n\tvar sendowlAddProduct = require( './views/sendowl/add-product' );\n\n\tmodule.exports = Backbone.Router.extend( {\n\n\t\t$el: $( '#tva-admin-wrapper' ),\n\t\troutes: {\n\t\t\t'greeting': 'greeting',\n\t\t\t'wizard': 'wizard',\n\t\t\t'template_settings': 'template_settings',\n\t\t\t'label_management': 'label_management',\n\t\t\t'import': 'import',\n\t\t\t'dashboard': 'dashboard',\n\t\t\t'topics': 'editTopics',\n\t\t\t'purge-cache': 'purgeCache',\n\t\t\t'add_course': 'addCourse',\n\t\t\t'sendowl_settings': 'sendowl_settings',\n\t\t\t'sendowl_quick_start': 'sendowl_quick_start',\n\t\t\t'sendowl_checkout': 'sendowl_checkout',\n\t\t\t'sendowl_links': 'sendowl_links',\n\t\t\t'sendowl_integration': 'sendowl_integration',\n\t\t\t'sendowl_logs': 'sendowl_logs',\n\t\t\t'sendowl_stacks': 'sendowl_stacks',\n\t\t\t'sendowl_customers': 'sendowl_customers',\n\t\t\t'sendowl_add_product': 'sendowl_add_product',\n\t\t\t'course/:id': 'course'\n\t\t},\n\t\tgreeting_view: null,\n\t\twizard_view: null,\n\t\tdash_view: null,\n\t\tcourse_view: null,\n\t\ttopics_view: null,\n\t\tsendowl_view: null,\n\t\tsendowl_quick_start_view: null,\n\t\tsendowl_checkout_view: null,\n\t\tsendowl_links_view: null,\n\t\tsendowl_integration_view: null,\n\t\tsendowl_logs_view: null,\n\t\tsendowl_stacks_view: null,\n\t\tsendowl_customers_view: null,\n\t\tbreadcrumbs: {\n\t\t\tcol: null,\n\t\t\tview: null\n\t\t},\n\t\t/**\n\t\t * set the current page - adds the structure to breadcrumbs and sets the new document title\n\t\t *\n\t\t * @param {string} section page hierarchy\n\t\t * @param {string} label current page label\n\t\t *\n\t\t * @param {Array} [structure] optional the structure of the links that lead to the current page\n\t\t */\n\t\tset_page: function ( section, label, structure ) {\n\t\t\tthis.breadcrumbs.col.reset();\n\t\t\tstructure = structure || {};\n\n\t\t\t/* Thrive Admin Dashboard is always the first element */\n\t\t\tthis.breadcrumbs.col.add_page( ThriveApp.dash_url, ThriveApp.t.Thrive_Dashboard, true );\n\n\t\t\t_.each( structure, _.bind( function ( item ) {\n\t\t\t\tthis.breadcrumbs.col.add_page( item.route, item.label );\n\t\t\t}, this ) );\n\n\t\t\t/**\n\t\t\t * last link - no need for route\n\t\t\t */\n\t\t\tthis.breadcrumbs.col.add_page( '', label );\n\n\t\t\t/* update the page title */\n\t\t\tvar $title = $( 'head > title' );\n\t\t\tif ( ! this.original_title ) {\n\t\t\t\tthis.original_title = $title.html();\n\t\t\t}\n\n\t\t\t$title.html( label + ' &lsaquo; ' + this.original_title )\n\t\t},\n\n\t\t/**\n\t\t * Greeting view\n\t\t */\n\t\tgreeting: function () {\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\n\t\t\tthis.renderHeader();\n\n\t\t\tif ( this.greeting_view ) {\n\t\t\t\tthis.greeting_view.remove();\n\t\t\t}\n\n\t\t\tthis.greeting_view = new ThriveApp.views.Start( {\n\t\t\t\tmodel: ThriveApp.globals.settings\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.greeting_view.render().$el );\n\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t},\n\n\t\t/**\n\t\t * Wizard view\n\t\t */\n\t\twizard: function () {\n\t\t\tthis.set_page( 'dashboard', ThriveApp.t.TemplateSettings );\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\t\t\tthis.hideAdminBar();\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.renderHeader();\n\n\t\t\tif ( this.wizard_view ) {\n\t\t\t\tthis.wizard_view.remove();\n\t\t\t}\n\n\t\t\tthis.wizard_view = new wizardView( {\n\t\t\t\tmodel: ThriveApp.globals.settings,\n\t\t\t\tcollection: new ThriveApp.collections.Templates( ThriveApp.data.templates )\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.wizard_view.render().$el );\n\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t},\n\t\taddFullHeight: function () {\n\t\t\t$( '#wpwrap' ).addClass( 'tva-fullheight' );\n\t\t},\n\t\tremoveFullHeight: function () {\n\t\t\t$( '#wpwrap' ).removeClass( 'tva-fullheight' );\n\t\t},\n\n\t\t/**\n\t\t * Sendowl settings page\n\t\t */\n\t\tsendowl_settings: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'SendOwl Settings', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_view ) {\n\t\t\t\tthis.sendowl_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_view = new sendowlDash( {} );\n\n\t\t\tthis.$el.html( this.sendowl_view.render().$el );\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tthis.showAdminBar();\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\t/**\n\t\t * Sendowl quick start guide\n\t\t */\n\t\tsendowl_quick_start: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'Quick Start Guide', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_quick_start_view ) {\n\t\t\t\tthis.sendowl_quick_start_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_quick_start_view = new sendowlDashView( {\n\t\t\t\tmodel: ThriveApp.globals.settings\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_quick_start_view.render().$el );\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_checkout: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'Checkout Settings', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_checkout_view ) {\n\t\t\t\tthis.sendowl_checkout_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_checkout_view = new sendowlCheckout( {\n\t\t\t\tmodel: ThriveApp.globals.settings\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_checkout_view.render().$el );\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_links: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'Purchase Links', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_links_view ) {\n\t\t\t\tthis.sendowl_links_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_links_view = new sendowlLinks( {\n\t\t\t\tmodel: new ThriveApp.models.Base( {\n\t\t\t\t\tcurrentProduct: new ThriveApp.models.Base()\n\t\t\t\t} )\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_links_view.render().$el );\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\t\t\twindow.scrollTo( 0, 0 );\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_integration: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'Integration Settings', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_integration_view ) {\n\t\t\t\tthis.sendowl_integration_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_integration_view = new sendowlIntegration( {\n\t\t\t\tmodel: ThriveApp.globals.soSettings\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_integration_view.render().$el );\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_logs: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'SendOwl Logs', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_logs_view ) {\n\t\t\t\tthis.sendowl_logs_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\t\t\tthis.sendowl_logs_view = new ThriveApp.views.SendowlLogs( {\n\t\t\t\tcollection: ThriveApp.globals.logs\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_logs_view.render().$el );\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_stacks: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'SendOwl Stacks', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_stacks_view ) {\n\t\t\t\tthis.sendowl_stacks_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_stacks_view = new ThriveApp.views.SendowlStacks( {\n\t\t\t\tcollection: ThriveApp.globals.stacks\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_stacks_view.render().$el );\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_customers: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'SendOwl Customers List', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.sendowl_customers_view ) {\n\t\t\t\tthis.sendowl_customers_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.sendowl_customers_view = new ThriveApp.views.SendowlCustomers( {\n\t\t\t\tmodel: new ThriveApp.models.SendowlCustomer(),\n\t\t\t\tcollection: ThriveApp.globals.sendowl_customers\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.sendowl_customers_view.render().$el );\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\tsendowl_add_product: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.set_page( '', 'Create Products in SendOwl', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_settings',\n\t\t\t\t\tlabel: ThriveApp.t.SendowlSettings\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_quick_start',\n\t\t\t\t\tlabel: ThriveApp.t.quickStartGuide\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\troute: 'sendowl_add_product',\n\t\t\t\t\tlabel: ThriveApp.t.CreateProducts\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tthis.renderHeader();\n\t\t\tthis.$el.html( new sendowlAddProduct().render().$el );\n\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\n\t\t/**\n\t\t * Template view same as Wizard view but we're sending a flag and making the route look better\n\t\t *\n\t\t */\n\t\ttemplate_settings: function () {\n\n\t\t\tvar prev_url = ThriveApp.globals.settings.get( 'preview_url' );\n\t\t\tif ( prev_url === false ) {\n\t\t\t\tThriveApp.router.navigate( \"#dashboard\", {trigger: true} );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$( '.tva-import-wrapper' ).css( {\n\t\t\t\t\"zoom\": \"1\",\n\t\t\t\t\"-moz-transform\": \"scale(1)\",\n\t\t\t\t\"-moz-transform-origin\": \"left top\"\n\t\t\t} );\n\n\t\t\tvar self = this;\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\t\t\tthis.addFullHeight();\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\t$( '#wpwrap' ).addClass( 'tva-fullheight' );\n\n\t\t\tthis.renderHeader();\n\t\t\tthis.breadcrumbs.col.reset();\n\t\t\tthis.breadcrumbs.view.render();\n\t\t\tthis.hideAdminBar();\n\t\t\tThriveApp.globals.available_settings.clear().set( ThriveApp.globals.available_settings.defaults );\n\t\t\tThriveApp.globals.available_settings.fetch().success( function ( response ) {\n\t\t\t\tif ( self.wizard_view ) {\n\t\t\t\t\tself.wizard_view.remove();\n\t\t\t\t}\n\n\t\t\t\tThriveApp.globals.settings.set( {iframe_url: response.preview_url, current_page: 'template'} );\n\n\t\t\t\tvar settings_model = ThriveApp.globals.settings,\n\t\t\t\t\tsettings_clone = new ThriveApp.models.Settings( settings_model.toDeepJSON() );\n\n\t\t\t\tself.wizard_view = new wizardView( {\n\t\t\t\t\tmodel: settings_clone,\n\t\t\t\t\toriginal_model: settings_model,\n\t\t\t\t\tcollection: new ThriveApp.collections.Templates( ThriveApp.data.templates ),\n\t\t\t\t\tedit: true\n\t\t\t\t} );\n\n\t\t\t\tself.$el.html( self.wizard_view.render().$el );\n\n\t\t\t\twindow.scrollTo( 0, 0 );\n\t\t\t} );\n\n\n\t\t},\n\n\t\timport: function () {\n\t\t\tthis.set_page( '', ThriveApp.t.Import, [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t}\n\t\t\t] );\n\t\t\tthis.showAdminBar();\n\n\t\t\t$( \"#tva-admin-wrapper\" ).addClass( \"tva-import-wrapper\" );\n\n\t\t\tif ( $( window ).width() < 1400 ) {\n\t\t\t\tthis.hideScrollBar();\n\n\t\t\t\t$( '.tva-import-wrapper' ).css( {\n\t\t\t\t\t\"zoom\": \"0.6\",\n\t\t\t\t\t\"-moz-transform\": \"scale(0.6)\",\n\t\t\t\t\t\"-moz-transform-origin\": \"left -75px\"\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\t\t\tvar self = this,\n\t\t\t\tcollection = new ThriveApp.collections.ImportCourses();\n\n\t\t\tcollection.fetch().success( function () {\n\t\t\t\tif ( self.import_view ) {\n\t\t\t\t\tself.import_view.remove();\n\t\t\t\t}\n\n\t\t\t\tself.import_view = new ThriveApp.views.Import( {\n\t\t\t\t\tmodel: ThriveApp.globals.settings,\n\t\t\t\t\tcollection: collection\n\t\t\t\t} );\n\n\t\t\t\tself.$el.html( self.import_view.render().$el );\n\t\t\t} );\n\t\t},\n\t\t/**\n\t\t * Dashboard Route\n\t\t */\n\t\tdashboard: function () {\n\n\t\t\t$( '.tva-import-wrapper' ).css( {\n\t\t\t\t\"zoom\": \"1\",\n\t\t\t\t\"-moz-transform\": \"scale(1)\",\n\t\t\t\t\"-moz-transform-origin\": \"left top\"\n\t\t\t} );\n\n\t\t\tThriveApp.globals.selected_items.reset();\n\n\t\t\tthis.set_page( 'dashboard', ThriveApp.t.Dashboard );\n\t\t\tthis.removeFullHeight();\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\t\t\tthis.showAdminBar();\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tif ( this.dash_view ) {\n\t\t\t\tthis.dash_view.remove();\n\t\t\t}\n\n\t\t\tif ( this.view ) {\n\t\t\t\tthis.view.remove();\n\t\t\t}\n\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.dash_view = new dashboardView( {\n\t\t\t\tmodel: ThriveApp.globals.settings,\n\t\t\t\tcollection: ThriveApp.globals.courses\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.dash_view.render().$el );\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\t\t/**\n\t\t * Add a course route\n\t\t */\n\t\taddCourse: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\t\t\tthis.set_page( '', 'Add Course', [\n\t\t\t\t{\n\t\t\t\t\troute: 'purge-cache',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tif ( this.course_view ) {\n\t\t\t\tthis.course_view.remove();\n\t\t\t}\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.course_view = new courseDashboardView( {\n\t\t\t\tmodel: new courseModel( {\n\t\t\t\t\torder: ThriveApp.globals.courses.length,\n\t\t\t\t\tcomment_status: ThriveApp.globals.settings.get( 'comment_status' )\n\t\t\t\t} ),\n\t\t\t\tcollection: ThriveApp.globals.courses,\n\t\t\t\tactiveTab: 'details'\n\t\t\t} );\n\n\t\t\tThriveApp.globals.active_course = this.course_view.model;\n\n\t\t\tthis.$el.html( this.course_view.render().$el );\n\t\t\t$( '.tva-add-content' ).hide();\n\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\t\t/**\n\t\t * Editing a course route\n\t\t *\n\t\t * @param id\n\t\t */\n\t\tcourse: function ( id ) {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tif ( this.view ) {\n\t\t\t\tthis.view.remove();\n\t\t\t}\n\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\n\t\t\tif ( ! id ) {\n\t\t\t\tThriveApp.router.navigate( '#dashboard', {trigger: true} );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tThriveApp.globals.active_course = ThriveApp.globals.courses.findWhere( {ID: parseInt( id )} );\n\n\t\t\tif ( ! ThriveApp.globals.active_course ) {\n\t\t\t\tThriveApp.router.navigate( '#dashboard', {trigger: true} );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tThriveApp.globals.course_elements = ThriveApp.util.getCourseElements( ThriveApp.globals.active_course );\n\n\t\t\tthis.set_page( '', ThriveApp.globals.active_course.get( 'name' ), [\n\t\t\t\t{\n\t\t\t\t\troute: 'purge-cache',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.view = new courseDashboardView( {\n\t\t\t\tmodel: ThriveApp.globals.active_course,\n\t\t\t\tcollection: ThriveApp.globals.courses\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.view.render().$el );\n\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t\tTVE_Dash.hideLoader();\n\t\t},\n\t\t/**\n\t\t * Edit topics route\n\t\t */\n\t\teditTopics: function () {\n\n\n\t\t\t$( '.tva-import-wrapper' ).css( {\n\t\t\t\t\"zoom\": \"1\",\n\t\t\t\t\"-moz-transform\": \"scale(1)\",\n\t\t\t\t\"-moz-transform-origin\": \"left top\"\n\t\t\t} );\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$( '.tvd-material-tooltip' ).hide();\n\t\t\tthis.set_page( '', 'Topics', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t}\n\t\t\t] );\n\t\t\tthis.renderHeader();\n\n\t\t\tthis.topics_view = new ThriveApp.views.TopicsManagement( {\n\t\t\t\tcollection: ThriveApp.globals.topics\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.topics_view.render().$el );\n\n\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tthis.showAdminBar();\n\n\t\t},\n\n\t\t/**\n\t\t * Route for the labels management\n\t\t */\n\t\tlabel_management: function () {\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tthis.renderHeader();\n\t\t\tthis.set_page( '', 'Labels Management', [\n\t\t\t\t{\n\t\t\t\t\troute: 'dashboard',\n\t\t\t\t\tlabel: ThriveApp.t.Dashboard\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\tthis.labels_view = new ThriveApp.views.LabelManagement( {\n\t\t\t\tcollection: ThriveApp.globals.labels\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.labels_view.render().$el );\n\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\tthis.showAdminBar();\n\n\t\t},\n\n\t\t/**\n\t\t * Creates a view for the header\n\t\t */\n\t\trenderHeader: function () {\n\t\t\tif ( ! this.header ) {\n\t\t\t\tthis.header = new headerView( {\n\t\t\t\t\tel: '.tva-header',\n\t\t\t\t\tmodel: ThriveApp.globals.settings\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tthis.header.setElement( $( '.tva-header' ) );\n\t\t\t}\n\n\t\t\tthis.header.render();\n\n\t\t},\n\t\tinit_breadcrumbs: function () {\n\t\t\tthis.breadcrumbs.col = new ThriveApp.collections.Breadcrumbs();\n\t\t\tthis.breadcrumbs.view = new breadcrumbsView( {\n\t\t\t\tcollection: this.breadcrumbs.col\n\t\t\t} )\n\t\t},\n\t\thideAdminBar: function () {\n\t\t\t$( '#adminmenuwrap, #adminmenuback, #wpfooter ' ).hide();\n\t\t\t$( '#wpcontent' ).css( {margin: 0} );\n\t\t\t$( 'body' ).css( {overflowY: 'hidden'} );\n\t\t\t$( 'body' ).css( {overflowX: 'hidden'} );\n\t\t},\n\t\thideScrollBar: function () {\n\t\t\t$( 'body' ).css( {overflowY: 'hidden'} );\n\t\t\t$( 'body' ).css( {overflowX: 'hidden'} );\n\t\t},\n\t\tshowAdminBar: function () {\n\t\t\t$( '#adminmenuwrap, #adminmenuback, #wpfooter' ).css( 'display', '' );\n\t\t\t$( '#wpcontent' ).css( 'margin-left', '' );\n\t\t\t$( 'body' ).css( {overflowY: 'scroll'} );\n\t\t\t$( 'body' ).css( {overflowX: 'auto'} );\n\t\t},\n\t\tpurgeCache: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: ThriveApp.routes.courses\n\t\t\t} ).done( _.bind( function ( response ) {\n\t\t\t\tThriveApp.globals.courses.reset( response );\n\t\t\t\tthis.navigate( \"#dashboard\", {trigger: true} );\n\t\t\t}, this ) ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t}\n\t} );\n} )( jQuery );\n//# sourceURL=workspace/admin/js/routes.js")},"storage.js":function(exports,module,require){eval("( function ( $ ) {\n\n\t/**\n\t * Storage handler when localStorage is not available\n\t */\n\tvar FallbackStorage = {\n\t\tsetItem: function ( key, value ) {\n\t\t},\n\t\tgetItem: function ( key ) {\n\t\t},\n\t\tremoveItem: function ( key ) {\n\t\t}\n\t};\n\n\t/**\n\t * Main object constructor\n\t *\n\t * @constructor\n\t */\n\tfunction ThriveAppStorage() {\n\t\tthis.api = window.localStorage || FallbackStorage;\n\t\tthis.listening = false;\n\t\tthis.listeners = {};\n\t}\n\n\t/**\n\t * Persist a value in a key\n\t *\n\t * @param {String} key\n\t * @param {*} value\n\t * @returns {ThriveAppStorage}\n\t */\n\tThriveAppStorage.prototype.set = function ( key, value ) {\n\t\tif ( ! key || typeof value === 'undefined' || value === null ) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif ( typeof value === 'object' ) {\n\t\t\tvalue = JSON.stringify( value );\n\t\t}\n\t\ttry {\n\t\t\tthis.api.setItem( key, value );\n\t\t} catch ( e ) {\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t *\n\t * @param {String} key\n\t * @returns {*|undefined}\n\t */\n\tThriveAppStorage.prototype.get = function ( key ) {\n\t\tif ( ! key ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tvar value = this.api.getItem( key );\n\t\tif ( ! value ) {\n\t\t\treturn value;\n\t\t}\n\t\ttry {\n\t\t\treturn JSON.parse( value );\n\t\t} catch ( e ) {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\t/**\n\t * Removes an item from storage\n\t *\n\t * @param {String} key\n\t *\n\t * @return {ThriveAppStorage} allow chained calls\n\t */\n\tThriveAppStorage.prototype.unset = function ( key ) {\n\t\tif ( ! key ) {\n\t\t\treturn this;\n\t\t}\n\t\ttry {\n\t\t\tthis.api.removeItem( key );\n\t\t} catch ( e ) {\n\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tThriveAppStorage.prototype._listen = function () {\n\n\t\tvar self = this,\n\t\t\tchange = function ( e ) {\n\t\t\t\tif ( ! e ) {\n\t\t\t\t\te = window.event;\n\t\t\t\t}\n\n\t\t\t\tvar all = self.listeners[ e.key ];\n\n\t\t\t\tif ( all && all.length ) {\n\t\t\t\t\tall.forEach( function ( listener ) {\n\t\t\t\t\t\tlistener( JSON.parse( e.newValue ), JSON.parse( e.oldValue ) );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( window.addEventListener ) {\n\t\t\twindow.addEventListener( 'storage', change, false );\n\t\t} else if ( window.attachEvent ) {\n\t\t\twindow.attachEvent( 'onstorage', change );\n\t\t} else {\n\t\t\twindow.onstorage = change;\n\t\t}\n\t};\n\n\n\tThriveAppStorage.prototype.on = function ( key, fn ) {\n\t\tif ( this.listeners[ key ] ) {\n\t\t\tthis.listeners[ key ].push( fn );\n\t\t} else {\n\t\t\tthis.listeners[ key ] = [ fn ];\n\t\t}\n\n\t\tif ( this.listening === false ) {\n\t\t\tthis._listen();\n\t\t\tthis.listening = true;\n\t\t}\n\t};\n\n\tThriveAppStorage.prototype.off = function ( key, fn ) {\n\t\tvar listener = listeners[ key ];\n\t\tif ( listener.length > 1 ) {\n\t\t\tlistener.splice( listener.indexOf( fn ), 1 );\n\t\t} else {\n\t\t\tlisteners[ key ] = [];\n\t\t}\n\t};\n\n\t/**\n\t *\n\t * @param {String} component\n\t * @param {String} field\n\t * @param {Boolean|Number|Object|String} value\n\t */\n\tThriveAppStorage.prototype.setComponentMeta = function ( component, field, value ) {\n\n\t\tvar meta = this.get( 'tcb-components-display' ) || {};\n\n\t\tmeta[ component ] = meta[ component ] || {};\n\t\tmeta[ component ][ field ] = value;\n\n\t\tthis.set( 'tcb-components-display', meta );\n\t};\n\n\t/**\n\t *\n\t * @returns {ThriveAppStorage} a storage instance\n\t */\n\tThriveAppStorage.instance = function () {\n\t\tif ( ! this._instance ) {\n\t\t\tthis._instance = new ThriveAppStorage();\n\t\t}\n\n\t\treturn this._instance;\n\t};\n\n\tmodule.exports = ThriveAppStorage;\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/storage.js")},views:{"base.js":function(exports,module,require){
eval("( function ( $ ) {\n\t/**\n\t * remove tvd-invalid class for all inputs in the view's root element\n\t *\n\t * @returns {Backbone.View}\n\t */\n\tBackbone.View.prototype.tvd_clear_errors = function () {\n\t\tthis.$( '.tvd-invalid' ).removeClass( 'tvd-invalid' );\n\t\tthis.$( 'select' ).trigger( 'tvdclear' );\n\t\treturn this;\n\t};\n\n\t/**\n\t *\n\t * @param {Backbone.Model|object} [model] backbone model or error object with 'field' and 'message' properties\n\t *\n\t * @returns {Backbone.View|undefined}\n\t */\n\tBackbone.View.prototype.tvd_show_errors = function ( model ) {\n\t\tmodel = model || this.model;\n\n\t\tif ( ! model ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar err = model instanceof Backbone.Model ? model.validationError : model,\n\t\t\tself = this,\n\t\t\t$all = $();\n\n\t\tfunction show_error( error_item ) {\n\t\t\tif ( typeof error_item === 'string' ) {\n\t\t\t\treturn TVE_Dash.err( error_item );\n\t\t\t}\n\t\t\t$all = $all.add( self.$( '[data-field=' + error_item.field + ']' ).addClass( 'tvd-invalid' ).each( function () {\n\t\t\t\tvar $this = $( this );\n\t\t\t\tif ( $this.is( 'select' ) ) {\n\t\t\t\t\t$this.trigger( 'tvderror', error_item.message );\n\t\t\t\t} else {\n\t\t\t\t\t$this.next( 'label' ).attr( 'data-error', error_item.message )\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tif ( $.isArray( err ) ) {\n\t\t\t_.each( err, function ( item ) {\n\t\t\t\tshow_error( item );\n\t\t\t} );\n\t\t} else {\n\t\t\tshow_error( err );\n\t\t}\n\t\t$all.not( '.tvd-no-focus' ).first().focus();\n\t\t/* if the first error message is not visible, scroll the contents to include it in the viewport. At the moment, this is only implemented for modals */\n\t\tthis.scroll_first_error( $all.first() );\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * scroll the contents so that the first errored input is visible\n\t * currently this is only implemented for modals\n\t *\n\t * @param {Object} $input first input element that has the error\n\t *\n\t * @returns {Backbone.View}\n\t */\n\tBackbone.View.prototype.scroll_first_error = function ( $input ) {\n\t\tif ( ! ( this instanceof TVE_Dash.views.Modal ) || ! $input.length ) {\n\t\t\treturn this;\n\t\t}\n\t\tvar input_top = $input.offset().top,\n\t\t\tcontent_top = this.$_content.offset().top,\n\t\t\tscroll_top = this.$_content.scrollTop(),\n\t\t\tcontent_height = this.$_content.outerHeight();\n\t\tif ( input_top >= content_top && input_top < content_height + content_top - 50 ) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.$_content.animate( {\n\t\t\t'scrollTop': scroll_top + input_top - content_top - 40 // 40px difference\n\t\t}, 200, 'swing' );\n\t};\n\n\t/**\n\t * {Backbone.View}\n\t */\n\tmodule.exports = Backbone.View.extend( {\n\n\t\t/**\n\t\t * Allows template to be set dynamically\n\t\t * @param {*} options\n\t\t */\n\t\tinitialize: function ( options ) {\n\t\t\tif ( options && options.template ) {\n\t\t\t\tthis.template = options.template;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Default events\n\t\t * - click class on an HTML element and a data-fn=\"\" attribute might call this a method from View\n\t\t */\n\t\tevents: {\n\t\t\t'click .click': function ( event ) {\n\n\t\t\t\tvar _method = event.currentTarget.dataset.fn;\n\n\t\t\t\tif ( typeof this[ _method ] === 'function' ) {\n\n\t\t\t\t\tif ( event.currentTarget.dataset.params ) {\n\t\t\t\t\t\tthis[ _method ].apply( this, [ event.currentTarget.dataset.params ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis[ _method ].apply( this, arguments );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Appends the template's html into $el\n\t\t *\n\t\t * @returns {{Backbone.View}}\n\t\t */\n\t\trender: function () {\n\n\t\t\tif ( typeof this.template === 'function' ) {\n\t\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\t/**\n\t\t *\n\t\t * Instantiate and open a new modal which has the view constructor assigned and send params further along\n\t\t *\n\t\t * @param ViewConstructor View constructor\n\t\t * @param params\n\t\t */\n\t\tmodal: function ( ViewConstructor, params ) {\n\t\t\treturn TVE_Dash.modal( ViewConstructor, params );\n\t\t},\n\t\tbind_zclip: function () {\n\t\t\t/**\n\t\t\t * Keep the old ZClip working\n\t\t\t */\n\t\t\tTVE_Dash.bindZClip( this.$el.find( 'a.tvd-copy-to-clipboard' ) );\n\n\t\t\tvar $element = this.$el.find( '.tva-sendowl-search' );\n\n\t\t\tfunction bind_it() {\n\t\t\t\t$element.each( function () {\n\t\t\t\t\tvar $elem = $( this ),\n\t\t\t\t\t\t$input = $elem.prev().on( 'click', function ( e ) {\n\t\t\t\t\t\t\tthis.select();\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t_default_btn_color_class = $elem.attr( 'data-tvd-btn-color-class' ) || 'tva-copied';\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$elem.zclip( {\n\t\t\t\t\t\t\tpath: TVE_Dash_Const.dash_url + '/js/util/jquery.zclip.1.1.1/ZeroClipboard.swf',\n\t\t\t\t\t\t\tcopy: function () {\n\t\t\t\t\t\t\t\treturn jQuery( this ).prev().val();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tafterCopy: function () {\n\t\t\t\t\t\t\t\tvar $link = jQuery( this );\n\t\t\t\t\t\t\t\t$input.select();\n\t\t\t\t\t\t\t\t$link.removeClass( _default_btn_color_class ).addClass( 'tva-copied' );\n\t\t\t\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\t\t\t\t$link.removeClass( 'tva-copied' );\n\t\t\t\t\t\t\t\t}, 2000 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\tconsole.error && console.error( 'Error embedding zclip - most likely another plugin is messing this up' ) && console.error( e );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tsetTimeout( bind_it, 200 );\n\t\t},\n\t\topenModal: function ( ViewConstructor, params ) {\n\n\t\t\tif ( ! ViewConstructor instanceof Backbone.View ) {\n\t\t\t\tconsole.error && console.error( 'View must be an instance of Backbone View' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar _defaults = {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tcollection: this.collection,\n\t\t\t\t\t'max-width': '850px',\n\t\t\t\t\twidth: 'auto',\n\t\t\t\t\tin_duration: 200,\n\t\t\t\t\tout_duration: 300,\n\t\t\t\t\tclassName: 'tvd-modal'\n\t\t\t\t},\n\t\t\t\targs = $.extend( _defaults, params );\n\n\t\t\treturn this.modal( ViewConstructor, args );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/base.js")},"breadcrubs.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './base' );\n\n\t/**\n\t * breadcrumbs view - renders breadcrumb links\n\t */\n\tmodule.exports = baseView.extend( {\n\t\tel: $( '#tva-breadcrumbs-wrapper' )[ 0 ],\n\t\ttemplate: TVE_Dash.tpl( 'breadcrumbs' ),\n\t\t/**\n\t\t * setup collection listeners\n\t\t */\n\t\tinitialize: function () {\n\t\t\tthis.$title = $( 'head > title' );\n\t\t\tthis.original_title = this.$title.html();\n\t\t\tthis.listenTo( this.collection, 'change', this.render );\n\t\t\tthis.listenTo( this.collection, 'add', this.render );\n\t\t},\n\t\t/**\n\t\t * render the html\n\t\t */\n\t\trender: function () {\n\t\t\tthis.$el.empty().html( this.template( {links: this.collection} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/breadcrubs.js")},chapter:{"chapter.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar listView = require( '../course/items-list' );\n\n\tmodule.exports = listView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/chapter/chapter' ),\n\t\tclassName: 'tva-chapter-item tva-single-item',\n\t\tallowedItems: [ 'lesson' ],\n\t\t$_list: null,\n\t\tevents: function () {\n\t\t\treturn _.extend( {}, listView.prototype.events, {\n\t\t\t\t'click .tva-expand-chapter': 'expandChapter',\n\t\t\t\t'click .tva-collapse-chapter': 'collapseChapter',\n\t\t\t\t'click .tva-add-chapter-lesson': 'addLesson',\n\t\t\t\t'click .tva-delete-chapter': 'deleteChapter',\n\t\t\t\t'click .tva-edit-chapter-name': 'editTitle',\n\t\t\t\t'click .tva-drag-chapter': function ( e ) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t},\n\t\t\t\t'mousedown .tva-drag-chapter': function () {\n\t\t\t\t\tThriveApp.globals.moved_item = this.model;\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\tinitialize: function ( args ) {\n\t\t\tvar self = this;\n\n\t\t\tthis.index = args.index;\n\n\t\t\tthis.listenTo( this.model, 'change:checked', this.setChecked );\n\n\t\t\tthis.model.on( 'tva_render_content', function () {\n\t\t\t\tself.render();\n\t\t\t} );\n\n\t\t\tthis.$el.attr( 'data-id', this.model.get( 'ID' ) );\n\n\t\t\treturn this;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.empty();\n\t\t\tvar status = 'tva-status-red';\n\n\t\t\tif ( this.model.get( 'post_status' ) === 'publish' ) {\n\t\t\t\tstatus = this.model.get( 'lessons' ).findWhere( {post_status: 'draft'} ) ? 'tva-status-yellow' : 'tva-status-green';\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tstatus: status,\n\t\t\t\t\tindex: this.index + 1\n\t\t\t\t} )\n\t\t\t);\n\t\t\tthis.$chapterTitle = this.$( '.tva-chapter-title' );\n\n\t\t\tthis.renderContent();\n\n\t\t\tif ( ! this.model.get( 'expanded' ) ) {\n\t\t\t\tthis.$el.addClass( 'tva-chapter-collapsed' );\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'lessons' ).length ) {\n\t\t\t\tthis.$( '.tva-ch-lessons-count' ).removeClass( 'tva-hide' );\n\t\t\t} else {\n\t\t\t\tthis.$( '.tva-brackets' ).addClass( 'tva-gold' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tafterAddLessonModel: function () {\n\t\t\tthis.lesson_model.set( {post_parent: this.model.get( 'ID' )} );\n\t\t},\n\t\tdeleteChapter: function () {\n\t\t\tThriveApp.globals.selected_items.reset();\n\t\t\tthis.modal( ThriveApp.modals.ChapterModalDelete, {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\t'max-width': '600px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tviewName: 'ChapterDelete',\n\t\t\t\tclassName: 'tva-delete-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\teditTitle: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tvar self = this,\n\t\t\t\tedit_btn = this.$el.find( '.tva-edit-chapter-name' ),\n\t\t\t\tedit_model = new Backbone.Model( {\n\t\t\t\t\ttitle: this.model.get( 'post_title' ),\n\t\t\t\t\trequired: true\n\t\t\t\t} );\n\t\t\tedit_btn.hide();\n\t\t\tedit_model.on( 'change:value', function () {\n\n\t\t\t\tself.model.set( {post_title: edit_model.get( 'value' )} );\n\t\t\t\tself.save.apply( self, arguments );\n\t\t\t\tself.$chapterTitle.show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).hide();\n\t\t\t\tedit_btn.css( 'display', 'inline-block' );\n\t\t\t\tself.$chapterTitle.text( edit_model.get( 'value' ) );\n\t\t\t} );\n\t\t\tedit_model.on( 'tvu_no_change', function () {\n\t\t\t\tself.$chapterTitle.html( self.model.get( 'post_title' ) ).show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).remove();\n\t\t\t\tedit_btn.css( 'display', 'inline-block' );\n\t\t\t} );\n\n\t\t\tvar textEdit = new ThriveApp.views.InputTitle( {\n\t\t\t\tmodel: edit_model,\n\t\t\t\tel: this.$el.find( '.tva-chapter-title-container' ),\n\t\t\t\ttagName: 'div',\n\t\t\t\tmethod: 'append'\n\t\t\t} );\n\n\t\t\tthis.$chapterTitle.hide();\n\t\t\ttextEdit.render();\n\t\t\ttextEdit.focus();\n\t\t},\n\t\tanimateItem: function () {\n\t\t\tthis.model.set( {expanded: ! this.model.get( 'expanded' )} );\n\t\t\tthis.render();\n\t\t\tThriveApp.globals.active_course.trigger( 'tva_apply_sortable' );\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/chapter/chapter.js")}},course:{"access-rules":{"access-manager.js":function(exports,module,require){eval("var baseView = require( '../../base' ),\n\taddRuleForm = require( './add-rule-form' ),\n\truleView = require( './rule' );\n\n/**\n * Backbone View which manages the Access Rules\n * - manager over access rules\n */\nmodule.exports = baseView.extend( {\n\n\t$addButton: null,\n\t$rulesList: null,\n\ttemplate: TVE_Dash.tpl( 'course/access-rules/manager' ),\n\tclassName: 'tva-access-rules',\n\n\tinitialize: function () {\n\n\t\tthis.listenTo( this.collection, 'add', function ( model ) {\n\n\t\t\tthis.renderRule( model );\n\t\t\tthis.$rulesList.children().first().hide();\n\t\t} );\n\n\t\tthis.listenTo( this.collection, 'remove', function () {\n\n\t\t\tif ( this.collection.length === 0 ) {\n\t\t\t\tthis.$rulesList.children().first().show();\n\t\t\t}\n\t\t} );\n\t},\n\n\trender: function () {\n\n\t\tthis.$el.html( this.template() );\n\n\t\tthis.$addButton = this.$( 'button.tva-add-rule-form' );\n\t\tthis.$rulesList = this.$( '.tva-course-rules-list' );\n\n\t\tthis.renderRulesList();\n\n\t\treturn this;\n\t},\n\n\trenderRulesList: function () {\n\n\t\tif ( this.collection.length ) {\n\t\t\tthis.$rulesList.children().first().hide();\n\t\t}\n\n\t\tthis.collection.each( this.renderRule, this );\n\t},\n\n\t/**\n\t * Renders a Rule Model using ruleView\n\t *\n\t * @param {{Backbone.Model}} model\n\t */\n\trenderRule: function ( model ) {\n\n\t\tif ( this.$rulesList.length <= 0 ) {\n\t\t\tthrow 'List not defined to push Rule Item';\n\t\t}\n\n\t\tif ( false === ( model instanceof Backbone.Model ) ) {\n\t\t\tthrow 'Invalid Rule Model provided';\n\t\t}\n\n\t\tvar _rule_view = new ruleView( {\n\t\t\ttemplate: TVE_Dash.tpl( 'course/access-rules/rule' ),\n\t\t\tclassName: 'tva-rule-elem',\n\t\t\tmodel: model\n\t\t} );\n\n\t\t_rule_view.on( 'remove', function ( model ) {\n\t\t\tthis.collection.remove( model );\n\t\t}, this );\n\n\t\tthis.$rulesList.append( _rule_view.render().$el );\n\t},\n\n\t/**\n\t * Displays rule form\n\t * - called magically from template\n\t */\n\tdisplayAddForm: function () {\n\n\t\tvar _form = new addRuleForm( {\n\t\t\trules: this.collection\n\t\t} );\n\n\t\t_form\n\n\t\t\t.on( 'save', function () {\n\t\t\t\tthis.$addButton.show();\n\n\t\t\t\tif ( this.collection.hasRuleWithIntegration( _form.model.getIntegration() ) ) {\n\t\t\t\t\treturn TVE_Dash.err( ThriveApp.t.rule.errors.rule_exists );\n\t\t\t\t}\n\n\t\t\t\tthis.collection.add( _form.model );\n\t\t\t}, this )\n\n\t\t\t.on( 'cancel', function () {\n\t\t\t\tthis.$addButton.show();\n\t\t\t}, this );\n\n\t\tthis.$addButton.hide();\n\t\tthis.$addButton.after( _form.render().$el );\n\t}\n} );\n//# sourceURL=workspace/admin/js/views/course/access-rules/access-manager.js")},"add-rule-form.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar ruleForm = require( './rule-form' ),\n\t\tintegrations = require( '../../../collections/access-integrations' ),\n\t\trule_model = require( '../../../models/integration/rule' );\n\n\t/**\n\t * Backbone.View for adding new access rule into rules collection\n\t * - usually called by Access Manager View\n\t */\n\tmodule.exports = ruleForm.extend( {\n\n\t\tclassName: 'tva-add-rule-form',\n\t\ttemplate: TVE_Dash.tpl( 'course/access-rules/add-form' ),\n\n\t\tintegrations: null,\n\n\t\t/**\n\t\t * @param {{jQuery}}\n\t\t */\n\t\t$integrationsList: null,\n\n\t\tinitialize: function ( options ) {\n\n\t\t\tthis.integrations = new integrations( ThriveApp.access_integrations );\n\t\t\tthis.model = new rule_model();\n\t\t\tthis.rules = options.rules;\n\n\t\t\tthis.listenTo( this.model, 'change:integration', this.renderIntegrationItems );\n\t\t},\n\n\t\trender: function () {\n\n\t\t\tthis.$el.html( this.template() );\n\n\t\t\tthis.$integrationsList = this.$( '.tva-integrations-list' );\n\t\t\tthis.$integrationItems = this.$( '.tva-integration-items' ).hide();\n\n\t\t\tthis.renderIntegrationsList();\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Display a list of items the integration has:\n\t\t * - wordpress: user roles\n\t\t * - sendowl: products, bundles\n\t\t * - etc\n\t\t *\n\t\t * @param {{Backbone.Model}} rule_model that is wanted the be created\n\t\t * @param {String} integration_slug\n\t\t */\n\t\trenderIntegrationItems: function ( rule_model, integration_slug ) {\n\n\t\t\tif ( true === this.renderSendOwlWarnings() ) {\n\t\t\t\treturn this.$( '.tva-integration-save' ).hide();\n\t\t\t}\n\n\t\t\tthis.$( '.tva-integration-save' ).show();\n\n\t\t\tvar _items = this.integrations.getItems( integration_slug );\n\n\t\t\tif ( _items.length === 0 ) {\n\t\t\t\tvar _message = this.integrations.getIntegration( integration_slug ).getNoItemsMessage();\n\t\t\t\treturn this.$integrationItems.html( '<label>' + _message + '</label>' );\n\t\t\t}\n\n\t\t\t_items.each( function ( item ) {\n\n\t\t\t\tthis.$integrationItems.append( this.item_template( {\n\t\t\t\t\trule: this.model,\n\t\t\t\t\titem: item\n\t\t\t\t} ) );\n\t\t\t}, this );\n\t\t},\n\n\t\t/**\n\t\t * Renders the integrations collection with all their props: images/icons/labels/etc\n\t\t */\n\t\trenderIntegrationsList: function () {\n\n\t\t\tthis.integrations.each( this.renderIntegration, this );\n\t\t},\n\n\t\trenderIntegration: function ( integration ) {\n\n\t\t\tvar _item_tpl = TVE_Dash.tpl( 'course/access-rules/integration' ),\n\t\t\t\t$html = $( _item_tpl( {\n\t\t\t\t\tmodel: integration,\n\t\t\t\t\texists: this.rules.hasRuleWithIntegration( integration.get( 'slug' ) )\n\t\t\t\t} ) );\n\n\t\t\tthis.$integrationsList.append( $html );\n\t\t},\n\n\t\t/**\n\t\t * Called dynamically based on dataset attribute set on template's html\n\t\t * @param integration\n\t\t */\n\t\tsetIntegration: function ( integration ) {\n\n\t\t\tif ( this.rules.hasRuleWithIntegration( integration ) ) {\n\t\t\t\treturn TVE_Dash.err( ThriveApp.t.rule.errors.rule_exists );\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'integration' ) === integration ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$integrationItems.show().empty();\n\t\t\tthis.model.resetItems();\n\n\t\t\tthis.$( '.tva-integration-item' ).removeClass( 'tva-active' );\n\t\t\tthis.$( '[data-params=' + integration + ']' ).addClass( 'tva-active' );\n\n\t\t\tthis.model.set( 'integration', integration );\n\t\t},\n\n\t\t/**\n\t\t * Toggles an item into rule model\n\t\t * - if item exists in rule model it removes it\n\t\t * - if item does not exist then it adds it\n\t\t *\n\t\t * Called magically from template\n\t\t *\n\t\t * @param {String} item_id usually read from dataset: data-params=\"\"\n\t\t */\n\t\tsetIntegrationItem: function ( item_id ) {\n\n\t\t\tif ( ! isNaN( item_id ) ) {\n\t\t\t\titem_id = parseInt( item_id );\n\t\t\t}\n\n\t\t\tvar collection = this.integrations.getItems( this.model.get( 'integration' ) ),\n\t\t\t\titem = collection.findWhere( {id: item_id} );\n\n\t\t\tvar _method = this.model.contains( item ) ? 'remove' : 'push';\n\n\t\t\t/**\n\t\t\t * push or remove model based if it already exists into collection\n\t\t\t */\n\t\t\tthis.model.get( 'items' )[ _method ]( item );\n\t\t},\n\n\t\t/**\n\t\t * When save/cancel button of the current form is click the model is:\n\t\t * - saved and a save event is triggered\n\t\t * - canceled with a cancel event triggered\n\t\t * - form view is removed from DOM\n\t\t */\n\t\tsave: function () {\n\n\t\t\tif ( ! this.model.isValid() ) {\n\t\t\t\treturn TVE_Dash.err( this.model.validationError );\n\t\t\t}\n\n\t\t\tthis.trigger( 'save' );\n\t\t\tThriveApp.globals.active_course.trigger( 'tva_integration_updated', this.model );\n\t\t\tthis.remove();\n\t\t},\n\n\t\t/**\n\t\t * User cancels the add new rule form\n\t\t * Form is \"closed\" removed from DOM\n\t\t */\n\t\tcancel: function () {\n\n\t\t\tthis.trigger( 'cancel' );\n\t\t\tthis.remove();\n\t\t}\n\t} );\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/access-rules/add-rule-form.js")},"edit-rule-form.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar ruleForm = require( './rule-form' ),\n\t\tintegrations = require( '../../../collections/access-integrations' ),\n\t\titems_collection = require( './../../../models/integration/base' ).items_collection;\n\n\tmodule.exports = ruleForm.extend( {\n\n\t\tclassName: 'tva-edit-rule-form',\n\t\ttemplate: TVE_Dash.tpl( 'course/access-rules/edit-form' ),\n\t\tintegrations: null,\n\n\t\tinitialize: function () {\n\n\t\t\tthis.integrations = new integrations( ThriveApp.access_integrations );\n\t\t\tthis.selected_items = new items_collection( this.model.getItems().toJSON() );\n\t\t},\n\n\t\trender: function () {\n\n\t\t\tthis.$el.html( this.template() );\n\n\t\t\tthis.$integrationItems = this.$( '.tva-integration-items' );\n\n\t\t\tthis.renderIntegrationItems();\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Checks if item exists in rule model and based on that\n\t\t * - removes or pushes it into rule items collection\n\t\t * @param item_id\n\t\t */\n\t\tsetIntegrationItem: function ( item_id ) {\n\n\t\t\t/**\n\t\t\t * if the id is string and in this case we cover items which have id as string\n\t\t\t * - in this case we don't convert id to int\n\t\t\t */\n\t\t\tif ( ! isNaN( item_id ) ) {\n\t\t\t\titem_id = parseInt( item_id );\n\t\t\t}\n\n\t\t\tvar all_integration_items = this.integrations.getItems( this.model.get( 'integration' ) ),\n\t\t\t\titem = all_integration_items instanceof Backbone.Collection ? all_integration_items.findWhere( {id: item_id} ) : undefined,\n\t\t\t\t_method = this.selected_items.findWhere( {id: item_id} ) instanceof Backbone.Model ? 'remove' : 'push';\n\n\t\t\tif ( item instanceof Backbone.Model ) {\n\t\t\t\t/**\n\t\t\t\t * push or remove model based if it already exists into collection\n\t\t\t\t */\n\t\t\t\tthis.selected_items[ _method ]( item );\n\t\t\t}\n\t\t},\n\n\t\trenderIntegrationItems: function () {\n\n\t\t\tif ( true === this.renderSendOwlWarnings() ) {\n\t\t\t\treturn this.$( '.tva-integration-save' ).hide();\n\t\t\t}\n\n\t\t\tthis.$( '.tva-integration-save' ).show();\n\n\t\t\tthis.integrations.getItems( this.model.get( 'integration' ) ).each( function ( item ) {\n\n\t\t\t\tthis.$integrationItems.append( this.item_template( {\n\t\t\t\t\trule: this.model,\n\t\t\t\t\titem: item,\n\t\t\t\t\tchecked: this.model.contains( item )\n\t\t\t\t} ) );\n\n\t\t\t}, this );\n\t\t},\n\n\t\t/**\n\t\t * Resets the rule's items collection with the local selected_items collection\n\t\t */\n\t\tsave: function () {\n\n\t\t\tif ( this.selected_items.length <= 0 ) {\n\t\t\t\treturn TVE_Dash.err( ThriveApp.t.rule.errors.no_item_selected );\n\t\t\t}\n\n\t\t\tthis.model.resetItems( this.selected_items );\n\n\t\t\tthis.trigger( 'save' );\n\t\t\tThriveApp.globals.active_course.trigger( 'tva_integration_updated', this.model );\n\t\t\tthis.remove();\n\t\t},\n\n\t\t/**\n\t\t * Triggers a cancel event and removes itself\n\t\t */\n\t\tcancel: function () {\n\n\t\t\tthis.trigger( 'cancel' );\n\t\t\tthis.remove();\n\t\t}\n\t} );\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/access-rules/edit-rule-form.js")},"rule-form.js":function(exports,module,require){eval("/**\n * Base Form View for Add/Edit a Rule Integration\n */\n\nvar baseView = require( '../../base' );\nvar rule_model = require( '../../../models/integration/rule' );\n\n/**\n * Check if SendOwl settings are set\n *\n * @return {{checkout_page: boolean, account_keys: boolean}}\n * @private\n */\nfunction getSendOwlSettings() {\n\n\tvar _checkout_page = ThriveApp.globals.settings.get( 'checkout_page' );\n\tvar _account_keys = ThriveApp.globals.settings.get( 'account_keys' );\n\n\tvar response = {\n\t\tcheckout_page: _checkout_page && ! ! _checkout_page.ID,\n\t\taccount_keys: _account_keys && ! ! _account_keys.secret\n\t};\n\n\t/**\n\t * it this is rule model check if it's sendowl rule\n\t * - if model is not sendowl then mark settings as true\n\t * - if the model is sendowl then it let the settings be\n\t */\n\tif ( this instanceof rule_model ) {\n\t\tresponse.checkout_page = false === this.isSendOwl() || response.checkout_page;\n\t\tresponse.account_keys = false === this.isSendOwl() || response.account_keys;\n\t}\n\n\treturn response;\n}\n\n( function ( $ ) {\n\n\tmodule.exports = baseView.extend( {\n\n\t\titem_template: TVE_Dash.tpl( 'course/access-rules/integration-item' ),\n\n\t\t/**\n\t\t * @param {{jQuery}}\n\t\t */\n\t\t$integrationItems: null,\n\n\t\t/**\n\t\t * Checks the SendOwl settings and based on these renders specific warnings above the $integrationItems wrapper\n\t\t * - returns true if at least 1 warning was rendered\n\t\t * @return {boolean}\n\t\t */\n\t\trenderSendOwlWarnings: function () {\n\n\t\t\tvar _sendowl_settings = getSendOwlSettings.apply( this.model );\n\t\t\tvar _count = 0;\n\n\t\t\tthis.$( '.tva-sendowl-notice' ).remove();\n\n\t\t\tif ( false === _sendowl_settings.checkout_page ) {\n\t\t\t\tthis.$integrationItems.before( TVE_Dash.tpl( 'course/access-rules/sendowl-checkout-warning' )() );\n\t\t\t\t_count ++;\n\t\t\t}\n\n\t\t\tif ( false === _sendowl_settings.account_keys ) {\n\t\t\t\tthis.$integrationItems.before( TVE_Dash.tpl( 'course/access-rules/sendowl-account-keys-warning' )() );\n\t\t\t\t_count ++;\n\t\t\t}\n\n\t\t\tif ( _count ) {\n\t\t\t\tthis.$integrationItems.hide();\n\t\t\t}\n\n\t\t\treturn ! ! _count;\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/access-rules/rule-form.js")},"rule.js":function(exports,module,require){eval("var baseView = require( '../../base' ),\n\teditRuleForm = require( './edit-rule-form' );\n\n/**\n * Rule Backbone.View\n * Template is allowed to be set dynamically\n */\nmodule.exports = baseView.extend( {\n\n\tedit_form: null,\n\t$edit_button: null,\n\n\tevents: function () {\n\t\treturn _.extend( {}, baseView.prototype.events, {\n\t\t\t'click p': 'editRule'\n\t\t} );\n\t},\n\n\trender: function () {\n\n\t\tbaseView.prototype.render.apply( this, arguments );\n\t\tthis.$edit_button = this.$( '.tva-edit-access-rule' );\n\n\t\treturn this;\n\t},\n\n\t/**\n\t * The current view is removed from DOM\n\t * - remove event is triggered\n\t */\n\tdeleteRule: function () {\n\n\t\tthis.remove();\n\t\tthis.trigger( 'remove', this.model );\n\n\t\tThriveApp.globals.active_course.trigger( 'tva_integration_updated', this.model );\n\t},\n\n\t/**\n\t * Toggles the edit form for the current rule model\n\t * - on save updates/re-renders the rules items names\n\t */\n\teditRule: function () {\n\n\t\tif ( this.edit_form instanceof Backbone.View ) {\n\t\t\tthis.edit_form.remove();\n\t\t\tthis.edit_form = null;\n\t\t\treturn;\n\t\t}\n\n\t\tvar _form = new editRuleForm( {\n\t\t\tmodel: this.model\n\t\t} );\n\n\t\tthis.$el.after( _form.render().$el );\n\n\t\tthis.edit_form = _form;\n\t\tthis.edit_form\n\t\t    .on( 'save', function () {\n\t\t\t    this.$( '.tva-items-names' ).html( this.model.getItemsToString() );\n\t\t\t    this.edit_form = null;\n\t\t    }, this )\n\t\t    .on( 'cancel', function () {\n\t\t\t    this.edit_form = null;\n\t\t    }, this );\n\t}\n} );\n//# sourceURL=workspace/admin/js/views/course/access-rules/rule.js")}},author:{"biography.js":function(exports,module,require){eval("( function () {\n\n\tvar baseView = require( './../../base' ),\n\t\tauthor_model = require( './../../../models/author' );\n\n\tvar imgNormalState = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/author/image-normal-state' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tvar imgEmptyState = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/author/image-empty-state' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/author/biography' ),\n\t\tevents: {\n\t\t\t'click .tva-author-image': 'addAuthorImage',\n\t\t\t'click .tva-remove-author-cover-image': 'removeImage',\n\t\t\t'input #tva-author-description': 'setBiography',\n\t\t\t'change #tva-author-biography': 'onBiographyChange'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\n\t\t\tThriveApp.globals.active_course.on( 'tva_author_changed', function ( model ) {\n\t\t\t\tself.model = model;\n\t\t\t\tself.render();\n\t\t\t} )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderAuthorImage();\n\n\t\t\tvar $select = this.$( '#tva-author-biography' );\n\n\t\t\t$select.attr( 'value', this.model.get( 'biography_type' ) );\n\n\t\t\tthis.model.get( 'biography_type' ) === 'wordpress_bio'\n\t\t\t\t? this.$( '.tva-textarea-holder' ).hide()\n\t\t\t\t: this.renderMCE( 'tva-author-description', 'custom_biography' );\n\n\t\t\tTVE_Dash.materialize( this.$el );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderMCE: function ( selector, prop ) {\n\t\t\tvar self = this;\n\n\t\t\tsetTimeout( function () {\n\t\t\t\tThriveApp.util.clearMCEEditor( selector );\n\t\t\t\tThriveApp.util.editorInit( selector, self.model, prop );\n\t\t\t\tTVE_Dash.materialize( self.$el );\n\t\t\t}, 0 );\n\t\t},\n\t\trenderAuthorImage: function () {\n\t\t\tvar view = this.model.get( 'url' ).length > 0 ? imgNormalState : imgEmptyState;\n\n\t\t\tnew view( {\n\t\t\t\tel: this.$( '.tva-author-image-holder' ),\n\t\t\t\tmodel: this.model\n\t\t\t} ).render();\n\t\t},\n\t\taddAuthorImage: function () {\n\t\t\tvar frame,\n\t\t\t\tself = this;\n\n\t\t\t// If the media frame already exists, reopen it.\n\t\t\tif ( frame ) {\n\t\t\t\tframe.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Create a new media frame\n\t\t\tframe = wp.media( {\n\t\t\t\ttitle: 'Select or Upload a Cover Image',\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: 'Use this Image'\n\t\t\t\t},\n\t\t\t\tlibrary: {type: 'image'},\n\t\t\t\tmultiple: false  // Set to true to allow multiple files to be selected\n\t\t\t} );\n\n\t\t\t// When an image is selected in the media frame...\n\t\t\tframe.on( 'select', function () {\n\t\t\t\tvar attachment = frame.state().get( 'selection' ).first().toJSON();\n\t\t\t\tself.model.set( {url: attachment.url} );\n\t\t\t\tself.renderAuthorImage();\n\t\t\t} );\n\n\t\t\t// Finally, open the modal on click\n\t\t\tframe.open();\n\t\t},\n\t\tonBiographyChange: function ( e ) {\n\t\t\tthis.model.set( {biography_type: e.currentTarget.value} );\n\n\t\t\tif ( this.model.get( 'biography_type' ) === 'custom_bio' ) {\n\t\t\t\tthis.$( '.tva-textarea-holder' ).show();\n\n\t\t\t\tthis.renderMCE( 'tva-author-description', 'custom_biography' );\n\t\t\t} else {\n\t\t\t\tthis.$( '.tva-textarea-holder' ).hide();\n\t\t\t}\n\t\t},\n\t\tremoveImage: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tthis.model.set( {url: ''} );\n\t\t\tthis.renderAuthorImage();\n\t\t},\n\t\tsetBiography: function ( e ) {\n\t\t\tthis.model.set( {custom_biography: e.currentTarget.value} );\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/author/biography.js")}},"content.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar utilsView = require( './utils' );\n\n\tmodule.exports = utilsView.extend( {\n\t\tclassName: '',\n\t\ttemplate: TVE_Dash.tpl( 'course/manage/course-content' ),\n\t\t$_list: null,\n\t\tnewOrder: [],\n\t\t/**\n\t\t * {Boolean}\n\t\t */\n\t\tupdated: false,\n\t\t/**\n\t\t * {Backbone.Model}\n\t\t */\n\t\treceiver_item_model: null,\n\t\tevents: {\n\t\t\t'click .tva-add-c-lesson': 'addLesson',\n\t\t\t'click .tva-add-chapter-single': 'addChapter',\n\t\t\t'click .tva-add-module-single': 'addModule'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\t\t\tthis.model.on( 'tva_apply_sortable', function () {\n\t\t\t\tself.applySortable();\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$( '.tva-content-container' ).empty();\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\t\t\tthis.renderContent();\n\t\t\tthis.applySortable();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderContent: function () {\n\t\t\tvar children = this.model.hasChildren();\n\n\t\t\tif ( ! children || ! ThriveApp.util.isCollection( this.model.get( children ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderList();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderList: function () {\n\t\t\tif ( this.$_list ) {\n\t\t\t\tthis.$_list.remove();\n\t\t\t}\n\n\t\t\tvar children = this.model.hasChildren(),\n\t\t\t\tview = require( './items-list' );\n\n\t\t\tthis.$_list = new view( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.model.get( children )\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-elements-container' ).prepend( this.$_list.render().$el );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderOne: function ( item, index ) {\n\t\t\tvar type = item.get( 'item_type' ).toLowerCase(),\n\t\t\t\tview = '';\n\n\t\t\tswitch ( item.get( 'item_type' ).toLowerCase() ) {\n\t\t\t\tcase 'module':\n\t\t\t\t\tview = require( '../module/module' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'chapter':\n\t\t\t\t\tview = require( '../chapter/chapter' );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'lesson':\n\t\t\t\t\tview = require( '../lesson/lesson' );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar $lastItem = this.$el.find( '.tva-' + type + '-item' ).last(),\n\t\t\t\tview = new view( {\n\t\t\t\t\tmodel: item,\n\t\t\t\t\tcollection: this.model.get( this.getPlural( type ) ),\n\t\t\t\t\tindex: index\n\t\t\t\t} );\n\n\t\t\tif ( $lastItem.length ) {\n\t\t\t\t$lastItem.after( view.render().$el );\n\t\t\t} else {\n\t\t\t\tthis.$el.prepend( view.render().$el );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdateOrder: function () {\n\t\t\tvar self = this;\n\t\t\tthis.updated = true;\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce,\n\t\t\t\t\t'X-TVA-Request-ID': ThriveApp.request_id\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.courses + '/update_posts_order/',\n\t\t\t\tdata: {\n\t\t\t\t\titems: self.newOrder,\n\t\t\t\t\tcourse_id: self.model.get( 'ID' )\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.model.set( response );\n\t\t\t\t\tself.model.set_data();\n\n\t\t\t\t\tThriveApp.globals.course_elements = ThriveApp.util.getCourseElements( ThriveApp.globals.active_course );\n\n\t\t\t\t\tif ( self.receiver_item_model ) {\n\t\t\t\t\t\tThriveApp.globals.course_elements.get( 'all' ).findWhere(\n\t\t\t\t\t\t\t{ID: self.receiver_item_model.get( 'ID' )} ).set( {expanded: true}\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// expand the module if needed\n\t\t\t\t\t\tif ( self.receiver_item_model.get( 'post_parent' ) > 0 ) {\n\t\t\t\t\t\t\tself.model.get( 'modules' ).findWhere(\n\t\t\t\t\t\t\t\t{ID: self.receiver_item_model.get( 'post_parent' )} ).set( {expanded: true}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.receiver_item_model = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tself.render();\n\t\t\t\t}\n\t\t\t} ).always( function () {\n\t\t\t\tself.newOrder = [];\n\t\t\t\t$( '.tvd-material-tooltip' ).hide();\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\tapplySortable: function () {\n\t\t\t/**\n\t\t\t * When called this should always be a ThriveApp.views.CourseContent instance\n\t\t\t * and have ThriveApp.globals.active_course as model\n\t\t\t */\n\n\t\t\tthis._sortable();\n\t\t\tthis._droppable();\n\t\t},\n\t\t_sortable: function () {\n\t\t\tvar self = this;\n\n\t\t\tfunction show_position( event, ui ) {\n\t\t\t\tvar $placeholder = $( ui.placeholder );\n\n\t\t\t\tself.position = $placeholder.prevAll().not( ui.item ).length + 1;\n\n\t\t\t\t$placeholder.html( \"<div class='tvd-col tvd-s12 tva-inside-placeholder' style='height: 100px;'><span>\" + self.position + (\n\t\t\t\t\tThriveApp.t.n_suffix[ self.position ] ? ThriveApp.t.n_suffix[ self.position ] : ThriveApp.t.n_th\n\t\t\t\t) + ' ' + ThriveApp.t.position + \"</span></div>\" );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Sortable for modules\n\t\t\t */\n\t\t\tthis.$( '.tva-modules-section' ).sortable( {\n\t\t\t\tplaceholder: 'tva-sortable-placeholder',\n\t\t\t\titems: '.tva-module-item',\n\t\t\t\tforceHelperSize: true,\n\t\t\t\tdropOnEmpty: true,\n\t\t\t\trefreshPositions: true,\n\t\t\t\thandle: '.tva-drag-module',\n\t\t\t\tupdate: _.bind( self.updateModulesOrder, this ),\n\t\t\t\tchange: show_position,\n\t\t\t\tstart: function ( event, ui ) {\n\t\t\t\t\tvar expanded = self.model.get( 'modules' ).where( {expanded: true} );\n\n\t\t\t\t\tif ( expanded.length > 0 ) {\n\t\t\t\t\t\t_.each( expanded, function ( model ) {\n\t\t\t\t\t\t\tmodel.set( {expanded: false} );\n\t\t\t\t\t\t\tmodel.trigger( 'tva_render_content' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstop: function ( event, ui ) {\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Sortable for chapters\n\t\t\t */\n\t\t\tthis.$( '.tva-chapters-section' ).sortable( {\n\t\t\t\tconnectWith: this.$( '.tva-chapters-section' ),\n\t\t\t\tplaceholder: 'tva-sortable-placeholder',\n\t\t\t\titems: '.tva-chapter-item',\n\t\t\t\tforceHelperSize: true,\n\t\t\t\tdropOnEmpty: true,\n\t\t\t\trefreshPositions: true,\n\t\t\t\thandle: '.tva-drag-chapter',\n\t\t\t\tupdate: _.bind( self.updateChaptersOrder, this ),\n\t\t\t\tchange: show_position,\n\t\t\t\tstart: function ( event, ui ) {\n\t\t\t\t\tself.updated = false;\n\t\t\t\t\tui.helper.outerHeight();\n\t\t\t\t\tshow_position( event, ui );\n\t\t\t\t\t$( 'body' ).addClass( 'tva-sorting' );\n\n\t\t\t\t\tself.$( '.tva-module-has-lessons' ).parent().addClass( 'tva-module-disabled' );\n\n\t\t\t\t\tvar expanded = ThriveApp.globals.course_elements.get( 'chapters' ).where( {expanded: true} );\n\n\t\t\t\t\tif ( expanded.length > 0 ) {\n\t\t\t\t\t\t_.each( expanded, function ( model ) {\n\t\t\t\t\t\t\tmodel.set( {expanded: false} );\n\t\t\t\t\t\t\tmodel.trigger( 'tva_render_content' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstop: function ( event, ui ) {\n\t\t\t\t\tself.$( '.tva-module-has-lessons' ).parent().removeClass( 'tva-module-disabled' );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Sortable for lessons\n\t\t\t */\n\t\t\tthis.$( '.tva-lessons-section' ).sortable( {\n\t\t\t\tconnectWith: this.$( '.tva-lessons-section' ),\n\t\t\t\tplaceholder: 'ui-sortable-placeholder',\n\t\t\t\titems: '.tva-lesson-item',\n\t\t\t\tforceHelperSize: true,\n\t\t\t\tdropOnEmpty: true,\n\t\t\t\trefreshPositions: true,\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\thandle: '.tva-drag-card',\n\t\t\t\tupdate: _.bind( self.updateLessonsOrder, this ),\n\t\t\t\tchange: show_position,\n\t\t\t\tstart: function ( event, ui ) {\n\t\t\t\t\tself.updated = false;\n\n\t\t\t\t\tself.$( '.tva-chapter-item' ).droppable( {\n\t\t\t\t\t\taccept: '.tva-lesson-item',\n\t\t\t\t\t\thoverClass: 'tva-drop-hover',\n\t\t\t\t\t\tdrop: function ( event, ui ) {\n\t\t\t\t\t\t\tvar id = parseInt( self.$( event.target ).attr( 'data-id' ) );\n\n\t\t\t\t\t\t\tself.receiver_item_model = new ThriveApp.models.Chapter( JSON.parse( JSON.stringify(\n\t\t\t\t\t\t\t\tThriveApp.globals.course_elements.get( 'chapters' ).findWhere( {ID: id} )\n\t\t\t\t\t\t\t) ) );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tover: function ( event, ui ) {\n\t\t\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\t\t\tself.eventTarget = event.target;\n\n\t\t\t\t\t\t\t\tif ( self.eventTarget === event.target ) {\n\t\t\t\t\t\t\t\t\tself.$( event.target ).find( '.tva-drag-chapter' ).remove();\n\t\t\t\t\t\t\t\t\tself.$( event.target ).find( '.tva-lessons-section' )\n\t\t\t\t\t\t\t\t\t    .css( 'min-height', self.$( ui.draggable ).height() );\n\n\t\t\t\t\t\t\t\t\tself.$( event.target )\n\t\t\t\t\t\t\t\t\t    .find( '.tva-elements-container' )\n\t\t\t\t\t\t\t\t\t    .slideDown( 'slow', function () {\n\t\t\t\t\t\t\t\t\t\t    self.$( '.tva-lessons-section' ).sortable( 'refresh' );\n\t\t\t\t\t\t\t\t\t    } );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, self.model.hasChildren() === 'modules' ? 0 : 1000 );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tout: function ( event, ui ) {\n\t\t\t\t\t\t\tself.receiver_item_model = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\tui.helper.outerHeight();\n\t\t\t\t\tshow_position( event, ui );\n\t\t\t\t\t$( 'body' ).addClass( 'tva-sorting' );\n\t\t\t\t},\n\t\t\t\tstop: function ( event, ui ) {\n\t\t\t\t\tif ( ! self.receiver_item_model ) {\n\t\t\t\t\t\tself.$( '.tva-lessons-section' ).sortable( 'cancel' );\n\t\t\t\t\t\tThriveApp.globals.moved_item = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\t$( 'body' ).removeClass( 'tva-sorting' );\n\t\t\t\t\t}, 200 );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\t_droppable: function () {\n\t\t\tvar self = this;\n\n\t\t\tthis.$( '.tva-module-item' ).droppable( {\n\t\t\t\taccept: '.tva-chapter-item, .tva-lesson-item',\n\t\t\t\thoverClass: 'tva-drop-hover',\n\t\t\t\tdrop: function ( event, ui ) {\n\t\t\t\t\tvar id = parseInt( self.$( event.target ).attr( 'data-id' ) );\n\n\t\t\t\t\tself.receiver_item_model = new ThriveApp.models.Module( JSON.parse( JSON.stringify(\n\t\t\t\t\t\tThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: id} )\n\t\t\t\t\t) ) );\n\t\t\t\t},\n\t\t\t\tover: function ( event, ui ) {\n\t\t\t\t\tself.eventTarget = event.target;\n\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\tif ( self.eventTarget === event.target ) {\n\t\t\t\t\t\t\tvar $elements = self.$( event.target ).find( '.tva-elements-container:first' ),\n\t\t\t\t\t\t\t\tslide = self.$( $elements ).hasClass( 'tva-module-has-lessons' ) ? self.isLesson( ThriveApp.globals.moved_item ) : true;\n\n\t\t\t\t\t\t\tself.$( $elements ).find( '.tva-childs-section' ).css( 'min-height', '10px' );\n\n\t\t\t\t\t\t\tif ( slide ) {\n\t\t\t\t\t\t\t\tself.$( event.target ).find( '.tva-drag-module' ).remove();\n\t\t\t\t\t\t\t\tself.$( $elements )\n\t\t\t\t\t\t\t\t    .css( 'min-height', self.$( ui.draggable ).height() )\n\t\t\t\t\t\t\t\t    .slideDown( 'slow', function () {\n\t\t\t\t\t\t\t\t\t    self.$( '.tva-chapters-section' ).sortable( 'refresh' );\n\t\t\t\t\t\t\t\t\t    self.$( '.tva-lessons-section' ).sortable( 'refresh' );\n\t\t\t\t\t\t\t\t    } );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1000 );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\taddLesson: function () {\n\t\t\tthis.lesson_model = new ThriveApp.models.Lesson( {\n\t\t\t\torder: this.model.get( 'lessons' ).length,\n\t\t\t\tcourse_id: this.model.get( 'term_id' ) ? this.model.get( 'term_id' ) : this.model.get( 'course_id' ),\n\t\t\t\tlesson_type: ThriveApp.globals.active_course.get( 'lesson_template' ).lesson_type,\n\t\t\t\tpost_media: ThriveApp.globals.active_course.get( 'lesson_template' ).post_media,\n\t\t\t\tcomment_status: ThriveApp.globals.active_course.get( 'lesson_template' ).comment_status\n\t\t\t} );\n\n\t\t\tthis.afterAddLessonModel();\n\n\t\t\tthis.modal( ThriveApp.modals.LessonModalEditor, {\n\t\t\t\tmodel: this.lesson_model,\n\t\t\t\tcollection: this.model.get( 'lessons' ),\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal',\n\t\t\t\tviewName: 'LessonEditor'\n\t\t\t} );\n\t\t},\n\t\taddChapter: function ( e ) {\n\t\t\tthis.chapter_model = new ThriveApp.models.Chapter( {\n\t\t\t\torder: this.model.get( 'chapters' ).length,\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\tcomment_status: this.model.get( 'comment_status' )\n\t\t\t} );\n\n\t\t\tthis.afterAddChapterModel();\n\n\t\t\tthis.modal( ThriveApp.modals.ChapterModalEditor, {\n\t\t\t\tmodel: this.chapter_model,\n\t\t\t\tcollection: this.model.get( 'chapters' ),\n\t\t\t\tmodule: this.model,\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal',\n\t\t\t\tviewName: 'ChapterEditor'\n\t\t\t} );\n\t\t},\n\t\taddModule: function () {\n\t\t\tthis.module_model = new ThriveApp.models.Module( {\n\t\t\t\torder: this.model.get( 'modules' ).length,\n\t\t\t\tcourse_id: this.model.get( 'ID' ),\n\t\t\t\tcomment_status: this.model.get( 'comment_status' )\n\t\t\t} );\n\n\t\t\tthis.afterAddModuleModel();\n\n\t\t\tthis.modal( ThriveApp.modals.ModuleModalEditor, {\n\t\t\t\tmodel: this.module_model,\n\t\t\t\tcollection: this.model.get( 'modules' ),\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal',\n\t\t\t\tviewName: 'ModuleEditor'\n\t\t\t} );\n\t\t},\n\t\tafterAddLessonModel: function () {\n\t\t},\n\t\tafterAddChapterModel: function () {\n\t\t},\n\t\tafterAddModuleModel: function () {\n\t\t},\n\t\t/**\n\t\t *\n\t\t * @param {Backbone.Model} model\n\t\t * @param {String} collection_name\n\t\t * @param {Boolean} add\n\t\t */\n\t\tupdateCollection: function ( model, collection_name, add ) {\n\n\t\t\tvar values = [ 'ID', 'order', 'post_type', 'post_parent' ];\n\n\t\t\tmodel.get( collection_name ).remove( ThriveApp.globals.moved_item, {silent: true} );\n\n\t\t\tif ( add === true ) {\n\t\t\t\tmodel.get( collection_name ).add( ThriveApp.globals.moved_item, {at: this.position - 1} );\n\t\t\t}\n\n\t\t\tmodel.get( collection_name ).updateValues( {order: ''} );\n\n\t\t\t/** {Backbone.Collection} */\n\t\t\tvar collection = model.get( collection_name );\n\t\t\tcollection.sort();\n\n\t\t\tthis.newOrder = collection.pluckValues( values ).concat( this.newOrder );\n\t\t},\n\t\t/**\n\t\t *\n\t\t * @param {String} items\n\t\t */\n\t\tupdateItemsOrder: function ( items ) {\n\t\t\tthis.updateCollection( this.model, items, true );\n\t\t\tThriveApp.globals.moved_item = null;\n\t\t\tthis.updateOrder();\n\t\t},\n\t\tupdateModulesOrder: function () {\n\t\t\tthis.updateItemsOrder( 'modules' )\n\t\t},\n\t\tupdateChaptersOrder: function () {\n\t\t\tif ( this.model.hasChildren() === 'chapters' ) {\n\t\t\t\tthis.updateItemsOrder( 'chapters' );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Because we may move a chapter from one module to another sortable will trigger change event twice,\n\t\t\t * for each item involved in move action. So here we ensure a single execution!\n\t\t\t */\n\t\t\tif ( this.updated === true ) {\n\t\t\t\tthis.updated = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! this.receiver_item_model ) {\n\t\t\t\tthis.render();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Here we know for sure that we either move chapter from one module to another or within the same module\n\t\t\t */\n\t\t\tif ( this.isModule( this.receiver_item_model ) ) {\n\n\t\t\t\t/**\n\t\t\t\t * Cancel the sortable if a chapter is dropped over a module with lessons\n\t\t\t\t */\n\t\t\t\tif ( this.isChapter( ThriveApp.globals.moved_item ) && this.receiver_item_model.hasChildren() === 'lessons' ) {\n\t\t\t\t\tthis.$( '.tva-chapters-section' ).sortable( 'cancel' );\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif ( this.receiver_item_model.hasChildren() === 'chapters' && this.isLesson( ThriveApp.globals.moved_item ) ) {\n\t\t\t\t\tthis.$( '.tva-lessons-section' ).sortable( 'cancel' );\n\t\t\t\t\tthis.render();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar sender_module = this.model.get( 'modules' ).findWhere( {ID: ThriveApp.globals.moved_item.get( 'post_parent' )} );\n\n\t\t\t\tThriveApp.globals.moved_item.set( {post_parent: this.receiver_item_model.get( 'ID' )} );\n\n\t\t\t\tif ( sender_module.get( 'ID' ) !== this.receiver_item_model.get( 'ID' ) ) {\n\t\t\t\t\tthis.updateCollection( sender_module, 'chapters', false );\n\t\t\t\t}\n\n\t\t\t\tthis.updateCollection( this.receiver_item_model, 'chapters', true );\n\t\t\t}\n\n\t\t\tThriveApp.globals.moved_item = null;\n\t\t\tthis.updateOrder();\n\n\t\t\treturn this;\n\t\t},\n\t\tupdateLessonsOrder: function () {\n\t\t\tif ( this.model.hasChildren() === 'lessons' ) {\n\t\t\t\tthis.updateItemsOrder( 'lessons' );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this.updated === true ) {\n\t\t\t\tthis.updated = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! this.receiver_item_model ) {\n\t\t\t\tthis.render();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Make sure that the receiver item is a chapter\n\t\t\t */\n\t\t\tif ( this.receiver_item_model.hasChildren() === 'chapters' && ! this.isChapter( ThriveApp.globals.moved_item ) ) {\n\t\t\t\tthis.$( '.tva-lessons-section' ).sortable( 'cancel' );\n\t\t\t\tthis.render();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar from_parent = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: ThriveApp.globals.moved_item.get( 'post_parent' )} );\n\n\t\t\tThriveApp.globals.moved_item.set( {post_parent: this.receiver_item_model.get( 'ID' )} );\n\t\t\tthis.updateCollection( this.receiver_item_model, 'lessons', true );\n\n\t\t\tif ( from_parent.get( 'ID' ) !== this.receiver_item_model.get( 'ID' ) ) {\n\t\t\t\tthis.updateCollection( from_parent, 'lessons', false );\n\t\t\t}\n\n\t\t\tThriveApp.globals.moved_item = null;\n\t\t\tthis.updateOrder();\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/content.js")},"dashboard.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar utils = require( './utils' ),\n\t\tcontentView = require( './content' ),\n\t\teditView = require( './edit' ),\n\t\trestrictionsView = require( './restrictions' ),\n\t\tdetailsView = require( './details' );\n\n\t/**\n\t * Edit course and lessons view\n\t */\n\tmodule.exports = utils.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'course/manage/manage' ),\n\t\tevents: {\n\t\t\t'click .tva-publish-course': 'changeCourseStatus',\n\t\t\t'click .tva-edit-course-name': 'editTitle',\n\t\t\t'click .tva-delete-lessons': 'bulkDeleteItems',\n\t\t\t'click #tva-select-all-items': 'selectAll',\n\t\t\t'click .tva-publish-lessons': 'bulkPublishItems',\n\t\t\t'click .tva-unpublish-lessons': 'bulkUnPublishItems',\n\t\t\t'click .tva-move-items': 'bulkMoveItems',\n\t\t\t'click .tva-add-content': 'addContent',\n\t\t\t'click .tva-group-into-chapter': 'bulkChapterGroup',\n\t\t\t'click .tva-group-into-module': 'bulkModuleGroup',\n\t\t\t'click .tva-tab-item': 'setActiveTab'\n\t\t},\n\t\tcontent: null,\n\t\tallowedItems: [ 'module', 'chapter', 'lesson' ],\n\t\tselect_all: false,\n\t\tactiveTab: 'content',\n\t\tinitialize: function ( options ) {\n\t\t\tthis.activeTab = options.activeTab ? options.activeTab : this.activeTab;\n\n\t\t\tvar self = this;\n\n\t\t\tthis.model.on( 'tva_after_action', function ( args ) {\n\t\t\t\tself.afterAction( args );\n\t\t\t\tself.select_all = false;\n\t\t\t\tself.render();\n\t\t\t} );\n\t\t\tthis.listenTo( this.model.get( 'lessons' ), 'remove', function () {\n\t\t\t\tif ( self.model.get( 'lessons' ).length === 0 ) {\n\t\t\t\t\tself.render();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.model.on( 'reset_select_all', function () {\n\t\t\t\tself.select_all = false;\n\t\t\t} );\n\t\t\tthis.model.on( 'tva_render_content', function ( args ) {\n\t\t\t\tself.model.checkStatus();\n\t\t\t\tself.render();\n\t\t\t} );\n\n\t\t\tthis.model.on( 'render_bulk_actions', function () {\n\t\t\t\tself.renderBulkActions();\n\t\t\t} );\n\n\t\t\tthis.listenTo( ThriveApp.globals.settings, 'change:comment_status', this.onCommentStatusChange );\n\t\t},\n\t\trender: function () {\n\t\t\tvar contentTab = this.model.hasChildren(),\n\t\t\t\ttabName = contentTab ? ThriveApp.util.upperFirst( contentTab ) : 'Content',\n\t\t\t\tself = this;\n\n\t\t\tthis.$el.html( this.template( {model: this.model, select_all: this.select_all, contentTab: tabName} ) );\n\t\t\tthis.renderDetails();\n\t\t\tthis.renderActiveTab();\n\t\t\tthis.$el.find( '[data-tab=\"' + this.activeTab + '\"]' ).addClass( 'tva-active-tab' );\n\n\t\t\tif ( ! this.model.get( 'ID' ) ) {\n\t\t\t\tthis.$el.find( '[data-tab=\"content\"]' ).addClass( 'tva-disable-tab' );\n\t\t\t\tthis.$( '.tva-preview-course, .tva-edit-course-name' ).hide();\n\t\t\t}\n\n\t\t\t$( document ).scroll( function () {\n\t\t\t\tif ( self.activeTab === 'content' ) {\n\t\t\t\t\tThriveApp.util.makeBulkActionsStiky();\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.$title = this.$( '.tva-main-course-title' );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderActiveTab: function () {\n\t\t\tvar fn = 'render' + ThriveApp.util.upperFirst( this.activeTab ) + 'Tab';\n\n\t\t\tif ( typeof this[ fn ] === 'function' ) {\n\t\t\t\tthis[ fn ]();\n\t\t\t}\n\t\t},\n\t\trenderContentTab: function () {\n\t\t\tthis.$( '.tva-tab' ).hide();\n\n\t\t\tif ( this.$( '.tva-content-tab' ).length ) {\n\t\t\t\tthis.$( '.tva-content-tab' ).show();\n\t\t\t\tthis.$( '.tva-add-content' ).show();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$( '.tva-active-tab-content' ).append( '<div class=\"tva-tab tva-content-tab\"></div>' );\n\n\t\t\tthis.renderBulkActions();\n\n\t\t\tnew contentView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-content-tab' )\n\t\t\t} ).render();\n\t\t},\n\t\trenderDetailsTab: function () {\n\t\t\tthis.$( '.tva-tab' ).hide();\n\t\t\tthis.$( '.tva-add-content' ).hide();\n\n\t\t\tif ( this.$( '.tva-details-tab' ).length ) {\n\t\t\t\tthis.$( '.tva-details-tab' ).show();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$( '.tva-active-tab-content' ).append( '<div class=\"tva-tab tva-details-tab\"></div>' );\n\n\n\t\t\tnew editView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-details-tab' )\n\t\t\t} ).render();\n\t\t},\n\t\trenderRestrictionsTab: function () {\n\t\t\tthis.$( '.tva-tab' ).hide();\n\t\t\tthis.$( '.tva-add-content' ).hide();\n\n\t\t\tif ( this.$( '.tva-restrictions-tab' ).length ) {\n\t\t\t\tthis.$( '.tva-restrictions-tab' ).show();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$( '.tva-active-tab-content' ).append( '<div class=\"tva-tab tva-restrictions-tab\"></div>' );\n\n\t\t\tnew restrictionsView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-restrictions-tab' )\n\t\t\t} ).render();\n\t\t},\n\t\tsetActiveTab: function ( e ) {\n\t\t\tthis.tvd_clear_errors();\n\t\t\tvar tab = e.currentTarget.getAttribute( 'data-tab' );\n\n\t\t\tif ( this.activeTab === tab ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * we dont have to validate the model if the user is on Content Tab\n\t\t\t */\n\t\t\tif ( this.activeTab !== 'content' && ! this.model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.model );\n\t\t\t}\n\n\t\t\tthis.activeTab = tab;\n\t\t\tthis.$( '.tva-tab-item' ).removeClass( 'tva-active-tab' );\n\t\t\tthis.$( e.currentTarget ).addClass( 'tva-active-tab' );\n\t\t\tthis.renderActiveTab();\n\t\t},\n\t\trenderBulkActions: function () {\n\t\t\tThriveApp.globals.bulk_action_model = new ThriveApp.models.BulkActions();\n\n\t\t\tif ( this.model.hasChildren() ) {\n\t\t\t\tThriveApp.globals.bulk_action_model.get( 'actions' ).push( 'selectAll' );\n\t\t\t}\n\n\t\t\tnew ThriveApp.views.RenderBulkActions( {\n\t\t\t\tel: this.$( '.tva-content-tab' ),\n\t\t\t\tmodel: ThriveApp.globals.bulk_action_model,\n\t\t\t\tselect_all: this.select_all\n\t\t\t} ).render();\n\n\t\t\tsetTimeout( function () {\n\t\t\t\tThriveApp.util.makeBulkActionsStiky();\n\t\t\t}, 100 );\n\t\t},\n\t\trenderDetails: function () {\n\t\t\tvar view = new detailsView( {\n\t\t\t\tel: this.$( '.tva-course-section' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\tafterAction: function ( args ) {\n\t\t\tvar fn = 'after' + ThriveApp.util.upperFirst( args.action );\n\t\t\tthis[ fn ]( args );\n\n\t\t\treturn this;\n\t\t},\n\t\tafterDelete: function ( args ) {\n\t\t\tvar course = args.model;\n\n\t\t\tthis.model.set( course );\n\t\t\tthis.model.set_data();\n\n\t\t\tThriveApp.globals.course_elements = ThriveApp.util.getCourseElements( this.model );\n\n\t\t\tThriveApp.globals.bulk_action_model.clear().set( ThriveApp.globals.bulk_action_model.defaults );\n\t\t\tThriveApp.globals.selected_items.reset();\n\t\t},\n\t\tafterPublish: function () {\n\t\t\tThriveApp.globals.selected_items.updateValues( {checked: false} );\n\t\t\tThriveApp.globals.selected_items.reset();\n\t\t},\n\t\tafterUnpublish: function () {\n\t\t\tThriveApp.globals.selected_items.updateValues( {checked: false} );\n\t\t\tThriveApp.globals.active_course.checkStatus();\n\t\t\tThriveApp.globals.selected_items.reset();\n\t\t},\n\t\tafterMove: function ( args ) {\n\t\t\tvar self = this;\n\n\t\t\t_.each( args.model, function ( model ) {\n\t\t\t\tvar course = ThriveApp.globals.courses.findWhere( {ID: parseInt( model.ID )} );\n\t\t\t\tcourse.set( model );\n\t\t\t\tcourse.set_data();\n\n\t\t\t\tif ( course.get( 'ID' ) === self.model.get( 'ID' ) ) {\n\t\t\t\t\tself.model = course;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tThriveApp.globals.selected_items.updateValues( {checked: false} );\n\t\t\tThriveApp.globals.bulk_action_model.clear().set( ThriveApp.globals.bulk_action_model.defaults );\n\t\t\tThriveApp.globals.selected_items.reset();\n\n\t\t\tThriveApp.globals.course_elements = ThriveApp.util.getCourseElements( ThriveApp.globals.active_course );\n\t\t},\n\t\tafterGroup: function ( args ) {\n\t\t\tThriveApp.globals.bulk_action_model.clear().set( ThriveApp.globals.bulk_action_model.defaults );\n\t\t\tThriveApp.globals.active_course.set( JSON.parse( JSON.stringify( args.model ) ) );\n\t\t\tThriveApp.globals.active_course.set_data();\n\t\t\tThriveApp.globals.selected_items.reset();\n\n\t\t\tThriveApp.globals.course_elements = ThriveApp.util.getCourseElements( ThriveApp.globals.active_course );\n\t\t},\n\t\tonCommentStatusChange: function () {\n\t\t\tvar children = this.model.hasChildren();\n\n\t\t\tif ( children ) {\n\t\t\t\tthis.model.get( children ).updateValues( {comment_status: this.model.get( 'comment_status' )}, true )\n\t\t\t}\n\n\t\t\tthis.model.set( {comment_status: ThriveApp.globals.settings.get( 'comment_status' )} );\n\t\t},\n\t\tselectAll: function ( e ) {\n\t\t\tvar checked = e.currentTarget.checked,\n\t\t\t\tchildren = this.model.hasChildren();\n\n\t\t\tthis.model.get( children ).each( function ( model ) {\n\t\t\t\tThriveApp.globals.selected_items.checkItems( model, checked );\n\t\t\t} );\n\n\t\t\tthis.select_all = checked;\n\n\t\t\tthis.renderBulkActions();\n\t\t},\n\t\teditTitle: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tvar self = this,\n\t\t\t\tedit_btn = this.$el.find( '.tva-edit-course-name' ),\n\t\t\t\tedit_model = new Backbone.Model( {\n\t\t\t\t\ttitle: this.model.get( 'name' ),\n\t\t\t\t\trequired: true\n\t\t\t\t} );\n\t\t\tedit_btn.hide();\n\t\t\tedit_model.on( 'change:value', function () {\n\t\t\t\tself.model.set( {\n\t\t\t\t\tname: edit_model.get( 'value' ),\n\t\t\t\t\tslug: ThriveApp.util.slugify( edit_model.get( 'value' ), \"-\" ).toLowerCase()\n\t\t\t\t} );\n\t\t\t\tself.save.apply( self, arguments );\n\t\t\t\tself.$title.show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).hide();\n\t\t\t\tedit_btn.css( 'display', 'inline-block' );\n\t\t\t\tself.$title.text( edit_model.get( 'value' ) );\n\t\t\t\tself.$( '.tva-msg' ).addClass( 'tva-hide' );\n\t\t\t} );\n\t\t\tedit_model.on( 'tvu_no_change', function () {\n\t\t\t\tself.$title.html( self.model.get( 'name' ) ).show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).hide();\n\t\t\t\tedit_btn.css( 'display', 'inline-block' );\n\t\t\t\tself.$( '.tva-msg' ).addClass( 'tva-hide' );\n\t\t\t} );\n\n\t\t\tif ( this.textEdit ) {\n\t\t\t\tthis.textEdit.undelegateEvents();\n\t\t\t\tthis.textEdit.$el.find( '.tva-inline-edit' ).remove();\n\t\t\t}\n\n\t\t\tthis.textEdit = new ThriveApp.views.InputTitle( {\n\t\t\t\tel: this.$el.find( '.tva-course-title-holder' ),\n\t\t\t\ttagName: 'div',\n\t\t\t\tmethod: 'append'\n\t\t\t} );\n\n\t\t\tthis.textEdit.model = edit_model;\n\t\t\tthis.$title.hide();\n\t\t\tthis.textEdit.render();\n\t\t\tthis.textEdit.focus();\n\t\t\tthis.$( '.tva-msg' ).removeClass( 'tva-hide' );\n\n\t\t\tthis.textEdit.$el.find( 'input' ).on( 'keyup', function ( e ) {\n\t\t\t\tself.$( '#tva-course-slug' ).val( e.currentTarget.value );\n\t\t\t} )\n\t\t},\n\t\tchangeCourseStatus: function () {\n\t\t\tvar current = this.model.get( 'status' ),\n\t\t\t\tchilds = this.model.hasChildren();\n\n\t\t\tthis.model.set( {update_sendowl_products: true} );\n\t\t\tif ( current === 'publish' ) {\n\t\t\t\tthis.model.set( {status: 'draft'} );\n\t\t\t\tthis.save();\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif ( ! childs ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.NumberLessons );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar collection = this.model.get( childs ),\n\t\t\t\tpublished_item = collection.findWhere( {post_status: 'publish'} );\n\n\t\t\tif ( ! published_item ) {\n\t\t\t\tif ( childs === 'modules' ) {\n\t\t\t\t\tTVE_Dash.err( ThriveApp.t.NoPublishedModule );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tTVE_Dash.err( ThriveApp.t.NumberLessons );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.model.set( {status: current == 'draft' ? 'publish' : 'draft'} );\n\t\t\tthis.save();\n\n\t\t\treturn this\n\t\t},\n\t\tbulkPublishItems: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar valid_ids = [];\n\t\t\tThriveApp.globals.selected_items.each( function ( model ) {\n\t\t\t\tif ( model.get( 'type' ) === 'lesson' && model.get( 'post_status' ) === 'draft' ) {\n\t\t\t\t\tvalid_ids.push( model.get( 'ID' ) );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( valid_ids.length > 0 ) {\n\t\t\t\tthis.saveBulkActions( 'publish', valid_ids );\n\t\t\t} else {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t}\n\t\t},\n\t\tbulkUnPublishItems: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar valid_ids = [];\n\t\t\tThriveApp.globals.selected_items.each( function ( model ) {\n\t\t\t\tif ( model.get( 'type' ) === 'lesson' && model.get( 'post_status' ) === 'publish' ) {\n\t\t\t\t\tvalid_ids.push( model.get( 'ID' ) );\n\t\t\t\t}\n\t\t\t} );\n\n\n\t\t\tif ( valid_ids.length > 0 ) {\n\t\t\t\tthis.saveBulkActions( 'unpublish', valid_ids );\n\t\t\t} else {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t}\n\t\t},\n\t\tbulkMoveItems: function () {\n\t\t\tthis.openModal( ThriveApp.modals.ConfirmBulkMove, {\n\t\t\t\tcollection: ThriveApp.globals.courses,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\tbulkDeleteItems: function () {\n\t\t\tthis.openModal( ThriveApp.modals.ConfirmBulkDelete, {\n\t\t\t\tmodel: ThriveApp.globals.bulk_action_model,\n\t\t\t\tclassName: 'tva-delete-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\tbulkChapterGroup: function () {\n\t\t\tthis.openModal( ThriveApp.modals.ConfirmChapterGroup, {\n\t\t\t\tgroup_type: 'chapter',\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\tbulkModuleGroup: function () {\n\t\t\tthis.openModal( ThriveApp.modals.ConfirmModuleGroup, {\n\t\t\t\tgroup_type: 'module',\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\taddContent: function () {\n\t\t\tthis.openModal( ThriveApp.modals.AddContentModal, {\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal tva-extra-space'\n\t\t\t} );\n\t\t},\n\t\tsaveBulkActions: function ( action, data ) {\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce,\n\t\t\t\t\t'X-TVA-Request-ID': ThriveApp.request_id\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.courses + '/bulk_action/',\n\t\t\t\tdata: {\n\t\t\t\t\taction: action,\n\t\t\t\t\titems: data,\n\t\t\t\t\tcourse_id: this.model.get( 'ID' )\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tvar post_status = action === 'unpublish' ? 'draft' : 'publish';\n\n\t\t\t\t_.each( response, function ( id ) {\n\t\t\t\t\tvar element = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: id} );\n\n\t\t\t\t\tif ( element ) {\n\t\t\t\t\t\telement.set( {post_status: post_status} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tself.model.trigger( 'tva_after_action', {action: action} );\n\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tsave: function () {\n\t\t\tthis.tvd_clear_errors();\n\t\t\t//Todo: Some validation to the fields is required\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this,\n\t\t\t\txhr = self.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.renderDetails();\n\n\t\t\t\t\t\tThriveApp.globals.available_settings.fetch().success( function ( response, status, options ) {\n\t\t\t\t\t\t\tThriveApp.globals.settings.set( {\n\t\t\t\t\t\t\t\tiframe_url: ThriveApp.globals.settings.get( 'preview_url' ),\n\t\t\t\t\t\t\t\tpreview_url: response.preview_url\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/dashboard.js")},"details.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './../base' );\n\n\tvar selectView = require( './../select' );\n\n\tvar author_model = require( './../../models/author' );\n\n\tvar topicView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/topic/topic' ),\n\t\trender: function () {\n\t\t\tthis.model.setListRequiredFields();\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tvar selectedTopicView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/topic/selected-topic' ),\n\t\trender: function () {\n\t\t\tthis.model.setListRequiredFields();\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tvar selectedDifficultyView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/topic/selected-difficulty' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\n\tvar listTopicView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/topic/list-topic' ),\n\t\tevents: {\n\t\t\t'input #tva-search-topics': 'search'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.args = options.args;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tthis.renderTopics( this.collection );\n\n\t\t\tif ( this.collection.length >= 20 ) {\n\t\t\t\tthis.$( '.tva-search-topics' ).removeClass( 'tva-hide' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trenderTopics: function ( collection ) {\n\t\t\tcollection.each( function ( model ) {\n\t\t\t\tnew this.args.singleItemView( {\n\t\t\t\t\t\tmodel: model,\n\t\t\t\t\t\tel: this.$( '.tva-topics-list' )\n\t\t\t\t\t}\n\t\t\t\t).render();\n\t\t\t}, this );\n\t\t},\n\t\tsearch: function ( e ) {\n\t\t\tvar rez = this.collection.filter( function ( model ) {\n\t\t\t\treturn model.get( 'name' ).toLowerCase().includes( e.currentTarget.value )\n\t\t\t} );\n\n\t\t\tvar collection = new Backbone.Collection( rez );\n\t\t\tthis.$( '.tva-topics-list' ).empty();\n\t\t\tthis.renderTopics( collection );\n\t\t}\n\t} );\n\n\tvar difficultyView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'level-item' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\tif ( ! this.model.get( 'ID' ) ) {\n\t\t\t\tthis.$( '.tva-course-level-delete' ).addClass( 'tva-hide' )\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tvar listDifficultyView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/difficulty' ),\n\t\tevents: {\n\t\t\t'click .tva-add-course-level': 'addLevel',\n\t\t\t'click .tva-save-course-level': 'saveLevel',\n\t\t\t'click .tva-course-level-delete': 'deleteLevel'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.args = options.args;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\tthis.collection.each( function ( model ) {\n\t\t\t\tnew this.args.singleItemView( {\n\t\t\t\t\t\tmodel: model,\n\t\t\t\t\t\tel: this.$( '.tva-difficulty-levels-list' )\n\t\t\t\t\t}\n\t\t\t\t).render();\n\t\t\t}, this );\n\n\t\t\treturn this;\n\t\t},\n\t\taddLevel: function () {\n\t\t\tthis.$( '.tvd-input-field, .tva-save-course-level' ).removeClass( 'tva-hide' );\n\t\t\tthis.$( '.tva-add-course-level' ).addClass( 'tva-hide' );\n\t\t},\n\t\tsaveLevel: function () {\n\n\t\t\tvar value = this.$( '#tva-add-level' ).val(),\n\t\t\t\telement = this.$( '#tva-add-level' ),\n\t\t\t\tmodel = new ThriveApp.models.Level( {name: value} ),\n\t\t\t\tself = this;\n\n\t\t\tif ( ! model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( model );\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = model.save();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tmodel.set( 'ID', response.ID );\n\t\t\t\t\tThriveApp.globals.levels.add( model );\n\t\t\t\t\tself.collection.add( model );\n\t\t\t\t\tself.render();\n\t\t\t\t\telement.val( '' );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tdeleteLevel: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar id = e.currentTarget.dataset.id,\n\t\t\t\tmodel = ThriveApp.globals.levels.findWhere( {ID: parseInt( id )} ),\n\t\t\t\tself = this;\n\n\t\t\tvar xhr = model.destroy();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tThriveApp.globals.levels.remove( model );\n\t\t\t\t\tself.collection.remove( model );\n\n\t\t\t\t\tif ( self.collection.length > 0 && model.get( 'ID' ) === self.model.get( 'level' ) ) {\n\t\t\t\t\t\tself.collection.first().set( {selected: true} )\n\t\t\t\t\t}\n\t\t\t\t\tself.render();\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/manage/course-details' ),\n\t\tevents: {\n\t\t\t'click .tva-course-author-title': 'showSearch'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\n\t\t\tthis.topicsCollection = new ThriveApp.collections.TopicsCollection( ThriveApp.globals.topics.toJSON() );\n\t\t\tthis.difficultyCollection = new ThriveApp.collections.Levels( ThriveApp.globals.levels.toJSON() );\n\n\t\t\tthis.listenTo( this.topicsCollection, 'change:selected', function ( model ) {\n\n\t\t\t\tif ( self.model.get( 'ID' ) === ThriveApp.globals.active_course.get( 'ID' ) ) {\n\t\t\t\t\tself.model.set( {\n\t\t\t\t\t\ttopic: model.get( 'ID' ),\n\t\t\t\t\t\ttopic_color: model.get( 'color' ),\n\t\t\t\t\t\ttopic_name: model.get( 'title' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( self.model.get( 'ID' ) ) {\n\t\t\t\t\t\tself.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.listenTo( this.difficultyCollection, 'change:selected', function ( model ) {\n\t\t\t\tself.model.set( {\n\t\t\t\t\tlevel: model.get( 'ID' ),\n\t\t\t\t\tlevel_name: model.get( 'name' )\n\t\t\t\t} );\n\n\t\t\t\tif ( self.model.get( 'ID' ) ) {\n\t\t\t\t\tself.save();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.listenTo( this.model.get( 'author' ), 'change:url', this.render );\n\n\t\t\t$( 'body' ).on( 'click', function ( e ) {\n\t\t\t\tvar $container = self.$( '.tva-material-options ' ),\n\t\t\t\t\t$element = self.$( '.tva-material-selected-option' ),\n\t\t\t\t\t$title = self.$( '.tva-course-author-title' ),\n\t\t\t\t\t$search = self.$( '#tva-search-users' );\n\n\t\t\t\tif ( ! $container.is( e.target ) && $container.has( e.target ).length === 0 && ! $element.is( e.target ) ) {\n\t\t\t\t\t$container.slideUp();\n\t\t\t\t}\n\n\t\t\t\tif ( ! $search.is( e.target ) && ! $title.is( e.target ) ) {\n\t\t\t\t\tself.$( '.tva-search-author' ).addClass( 'tva-hide' );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tvar children = this.model.hasChildren(),\n\t\t\t\tcan_publish = false,\n\t\t\t\tself = this;\n\n\t\t\tif ( children ) {\n\t\t\t\tvar pb_ch = this.model.get( children ).findWhere( {post_status: 'publish'} );\n\t\t\t\tcan_publish = ! ! pb_ch;\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tcan_publish: can_publish,\n\t\t\t\t\tauthor: this.model.get( 'author' )\n\t\t\t\t}\n\t\t\t) );\n\n\t\t\tthis.renderTopics();\n\t\t\tthis.renderDifficultyLevels();\n\t\t\tthis.renderSearchUsers();\n\n\t\t\tthis.$( '.tva-material-selected-option' ).on( 'tva_clear_document', function ( element ) {\n\t\t\t\tself.$( '.tva-search-author' ).addClass( 'tva-hide' );\n\n\t\t\t\tself.$( '.tva-material-options' ).each( function ( index, item ) {\n\t\t\t\t\tself.$( item ).hide();\n\t\t\t\t} )\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderTopics: function () {\n\t\t\tthis.setSelectedModel( this.topicsCollection, 'topic' );\n\n\t\t\tnew selectView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-course-topic' ),\n\t\t\t\tcollection: this.topicsCollection,\n\t\t\t\targs: {\n\t\t\t\t\tclassName: 'tva-course-topics-list',\n\t\t\t\t\tsingleItemView: topicView,\n\t\t\t\t\tselectedItemView: selectedTopicView,\n\t\t\t\t\tlistItemsView: listTopicView\n\t\t\t\t}\n\t\t\t} ).render();\n\t\t},\n\t\trenderDifficultyLevels: function () {\n\t\t\tthis.setSelectedModel( this.difficultyCollection, 'level' );\n\n\t\t\tnew selectView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-course-difficulty' ),\n\t\t\t\tcollection: this.difficultyCollection,\n\t\t\t\targs: {\n\t\t\t\t\tclassName: 'tva-course-levels-list',\n\t\t\t\t\tdefaultValue: this.model.get( 'level_name' ),\n\t\t\t\t\tselectedItemView: selectedDifficultyView,\n\t\t\t\t\tlistItemsView: listDifficultyView,\n\t\t\t\t\tsingleItemView: difficultyView\n\t\t\t\t}\n\t\t\t} ).render();\n\t\t},\n\t\trenderSearchUsers: function () {\n\t\t\tvar self = this,\n\t\t\t\t$post_search = this.$( '#tva-search-users' );\n\n\t\t\tnew ThriveApp.PostSearch( $post_search, {\n\t\t\t\turl: ThriveApp.routes.courses + '/search_users/',\n\t\t\t\ttype: 'POST',\n\t\t\t\tselect: function ( event, ui ) {\n\t\t\t\t\tvar author = new author_model( {\n\t\t\t\t\t\tID: parseInt( ui.item.id ),\n\t\t\t\t\t\tuser_login: ui.item.label,\n\t\t\t\t\t\turl: ui.item.url,\n\t\t\t\t\t\tbiography_type: 'wordpress_bio'\n\t\t\t\t\t} );\n\n\t\t\t\t\tself.model.set( {author: author} );\n\t\t\t\t\tself.model.trigger( 'tva_author_changed', author );\n\n\t\t\t\t\tif ( self.model.get( 'ID' ) ) {\n\t\t\t\t\t\tself.save();\n\t\t\t\t\t}\n\n\t\t\t\t\tself.render();\n\t\t\t\t},\n\t\t\t\tsearch: function () {\n\t\t\t\t\tself.tvd_clear_errors();\n\t\t\t\t},\n\t\t\t\tfetch_single: self.model\n\t\t\t} );\n\t\t},\n\t\tsetSelectedModel: function ( collection, type ) {\n\t\t\t_.each( collection.where( {selected: true} ), function ( model ) {\n\t\t\t\tmodel.set( {selected: false}, {silent: true} )\n\t\t\t} );\n\n\t\t\tvar model = collection.findWhere( {ID: this.model.get( type )} );\n\n\t\t\tmodel\n\t\t\t\t? model.set( {selected: true}, {silent: true} )\n\t\t\t\t: collection.first().set( {selected: true}, {silent: true} );\n\t\t},\n\t\tshowSearch: function () {\n\t\t\tthis.$( '.tva-search-author' ).removeClass( 'tva-hide' )\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this,\n\t\t\t\txhr = this.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tself.render();\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.courseSaved );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/details.js")},"edit.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar utils = require( './utils' ),\n\t\tauthorView = require( './author/biography' );\n\n\tmodule.exports = utils.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/course-fields' ),\n\t\tevents: {\n\t\t\t'click .tva-cover-image': 'addCoverImage',\n\t\t\t'click .tva-heading': 'toggleSettings',\n\t\t\t'input #tva-course-title': 'setTitle',\n\t\t\t'input #tva-course-slug': 'setSlug',\n\t\t\t'change .tva-course-topic': 'setTopic',\n\t\t\t'input #tva-course-description': 'setDescription',\n\t\t\t'click .tva-save-course': 'save',\n\t\t\t'click .tva-remove-course-cover-image': 'removeCoverImage',\n\t\t\t'change #tva-course-featured-video': 'setVideoStatus',\n\t\t\t'change #tva-course-comments': 'setCommentStatus'\n\t\t},\n\t\tvideo_view: null,\n\t\tinitial_comment_status: null,\n\t\tcomment_status_view: null,\n\t\tinitialize: function () {\n\t\t\tthis.initial_comment_status = this.model.get( 'comment_status' );\n\t\t\tthis.listenTo( ThriveApp.globals.settings, 'change:comment_status', this.onCommentStatusChange );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, author: this.model.get( 'author' )} ) );\n\t\t\tthis.$( '.tva-edit-course-name' ).addClass( 'tva-hide' );\n\n\t\t\tif ( this.model.get( 'ID' ) ) {\n\t\t\t\tthis.$( '.tva-course-title' ).hide();\n\t\t\t}\n\n\t\t\tthis.renderCoverImage();\n\t\t\tthis.renderCommentStatus();\n\t\t\tthis.renderMCE( 'tva-course-description', 'description' );\n\n\t\t\tnew authorView( {\n\t\t\t\tel: this.$( '.tva-author-biography' ),\n\t\t\t\tmodel: this.model.get( 'author' )\n\t\t\t} ).render();\n\n\t\t\tif ( this.model.get( 'video_status' ) == true ) {\n\t\t\t\tthis.renderVideo();\n\t\t\t}\n\n\t\t\t$( 'body' ).trigger( 'course_fields', this.model );\n\n\t\t\tthis.$el.addClass( 'tva-course-editor' );\n\t\t\tthis.bind_zclip();\n\t\t\tTVE_Dash.hideLoader();\n\n\t\t\treturn this;\n\t\t},\n\t\tonCommentStatusChange: function () {\n\t\t\tthis.model.set( {comment_status: ThriveApp.globals.settings.get( 'comment_status' )} );\n\n\t\t\tvar children = this.model.hasChildren();\n\n\t\t\tif ( children ) {\n\t\t\t\tthis.model.get( children ).updateValues( {comment_status: this.model.get( 'comment_status' )}, true )\n\t\t\t}\n\n\t\t\tthis.comment_status_view.render();\n\t\t},\n\t\trenderCommentStatus: function () {\n\t\t\tthis.comment_status_view = new ThriveApp.views.CommentStatusView( {\n\t\t\t\tel: this.$( '#tva-comment-status-container' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.comment_status_view.render();\n\t\t},\n\t\tremoveCoverImage: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tthis.model.set( {cover_image: ''} );\n\t\t\tthis.renderCoverImage();\n\n\t\t},\n\t\trenderCoverImage: function () {\n\t\t\tvar state = this.model.get( 'cover_image' ) ? 'normal' : 'empty';\n\n\t\t\tif ( ! ThriveApp.views[ 'Cover' + ThriveApp.util.upperFirst( state ) + 'State' ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar view = new ThriveApp.views[ 'Cover' + ThriveApp.util.upperFirst( state ) + 'State' ]( {\n\t\t\t\tel: this.$( '.tva-cover-image' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\trenderLabel: function ( label ) {\n\t\t\tthis.label = new ThriveApp.views.Label( {\n\t\t\t\ttagName: 'li',\n\t\t\t\tmodel: label,\n\t\t\t\tattributes: {\n\t\t\t\t\t\"data-id\": label.get( 'ID' )\n\t\t\t\t},\n\t\t\t\tclassName: 'tva-course-label-item tvd-pointer',\n\t\t\t\tselected: this.model.get( 'label' )\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-course-labels-list' ).append( this.label.render().$el );\n\t\t},\n\t\trenderVideo: function () {\n\t\t\tvar media_model = new ThriveApp.models.MediaSelect( this.model.get( 'term_media' ) );\n\n\t\t\tif ( this.video_view ) {\n\t\t\t\tthis.video_view.remove();\n\t\t\t}\n\n\t\t\tthis.video_view = new ThriveApp.views.MediaSelectView( {\n\t\t\t\tmodel: media_model,\n\t\t\t\tsource: this.model\n\t\t\t} );\n\n\t\t\tthis.$( '#tva-course-video' ).show();\n\t\t\tthis.$( '#tva-course-video' ).append( this.video_view.render().$el );\n\n\t\t\treturn this;\n\t\t},\n\t\tsetVideoStatus: function ( e ) {\n\t\t\tvar value = e.currentTarget.checked;\n\t\t\tthis.model.set( {video_status: value} );\n\n\t\t\tif ( value == true ) {\n\t\t\t\tthis.renderVideo();\n\t\t\t} else {\n\t\t\t\tthis.video_view.remove();\n\t\t\t\tthis.$( '#tva-course-video' ).hide()\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetTitle: function ( e ) {\n\t\t\tvar value = e.target.value;\n\n\t\t\tthis.$( '#tva-course-slug' ).val( value );\n\n\t\t\tthis.model.set( {\n\t\t\t\tname: value,\n\t\t\t\tslug: ThriveApp.util.slugify( value, \"-\" ).toLowerCase()\n\t\t\t} )\n\t\t},\n\t\tsetSlug: function ( e ) {\n\t\t\tthis.model.set( 'slug', e.currentTarget.value );\n\t\t},\n\t\tsetDescription: function ( e ) {\n\t\t\tthis.model.set( 'description', e.currentTarget.value );\n\t\t},\n\t\tsetTopic: function () {\n\t\t\tthis.model.set( {topic: parseInt( this.$( '.tva-course-topic' ).val() )} );\n\t\t\tthis.model.set( {topic_name: this.model.getTopicName()} );\n\t\t\tthis.model.set( {topic_color: this.model.getTopicColor()} );\n\t\t},\n\t\tsetCommentStatus: function ( e ) {\n\t\t\tvar comment_status = e.currentTarget.checked ? 'open' : 'closed',\n\t\t\t\tlesson_template = this.model.get( 'lesson_template' );\n\n\t\t\tlesson_template.comment_status = comment_status;\n\n\t\t\tthis.model.set( {\n\t\t\t\tcomment_status: comment_status,\n\t\t\t\tcomment_status_changed: true,\n\t\t\t\tlesson_template: lesson_template\n\t\t\t} );\n\t\t},\n\t\ttoggleSettings: function ( e ) {\n\t\t\tvar $parent = this.$( e.currentTarget ).parent( '.tva-toggle-container' );\n\n\t\t\t$parent.find( '.tva-heading-title' ).toggleClass( 'tva-hide' );\n\t\t\t$parent.find( '.tva-advanced-settings' ).slideToggle();\n\t\t\t$parent.find( '.ta-arrow-upd' ).toggleClass( 'ta-arr-inv' );\n\t\t},\n\t\taddCoverImage: function () {\n\t\t\tvar frame,\n\t\t\t\tself = this;\n\n\t\t\t// If the media frame already exists, reopen it.\n\t\t\tif ( frame ) {\n\t\t\t\tframe.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Create a new media frame\n\t\t\tframe = wp.media( {\n\t\t\t\ttitle: 'Select or Upload a Cover Image',\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: 'Use this Image'\n\t\t\t\t},\n\t\t\t\tlibrary: {type: 'image'},\n\t\t\t\tmultiple: false  // Set to true to allow multiple files to be selected\n\t\t\t} );\n\n\t\t\t// When an image is selected in the media frame...\n\t\t\tframe.on( 'select', function () {\n\t\t\t\tvar attachment = frame.state().get( 'selection' ).first().toJSON();\n\t\t\t\tself.model.set( {cover_image: attachment.url} );\n\t\t\t\tself.renderCoverImage();\n\t\t\t} );\n\n\t\t\t// Finally, open the modal on click\n\t\t\tframe.open();\n\t\t},\n\t\tgetPreviewUrl: function () {\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: ThriveApp.routes.settings + '/get_preview_url/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tThriveApp.globals.settings.set( {preview_url: response} );\n\t\t\t\t}\n\t\t\t} )\n\t\t},\n\t\tsave: function () {\n\t\t\tthis.tvd_clear_errors();\n\t\t\tif ( ! this.model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.model );\n\t\t\t}\n\n\t\t\tif ( ( this.model.get( 'video_status' ) == true ) && this.video_view && ! this.video_view.model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.video_view.model );\n\t\t\t}\n\n\t\t\tif ( this.video_view ) {\n\t\t\t\tthis.model.set( {\n\t\t\t\t\tterm_media: {\n\t\t\t\t\t\tmedia_type: this.video_view.model.get( 'media_type' ),\n\t\t\t\t\t\tmedia_url: this.video_view.model.get( 'media_url' ),\n\t\t\t\t\t\tmedia_extra_options: this.video_view.model.get( 'media_extra_options' )\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( ! this.model.get( 'description' ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.InvalidDescription );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar exclude_value = this.model.get( 'excluded' ),\n\t\t\t\treg = /^\\d+$/,\n\t\t\t\texclude_num = reg.test( exclude_value );\n\n\t\t\tif ( exclude_num === false ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.InvalidNumberType );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar collection = this.model.hasChildren();\n\n\t\t\tif ( collection ) {\n\t\t\t\tthis.model.set( {post_ids: this.model.get( collection ).listValue( 'ID' )} );\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar route = Backbone.history.getFragment().indexOf( 'add_course' ) !== - 1 ? 'add' : 'edit',\n\t\t\t\tself = this,\n\t\t\t\txhr = self.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\n\t\t\t\t\tvar children = self.model.hasChildren();\n\n\t\t\t\t\tif ( children && true === self.model.get( 'comment_status_changed' ) ) {\n\t\t\t\t\t\tself.model.get( children ).updateValues( {comment_status: self.model.get( 'comment_status' )}, true )\n\t\t\t\t\t}\n\n\t\t\t\t\tself.model.set( {\n\t\t\t\t\t\tID: response.term_id,\n\t\t\t\t\t\turl: response.url,\n\t\t\t\t\t\tupdate_sendowl_products: false,\n\t\t\t\t\t\tcomment_status_changed: false,\n\t\t\t\t\t} );\n\n\t\t\t\t\tThriveApp.globals.courses.add( self.model, {at: ThriveApp.globals.courses.length} );\n\n\t\t\t\t\tif ( ( ThriveApp.globals.settings.get( 'preview_url' ) === false ) ) {\n\t\t\t\t\t\tself.getPreviewUrl();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( route == 'add' ) {\n\t\t\t\t\t\tThriveApp.router.navigate( '#course/' + response.term_id, {trigger: true} );\n\t\t\t\t\t}\n\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.courseSaved );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\t$( '.tva-course-section' ).removeClass( 'tva-course-editor' );\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/course/edit.js")},"items-list.js":function(exports,module,require){eval("var listView;\n\n( function ( $ ) {\n\tvar contentView = require( './content' );\n\n\tlistView = contentView.extend( {\n\t\tclassName: 'tva-items-list',\n\t\texpanded: null,\n\t\tevents: {\n\t\t\t'click .tva-parent-item': 'animateItem',\n\t\t\t'click .tva-checkbox': 'setItems'\n\t\t},\n\t\tinitialize: function () {\n\t\t},\n\t\trender: function () {\n\t\t\tvar type = this.model.hasChildren();\n\t\t\tthis.collection.each( this.renderOne, this );\n\t\t\tthis.$el.addClass( 'tva-' + type + '-section' );\n\n\t\t\tif ( this.model.hasChildren() && ! this.model.get( 'taxonomy' ) ) {\n\t\t\t\tthis.$el.addClass( 'tva-childs-section' );\n\t\t\t}\n\n\t\t\treturn this\n\t\t},\n\t\tsetItems: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tThriveApp.globals.active_course.trigger( 'reset_select_all' );\n\n\t\t\tthis.showActions( e );\n\t\t},\n\t\tanimateItem: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tthis.expanded = this.collection.findWhere( {expanded: true} );\n\t\t\tthis.model.set( {expanded: ! this.model.get( 'expanded' )} );\n\t\t},\n\t\tshowActions: function ( e ) {\n\t\t\t/**\n\t\t\t * Because we're doing actions on the wrapper\n\t\t\t * the checked prop will always return the opposite of what we expect\n\t\t\t * @type {*|void}\n\t\t\t */\n\t\t\tvar checked = ! $( e.currentTarget ).find( 'input' ).prop( 'checked' );\n\t\t\t$( e.currentTarget ).find( 'input' ).prop( 'checked', checked );\n\n\t\t\tif ( ! checked ) {\n\t\t\t\t$( '#tva-select-all-items' ).prop( 'checked', checked )\n\t\t\t}\n\n\t\t\tThriveApp.globals.selected_items.checkItems( this.model, checked );\n\n\t\t\tThriveApp.globals.active_course.trigger( 'render_bulk_actions' );\n\t\t},\n\t\tsetChecked: function () {\n\t\t\tthis.$( '.tva-select-items:first' ).prop( 'checked', this.model.get( 'checked' ) );\n\t\t}\n\t} );\n\n} )( jQuery );\n\nmodule.exports = listView;\n//# sourceURL=workspace/admin/js/views/course/items-list.js")},"restrictions.js":function(exports,module,require){eval("( function ( $ ) {\n\tvar editView = require( './edit' ),\n\t\taccessManager = require( './access-rules/access-manager' );\n\n\tvar restrictionsView = editView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/restrictions/options' ),\n\n\t\trender: function () {\n\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tmodule.exports = editView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/restrictions/main' ),\n\t\tevents: {\n\t\t\t'input #tva-course-excluded': 'setExcluded',\n\t\t\t'input #tva-course-message': 'setMessage',\n\t\t\t'change .tva-course-role': 'setRole',\n\t\t\t'click #tva-course-logged-in': 'toggleLoggedIn',\n\t\t\t'click .tva-expand-labels': 'toggleLabels',\n\t\t\t'click .tva-course-label-item': 'selectLabel',\n\t\t\t'click .tva-add-course-label': 'addLabel',\n\t\t\t'click .tva-save-course-restrictions': 'save'\n\t\t},\n\t\tinitialize: function () {\n\n\t\t\tthis.listenTo( ThriveApp.globals.labels, 'add', this.renderLabels() );\n\t\t\tthis.listenTo( ThriveApp.globals.labels, 'remove', this.renderLabels );\n\n\t\t\tthis.model.on( 'tva_integration_updated', function ( model ) {\n\t\t\t\tif ( true === model.isSendOwl() ) {\n\t\t\t\t\tthis.model.set( 'update_sendowl_products', true );\n\t\t\t\t}\n\t\t\t}, this );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderRestrictions();\n\t\t\tthis.renderLabels();\n\n\t\t\tthis.$( '.tva-course-no-restrictions' ).toggle( this.model.get( 'logged_in' ) === 0 );\n\n\t\t\tthis.$el.find( '.tva-label-add-color' ).spectrum( {\n\t\t\t\tcolor: '#58a545',\n\t\t\t\tcontainerClassName: 'tva-color-picker',\n\t\t\t\tallowEmpty: false,\n\t\t\t\tshowInitial: true,\n\t\t\t\tshowButtons: true,\n\t\t\t\tchooseText: \"Apply\",\n\t\t\t\tcancelText: \"Cancel\",\n\t\t\t\tshowInput: true,\n\t\t\t\tpreferredFormat: \"hex\",\n\t\t\t} );\n\n\t\t\tvar display = this.model.get( 'logged_in' ) === 1 ? 'block' : 'none';\n\n\t\t\tthis.$( '.tva-course-restrictions-options' ).css( 'display', display );\n\n\t\t\tthis.renderAccessRules();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderRestrictions: function () {\n\t\t\tthis.$( '.tva-restrictions-options' ).empty();\n\n\t\t\tnew restrictionsView( {\n\t\t\t\tel: this.$( '.tva-restrictions-options' ),\n\t\t\t\tmodel: this.model\n\t\t\t} ).render();\n\n\t\t\tthis.renderMCE( 'tva-course-message', 'message' );\n\t\t},\n\n\t\t/**\n\t\t * Access Rules Manager\n\t\t *\n\t\t * Render rules list with all its functionality\n\t\t */\n\t\trenderAccessRules: function () {\n\n\t\t\tvar view = new accessManager( {\n\t\t\t\tcollection: this.model.get( 'rules' )\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-course-restrictions-options' ).prepend( view.render().$el );\n\t\t},\n\n\t\trenderRestrictionsOptions: function () {\n\t\t\tvar self = this,\n\t\t\t\tmembership_plugins = new ThriveApp.collections.MembershipsCollection( ThriveApp.data.settings.membership_plugin );\n\n\t\t\tif ( membership_plugins.length === 0 ) {\n\t\t\t\tThriveApp.globals.roles.each( this.renderRole, this );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Render membership options for each membership plugin the user has active\n\t\t\t */\n\t\t\tmembership_plugins.each( function ( membership_plugin ) {\n\t\t\t\tvar tag = membership_plugin.get( 'tag' ),\n\t\t\t\t\tview = null;\n\n\t\t\t\t/**\n\t\t\t\t * Instantiate the base for the tag if no view was created for the membership plugin\n\t\t\t\t */\n\t\t\t\tif ( ! ThriveApp.views[ ThriveApp.util.upperFirst( tag ) + 'MembershipOptions' ] ) {\n\t\t\t\t\tview = new ThriveApp.views.MembershipOptionsBase( {\n\t\t\t\t\t\tmodel: self.model,\n\t\t\t\t\t\tsettings: membership_plugin,\n\t\t\t\t\t\ttag: tag\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tview = new ThriveApp.views[ ThriveApp.util.upperFirst( tag ) + 'MembershipOptions' ]( {\n\t\t\t\t\t\tmodel: self.model,\n\t\t\t\t\t\tsettings: membership_plugin,\n\t\t\t\t\t\ttag: tag\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tself.$( '.tva-membership-options' ).append( view.render().$el );\n\t\t\t}, membership_plugins );\n\t\t},\n\t\trenderRole: function ( role ) {\n\t\t\tvar roleView = new ThriveApp.views.Role( {\n\t\t\t\tel: this.$( '#tva-course-roles' ),\n\t\t\t\tmodel: role,\n\t\t\t\tchecked: this.model.get( 'roles' )\n\t\t\t} );\n\n\t\t\troleView.render();\n\t\t},\n\t\trenderLabels: function () {\n\t\t\tthis.label_controls = new ThriveApp.views.LabelsControls( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-course-label-controls' )\n\t\t\t} );\n\n\t\t\tthis.label_controls.render();\n\n\t\t\tthis.$( '.tva-course-labels-list' ).empty();\n\t\t\tThriveApp.globals.labels.each( this.renderLabel, this );\n\t\t},\n\t\ttoggleLoggedIn: function ( e ) {\n\n\t\t\tthis.model.set( {logged_in: e.target.checked === true ? 1 : 0} );\n\t\t\tthis.model.set( 'update_sendowl_products', true );\n\n\t\t\tthis.$( '.tva-course-restrictions-options' ).toggle( this.model.get( 'logged_in' ) === 1 );\n\t\t\tthis.$( '.tva-course-no-restrictions' ).toggle( this.model.get( 'logged_in' ) === 0 );\n\t\t},\n\t\tselectLabel: function ( e ) {\n\t\t\tvar id = parseInt( $( e.target ).attr( 'data-id' ) ),\n\t\t\t\tlabel = ThriveApp.globals.labels.findWhere( {ID: id} );\n\n\t\t\tif ( ! ( label instanceof ThriveApp.models.Base ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.model.set( {label: parseInt( id )} );\n\t\t\tthis.model.set( {label_name: label.get( 'title' )} );\n\t\t\tthis.model.set( {label_color: label.get( 'color' )} );\n\n\t\t\tthis.renderLabels();\n\n\t\t\tthis.$( '.tva-course-label-values' ).slideToggle();\n\t\t},\n\t\tsetRole: function ( e ) {\n\t\t\tvar roles = this.model.get( 'roles' ),\n\t\t\t\tkey = $( e.currentTarget ).val();\n\n\t\t\tif ( $( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\troles[ key ] = 1;\n\t\t\t} else {\n\t\t\t\tdelete roles[ key ];\n\t\t\t}\n\n\t\t\tthis.model.set( {roles: roles} );\n\t\t},\n\t\tsetExcluded: function ( e ) {\n\t\t\tthis.model.set( {excluded: e.currentTarget.value} );\n\t\t},\n\t\tsetMessage: function ( e ) {\n\t\t\tthis.model.set( {message: e.currentTarget.value} );\n\t\t},\n\t\ttoggleLabels: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tthis.$( '.tva-course-label-values' ).slideToggle();\n\t\t},\n\t\taddLabel: function () {\n\n\t\t\tvar value = this.$( '#tva-add-label' ).val(),\n\t\t\t\tself = this,\n\t\t\t\telement = this.$( '#tva-add-label' );\n\n\t\t\tif ( ! value ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.InvalidLabelName );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tsetTimeout( function () {\n\t\t\t\tvar color = $( '.tva-label-add-color' ).val() ? $( '.tva-label-add-color' ).val() : '#58a545',\n\t\t\t\t\tmodel = new ThriveApp.models.Label( {\n\t\t\t\t\t\ttitle: value,\n\t\t\t\t\t\tlabel: value,\n\t\t\t\t\t\tcolor: color,\n\t\t\t\t\t\tlabel_color: color,\n\t\t\t\t\t\tlabel_name: value\n\t\t\t\t\t} ),\n\t\t\t\t\txhr = model.save();\n\n\t\t\t\tif ( ! model.isValid() ) {\n\t\t\t\t\treturn this.tvd_show_errors( model );\n\t\t\t\t}\n\n\t\t\t\tif ( xhr ) {\n\t\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\t\tmodel.set( 'ID', response.ID );\n\t\t\t\t\t\tself.model.set( {\n\t\t\t\t\t\t\tlabel: model.get( 'ID' ),\n\t\t\t\t\t\t\tcolor: color,\n\t\t\t\t\t\t\tlabel_color: color,\n\t\t\t\t\t\t\tlabel_name: value\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tThriveApp.globals.labels.add( model );\n\t\t\t\t\t\telement.val( '' );\n\t\t\t\t\t\tself.renderLabels();\n\t\t\t\t\t} );\n\t\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t\t} );\n\t\t\t\t\txhr.always( function () {\n\t\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}, 900 );\n\n\t\t},\n\t} )\n\n} )( jQuery )\n//# sourceURL=workspace/admin/js/views/course/restrictions.js")},"utils.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar base = require( '../base' );\n\n\tmodule.exports = base.extend( {\n\t\tisCollection: function ( collection ) {\n\t\t\treturn ( typeof collection === 'object' ) && ( collection instanceof Backbone.Collection );\n\t\t},\n\t\tgetPlural: function ( str ) {\n\t\t\treturn str + 's';\n\t\t},\n\t\tisModule: function ( model ) {\n\t\t\treturn model && model.get( 'post_type' ) === 'tva_module';\n\t\t},\n\t\tisChapter: function ( model ) {\n\t\t\treturn model && model.get( 'post_type' ) === 'tva_chapter';\n\t\t},\n\t\tisLesson: function ( model ) {\n\t\t\treturn model && model.get( 'post_type' ) === 'tva_lesson';\n\t\t},\n\t\trenderMCE: function ( selector, prop ) {\n\t\t\tvar self = this;\n\n\t\t\tsetTimeout( function () {\n\t\t\t\tThriveApp.util.clearMCEEditor( selector );\n\t\t\t\tThriveApp.util.editorInit( selector, self.model, prop );\n\t\t\t\tTVE_Dash.materialize( self.$el );\n\t\t\t}, 0 );\n\t\t}\n\t} );\n\n} )( jQuery )\n//# sourceURL=workspace/admin/js/views/course/utils.js")}},courses:{"item.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar util = require( '../../_util' ),\n\t\tbase_view = require( '../base' ),\n\t\tcourse_state_views = {\n\t\t\t'CourseNormalState': require( './states/normal' ),\n\t\t\t'CourseDeleteState': require( './states/delete' )\n\t\t};\n\n\tmodule.exports = base_view.extend( {\n\t\tevents: {\n\t\t\t'click .tva-course-status': 'changeCourseStatus'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model, 'change:state', this.renderState );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.renderState();\n\t\t\treturn this;\n\t\t},\n\t\trenderState: function () {\n\t\t\tvar state = this.model.get( 'state' );\n\t\t\tif ( ! course_state_views[ 'Course' + util.upperFirst( state ) + 'State' ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar view = new course_state_views[ 'Course' + util.upperFirst( state ) + 'State' ]( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t\tthis.$el.replaceWith( view.$el );\n\t\t\tthis.setElement( view.$el );\n\n\t\t\treturn this;\n\t\t},\n\t\tchangeCourseStatus: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tvar current = this.model.get( 'status' ),\n\t\t\t\tcan_publish = true;\n\t\t\tthis.model.set( {update_sendowl_products: true} );\n\n\t\t\tif ( current === 'publish' ) {\n\t\t\t\tthis.model.set( {status: 'draft'} );\n\t\t\t\tthis.save();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! this.model.hasChildren() ) {\n\t\t\t\tcan_publish = false;\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'lessons' ).length > 0 ) {\n\t\t\t\tvar published_lesson = this.model.get( 'lessons' ).findWhere( {post_status: 'publish'} );\n\n\t\t\t\tif ( ! published_lesson ) {\n\t\t\t\t\tcan_publish = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'chapters' ).length > 0 ) {\n\t\t\t\tvar published_ch = this.model.get( 'chapters' ).findWhere( {post_status: 'publish'} );\n\n\t\t\t\tif ( ! published_ch ) {\n\t\t\t\t\tcan_publish = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( can_publish === false ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.NumberLessons );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'modules' ).length > 0 ) {\n\t\t\t\tvar published_module = this.model.get( 'modules' ).findWhere( {post_status: 'publish'} );\n\n\t\t\t\tif ( ! published_module ) {\n\t\t\t\t\tTVE_Dash.err( ThriveApp.t.NoPublishedModule );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.model.set( {status: current == 'draft' ? 'publish' : 'draft'} );\n\n\t\t\tthis.save();\n\n\t\t\treturn this\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.cardLoader( this.$el );\n\t\t\tvar self = this,\n\t\t\t\txhr = self.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.collection.trigger( 'tva_filter_courses' );\n\n\t\t\t\t\t\tThriveApp.globals.available_settings.fetch().success( function ( response, status, options ) {\n\t\t\t\t\t\t\tThriveApp.globals.settings.set( {\n\t\t\t\t\t\t\t\tiframe_url: ThriveApp.globals.settings.get( 'preview_url' ),\n\t\t\t\t\t\t\t\tpreview_url: response.preview_url,\n\t\t\t\t\t\t\t\tpreview_option: ! ! ThriveApp.globals.courses.findWhere( {status: 'publish'} )\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery );\n\n//# sourceURL=workspace/admin/js/views/courses/item.js")},"list.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tvar courseView = require( './item' );\n\n\tmodule.exports = baseView.extend( {\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\t\t\tthis.listenTo( this.collection, 'add', function () {\n\t\t\t\tself.collection.sort();\n\t\t\t\tself.render();\n\t\t\t} );\n\t\t\tthis.listenTo( ThriveApp.globals.settings, 'change:comment_status', this.setNewCommentStatus );\n\n\t\t\tthis.collection.on( 'tva_filter_courses', function () {\n\t\t\t\tTVE_Dash.showLoader();\n\t\t\t\tself.itemViews = [];\n\t\t\t\tself.$( '.tva-course-item' ).remove();\n\n\t\t\t\tvar topics = ThriveApp.globals.topics.where( {checked: 1} );\n\n\t\t\t\tif ( topics.length == 0 ) {\n\t\t\t\t\tself.collection.each( function ( model ) {\n\t\t\t\t\t\tmodel.set( {display: 0} );\n\t\t\t\t\t}, this );\n\t\t\t\t} else if ( topics.length == ThriveApp.globals.topics.length ) {\n\t\t\t\t\tself.collection.each( function ( model ) {\n\t\t\t\t\t\tmodel.set( {display: 1} );\n\t\t\t\t\t}, this );\n\t\t\t\t} else {\n\t\t\t\t\tself.collection.each( function ( model ) {\n\t\t\t\t\t\tmodel.set( {display: 0} );\n\t\t\t\t\t}, this );\n\n\t\t\t\t\t_.each( topics, function ( topic ) {\n\t\t\t\t\t\tvar id = topic.get( 'ID' );\n\t\t\t\t\t\tself.collection.each( function ( model ) {\n\t\t\t\t\t\t\tif ( model.get( 'topic' ) == id ) {\n\t\t\t\t\t\t\t\tmodel.set( {display: 1} );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}, this );\n\t\t\t\t\t}, this );\n\t\t\t\t}\n\n\t\t\t\tself.render();\n\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t\tthis.collection.on( 'tva_update_courses', function () {\n\t\t\t\tself.updateOrder();\n\t\t\t} )\n\t\t},\n\t\tsetNewCommentStatus: function () {\n\t\t\tthis.collection.each( this.setCourseCommentStatus, this );\n\t\t},\n\t\tsetCourseCommentStatus: function ( course ) {\n\t\t\tcourse.set( {comment_status: ThriveApp.globals.settings.get( 'comment_status' )} );\n\t\t},\n\t\t/**\n\t\t * @param {Array} used for sortable\n\t\t */\n\t\titemViews: [],\n\t\trender: function () {\n\t\t\t/**\n\t\t\t * remove the views if they're already created so we don't have duplicate events\n\t\t\t */\n\t\t\tvar self = this,\n\t\t\t\ttotal = this.collection.length;\n\n\t\t\tthis.collection.each( this.renderOne, this );\n\n\t\t\tfunction show_position( event, ui ) {\n\t\t\t\tvar $placeholder = $( ui.placeholder ),\n\t\t\t\t\tposition = total - $placeholder.prevAll().not( ui.item ).length;\n\n\t\t\t\t$placeholder.html( \"<div class=tva-inside-placeholder'><span>\" + position + (\n\t\t\t\t\tThriveApp.t.n_suffix[ position ] ? ThriveApp.t.n_suffix[ position ] : ThriveApp.t.n_th\n\t\t\t\t) + ' ' + ThriveApp.t.position + \"</span></div>\" );\n\t\t\t}\n\n\t\t\tthis.$el.sortable( {\n\t\t\t\tplaceholder: 'tvd-card-new tva-course-ui-sortable-placeholder tvd-col tvd-s6 tvd-ms6 tvd-m4 tvd-l3',\n\t\t\t\titems: '.tva-course-item',\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\thandle: '.tva-drag-card',\n\t\t\t\tupdate: _.bind( self.updateOrder, this ),\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tchange: show_position,\n\t\t\t\tstart: function ( event, ui ) {\n\t\t\t\t\tshow_position( event, ui );\n\t\t\t\t\t$( 'body' ).addClass( 'tva-sorting' );\n\t\t\t\t},\n\t\t\t\tstop: function () {\n\t\t\t\t\tsetTimeout( function () {\n\t\t\t\t\t\t$( 'body' ).removeClass( 'tva-sorting' );\n\t\t\t\t\t}, 200 );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t$( '#collapse-button' ).on( 'click', function () {\n\t\t\t\tself.recalcWidth();\n\t\t\t} );\n\n\t\t\tif ( ! this.ribbon ) {\n\t\t\t\tthis.renderRibbon();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trenderOne: function ( course ) {\n\t\t\tif ( course.get( 'display' ) ) {\n\t\t\t\tvar $lastItem = this.$el.find( '.tva-course-item' ).last(),\n\t\t\t\t\tview = new courseView( {\n\t\t\t\t\t\tmodel: course,\n\t\t\t\t\t\tcollection: this.collection\n\t\t\t\t\t} );\n\n\t\t\t\tif ( $lastItem.length ) {\n\t\t\t\t\t$lastItem.after( view.render().$el );\n\t\t\t\t} else {\n\t\t\t\t\tthis.$el.prepend( view.render().$el );\n\t\t\t\t}\n\n\t\t\t\tthis.itemViews.push( view );\n\t\t\t}\n\n\n\t\t\treturn this;\n\t\t},\n\t\trenderRibbon: function () {\n\n\t\t\tif ( this.model.get( 'is_thrivetheme' ) && this.model.get( 'apprentice' ) && this.collection.where( {status: 'publish'} ).length > 0 && ! this.model.get( 'apprentice_ribbon' ) ) {\n\t\t\t\tthis.ribbon = new ThriveApp.views.Ribbon( {\n\t\t\t\t\tmodel: this.model\n\t\t\t\t} );\n\n\t\t\t\tthis.$el.append( this.ribbon.render().$el );\n\t\t\t\tthis.itemViews.push( this.ribbon );\n\n\t\t\t\tthis.recalcWidth();\n\t\t\t}\n\n\t\t},\n\t\trecalcWidth: function () {\n\t\t\tvar bar_width = $( '#adminmenuback' ).outerWidth();\n\t\t\tvar body_width = $( 'body' ).outerWidth();\n\n\t\t\t// this.$( '.tva-ribbon-container' ).css( {'width': body_width - bar_width + 'px', 'left': bar_width + 'px'} );\n\t\t},\n\t\tupdateOrder: function () {\n\t\t\tvar to_update = {},\n\t\t\t\t$items = this.$( '.tva-course-item' ).reverse(),\n\t\t\t\tself = this;\n\n\t\t\t_.each( $items, function ( item, index ) {\n\t\t\t\tvar id = self.$( item ).attr( 'data-id' ),\n\t\t\t\t\tmodel = self.collection.findWhere( {ID: parseInt( id )} );\n\n\t\t\t\tif ( model ) {\n\t\t\t\t\tmodel.set( {order: index} )\n\t\t\t\t}\n\n\t\t\t\tto_update[ id ] = index;\n\t\t\t} );\n\n\t\t\tif ( this.collection.length !== Object.keys( to_update ).length ) {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.collection.sort();\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.courses + '/update_order/',\n\t\t\t\tdata: {\n\t\t\t\t\tnew_order: to_update\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tThriveApp.globals.available_settings.fetch().success( function ( response, status, options ) {\n\t\t\t\t\tThriveApp.globals.settings.set( {\n\t\t\t\t\t\tiframe_url: ThriveApp.globals.settings.get( 'preview_url' ),\n\t\t\t\t\t\tpreview_url: response.preview_url\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/courses/list.js")},states:{"delete.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar baseView = require( '../../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-col tvd-s6 tvd-ms6 tvd-m4 tvd-l3 tva-course-item',\n\t\ttemplate: TVE_Dash.tpl( 'course/delete-state' ),\n\t\tevents: {\n\t\t\t'click .tva-delete-no': function () {\n\t\t\t\tthis.model.set( {state: ThriveApp.t.normal_state} );\n\t\t\t},\n\t\t\t'click .tva-delete-yes': 'deleteCourse'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.collection, 'remove', this.remove );\n\t\t\t_.bindAll( this, 'keyAction' );\n\t\t\t$( document ).bind( 'keydown', this.keyAction );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this\n\t\t},\n\t\tkeyAction: function ( e ) {\n\t\t\tvar code = e.which;\n\t\t\tif ( code == 13 ) {\n\t\t\t\tthis.deleteCourse();\n\t\t\t} else if ( code == 27 ) {\n\t\t\t\tthis.model.set( {state: ThriveApp.t.normal_state} );\n\t\t\t}\n\t\t},\n\t\tdeleteCourse: function () {\n\t\t\tTVE_Dash.cardLoader( this.$el );\n\t\t\tvar self = this,\n\t\t\t\txhr = self.model.destroy( {wait: true} );\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tself.collection.trigger( 'tva_update_courses' );\n\t\t\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/courses/states/delete.js")},"normal.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar base_view = require( '../../base' );\n\n\tmodule.exports = base_view.extend( {\n\t\tclassName: 'tva-course-item',\n\t\ttemplate: TVE_Dash.tpl( 'course/item' ),\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model.get( 'lessons' ), 'add', this.render );\n\t\t},\n\t\tevents: {\n\t\t\t'click .tva-go-to-course': 'goToCourse',\n\t\t\t'click .tva-delete-course': 'changeState',\n\t\t\t'click .tva-preview-course-url': 'previewCourse',\n\t\t\t'click .tva-drag-card': function ( e ) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t},\n\t\trender: function () {\n\t\t\tvar published = this.collection.where( {status: 'publish'} ),\n\t\t\t\ttopic = ThriveApp.globals.topics.findWhere( {ID: parseInt( this.model.get( 'topic' ) )} ),\n\t\t\t\tdisplay = this.collection.where( {display: 0} ),\n\t\t\t\tshow_order = display.length == 0;\n\n\t\t\tthis.model.set( {tooltiped: false} );\n\n\t\t\tif ( published.length == 0 && this.collection.at( 0 ) == this.model ) {\n\t\t\t\tvar pb_lesson = this.model.get( 'lessons' ).findWhere( {post_status: 'publish'} ),\n\t\t\t\t\tpb_chapter = this.model.get( 'chapters' ).findWhere( {post_status: 'publish'} ),\n\t\t\t\t\tpb_module = this.model.get( 'modules' ).findWhere( {post_status: 'publish'} );\n\n\t\t\t\tif ( pb_lesson || pb_chapter || pb_module ) {\n\t\t\t\t\tthis.model.set( {tooltiped: true} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {model: this.model, topic: topic, show_order: show_order} ) );\n\t\t\tthis.renderTopic();\n\t\t\tthis.$el.attr( 'data-id', this.model.get( 'ID' ) );\n\t\t\treturn this;\n\t\t},\n\t\trenderTopic: function () {\n\t\t\tvar topic = ThriveApp.globals.topics.findWhere( {ID: parseInt( this.model.get( 'topic' ) )} );\n\n\t\t\tif ( ! topic ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar type = topic.get( 'icon_type' );\n\n\t\t\tif ( ! type || type === 'icon' ) {\n\t\t\t\tthis.$( '.ta-course-icon' ).html( '<div style=\"background-image: url(' + topic.get( 'icon' ) + ')\"></div>' );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar svg = topic.get( 'svg_icon' );\n\t\t\tthis.$( '.ta-course-icon' ).html( svg );\n\t\t\tthis.$( '.ta-course-icon svg' ).css( 'fill', topic.get( 'layout_icon_color' ) );\n\t\t\tthis.$( '.ta-course-icon span' ).css( 'color', topic.get( 'layout_icon_color' ) );\n\t\t\tthis.$( '.ta-course-icon' ).css( 'padding', '10px' );\n\t\t},\n\t\tgoToCourse: function ( e ) {\n\t\t\tvar id = $( e.currentTarget ).attr( 'data-id' );\n\t\t\tif ( ! $( e.target ).hasClass( 'tva-delete-course' ) ) {\n\t\t\t\tThriveApp.router.navigate( '#course/' + id, {trigger: true} );\n\t\t\t}\n\t\t},\n\t\tchangeState: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tvar model = this.collection.findWhere( {state: ThriveApp.t.delete_state} );\n\t\t\tif ( model ) {\n\t\t\t\tmodel.set( {state: ThriveApp.t.normal_state} );\n\t\t\t}\n\t\t\tthis.model.set( {state: ThriveApp.t.delete_state} );\n\t\t},\n\t\tpreviewCourse: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/courses/states/normal.js")}}},filters:{"item.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'filters/item' ),\n\t\tevents: {\n\t\t\t'click .tva-filter-topic': 'filterTopics'\n\t\t},\n\t\tchecked: true,\n\t\trender: function () {\n\t\t\tthis.$el.prepend( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t},\n\t\tfilterTopics: function ( e ) {\n\t\t\tvar id = this.model.get( 'ID' );\n\t\t\tthis.checked = $( e.currentTarget ).is( ':checked' ) ? 1 : 0;\n\n\t\t\tif ( id == 'none' && $( e.currentTarget ).is( ':checked' ) ) {\n\t\t\t\t$( '.tva-filter-topic' ).prop( 'checked', true );\n\t\t\t\tthis.collection.each( this.toggleChecked, this );\n\t\t\t} else if ( id == 'none' && ! $( e.currentTarget ).is( ':checked' ) ) {\n\t\t\t\t$( '.tva-filter-topic' ).prop( 'checked', false );\n\t\t\t\tthis.collection.each( this.toggleChecked, this );\n\t\t\t} else {\n\t\t\t\tthis.toggleChecked( this.model );\n\t\t\t\tvar count = this.collection.where( {checked: 1} ).length,\n\t\t\t\t\tcheck = count == this.collection.length;\n\t\t\t\t$( '#tva-filter-topic-none' ).prop( 'checked', check );\n\t\t\t}\n\n\t\t\tThriveApp.globals.courses.trigger( 'tva_filter_courses' );\n\t\t},\n\t\ttoggleChecked: function ( model ) {\n\t\t\tmodel.set( {checked: this.checked} );\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/filters/item.js")},"list.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tvar itemView = require( './item' );\n\n\tmodule.exports = baseView.extend( {\n\n\t\trender: function () {\n\t\t\tthis.collection.each( this.renderOne, this );\n\t\t\tthis.renderSelect();\n\t\t},\n\t\trenderOne: function ( filter ) {\n\t\t\tvar view = new itemView( {\n\t\t\t\ttagName: 'li',\n\t\t\t\tmodel: filter,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el )\n\t\t},\n\t\trenderSelect: function () {\n\t\t\tvar model = new ThriveApp.models.Topic();\n\t\t\tmodel.set( {\n\t\t\t\tID: 'none',\n\t\t\t\ttitle: 'Select All',\n\t\t\t\tchecked: 1\n\t\t\t} );\n\n\t\t\tvar select = new itemView( {\n\t\t\t\ttagName: 'li',\n\t\t\t\tmodel: model,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\tthis.$el.append( select.render().$el )\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/filters/list.js")}},"header.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './base' );\n\n\t/**\n\t * Header View\n\t */\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'header' ),\n\t\tevents: {\n\t\t\t'click #tva-general-settings': 'generalSettings',\n\t\t\t'click #tva-disable-apprentice': 'disableApprentice',\n\t\t\t'click #tva-template-settings': 'templateSettings',\n\t\t\t'click #tva-label-management': 'labelManagement'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model, 'change:apprentice', this.render );\n\t\t\tthis.model.on( 'tva_render_header', function () {\n\t\t\t\tthis.render();\n\t\t\t}, this )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tTVE_Dash.materialize( this.$el );\n\t\t\treturn this;\n\t\t},\n\t\tgeneralSettings: function () {\n\t\t\tthis.modal( ThriveApp.modals.ModalSettings, {\n\t\t\t\tmodel: ThriveApp.globals.settings,\n\t\t\t\t'max-width': '60%',\n\t\t\t\twidth: '800px',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 0\n\t\t\t} );\n\t\t},\n\t\ttemplateSettings: function () {\n\t\t\tThriveApp.router.navigate( \"#template_settings\", {trigger: true} );\n\t\t},\n\t\tlabelManagement: function () {\n\t\t\tThriveApp.router.navigate( \"#label_management\", {trigger: true} );\n\t\t},\n\t\tdisableApprentice: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/disable_apprentice/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.model.set( {apprentice: false} );\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.SuccessDisabledApprentice );\n\t\t\t\t\tself.render();\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/header.js")},lesson:{"lesson-delete-state.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar base = require( '../base' );\n\n\tmodule.exports = base.extend( {\n\t\tclassName: 'tvd-col tvd-s12 tva-lesson-item',\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/lesson-delete' ),\n\t\tevents: {\n\t\t\t'click .tva-delete-no': function () {\n\t\t\t\tthis.model.set( {state: ThriveApp.t.normal_state} );\n\t\t\t},\n\t\t\t'click .tva-delete-yes': 'deleteLesson'\n\t\t},\n\t\tchanged_models: [],\n\t\tinitialize: function () {\n\t\t\t_.bindAll( this, 'keyAction' );\n\t\t\t$( document ).bind( 'keydown', this.keyAction );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tif ( this.model.get( 'post_status' ) === 'publish' ) {\n\t\t\t\tthis.$el.addClass( 'tva-lesson-pb' )\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tkeyAction: function ( e ) {\n\t\t\tvar code = e.which;\n\t\t\tif ( code == 13 ) {\n\t\t\t\tthis.deleteLesson();\n\t\t\t} else if ( code == 27 ) {\n\t\t\t\tthis.model.set( {state: ThriveApp.t.normal_state} );\n\t\t\t}\n\t\t},\n\t\tdeleteLesson: function () {\n\t\t\tTVE_Dash.cardLoader( this.$el );\n\t\t\t/**\n\t\t\t * We should only change the status if the lesson is the last one and is published\n\t\t\t * or if we have more than one lesson in the parents\n\t\t\t */\n\t\t\tif ( this.model.get( 'post_status' ) === 'publish' ) {\n\t\t\t\tthis.changed_models = this.model.changeParentsStatus();\n\t\t\t}\n\n\t\t\tvar self = this,\n\t\t\t\txhr = self.model.destroy();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.ItemDeleted );\n\t\t\t\t\t$( document ).unbind( 'keydown', this.keyAction );\n\t\t\t\t\tself.collection.remove( self.model );\n\n\t\t\t\t\tif ( self.changed_models.length > 0 ) {\n\t\t\t\t\t\t_.each( self.changed_models, function ( model ) {\n\t\t\t\t\t\t\tmodel.save();\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_render_content' );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery )\n//# sourceURL=workspace/admin/js/views/lesson/lesson-delete-state.js")},"lesson-normal-state.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar lesson = require( './lesson' );\n\n\tmodule.exports = lesson.extend( {\n\t\tclassName: 'tva-lesson-item tva-single-item',\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/lesson-normal' ),\n\t\tevents: {\n\t\t\t'click .tva-edit-lesson': 'editLesson',\n\t\t\t'click .tva-delete-lesson': 'changeState',\n\t\t\t'click .tva-publish-lesson': 'publishLesson',\n\t\t\t'click .tva-edit-lesson-name': 'editTitle',\n\t\t\t'click .tva-select-lesson': 'toggleSelectedClass',\n\t\t\t'mousedown .tva-drag-lesson': function () {\n\t\t\t\tThriveApp.globals.moved_item = this.model;\n\t\t\t}\n\t\t},\n\t\tchanged_models: [],\n\t\tinitialize: function () {\n\n\t\t\tthis.$el.attr( 'data-id', this.model.get( 'ID' ) );\n\n\t\t\tthis.listenTo( this.model, 'remove', function () {\n\t\t\t\tthis.collection.remove( this.model );\n\t\t\t\tthis.$el.remove();\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tvar published = this.collection.where( {post_status: 'publish'} );\n\n\t\t\tthis.model.set( {tooltiped: false} );\n\n\t\t\tif ( published.length === 0 && this.collection.at( 0 ) == this.model ) {\n\t\t\t\tthis.model.set( {tooltiped: true} );\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tthis.$lessonTitle = this.$( '.tva-lesson-title' );\n\n\t\t\tif ( this.model.get( 'has_tcb_content' ) === true ) {\n\t\t\t\tthis.$( '.tva-edit-option' ).toggleClass( 'tva-hide' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\teditLesson: function ( e ) {\n\t\t\tif ( $( '.tva-course-section' ).hasClass( 'tva-course-editor' ) ) {\n\t\t\t\t$( '.tva-cancel-edit' ).click();\n\t\t\t}\n\n\t\t\tvar id = $( e.currentTarget ).attr( 'data-id' ),\n\t\t\t\tmodel = this.collection.findWhere( {ID: parseInt( id )} ),\n\t\t\t\tclone_model = new ThriveApp.models.Lesson( model.toDeepJSON() );\n\n\t\t\tthis.modal( ThriveApp.modals.LessonModalEditor, {\n\t\t\t\tmodel: clone_model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\t'max-width': '60%',\n\t\t\t\twidth: '800px',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 0,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal',\n\t\t\t\tviewName: 'LessonEditor'\n\t\t\t} );\n\t\t},\n\t\tchangeState: function () {\n\t\t\tvar model = this.collection.findWhere( {state: ThriveApp.t.delete_state} );\n\n\t\t\tif ( model ) {\n\t\t\t\tmodel.set( {state: ThriveApp.t.normal_state} );\n\t\t\t}\n\n\t\t\tthis.model.set( {state: ThriveApp.t.delete_state} )\n\t\t},\n\t\tpublishLesson: function () {\n\t\t\tvar current = this.model.get( 'post_status' ),\n\t\t\t\tpost_status = current === 'draft' ? 'publish' : 'draft';\n\n\t\t\tthis.changed_models = this.model.changeParentsStatus();\n\n\t\t\tthis.model.set( {post_status: post_status} );\n\t\t\tthis.save();\n\n\t\t\treturn this;\n\t\t},\n\t\teditTitle: function ( e ) {\n\t\t\tvar self = this,\n\t\t\t\tedit_btn = this.$el.find( '.tva-edit-lesson-name' ),\n\t\t\t\tedit_model = new Backbone.Model( {\n\t\t\t\t\ttitle: this.model.get( 'post_title' ),\n\t\t\t\t\trequired: true\n\t\t\t\t} );\n\t\t\tedit_btn.hide();\n\t\t\tedit_model.on( 'change:value', function () {\n\n\t\t\t\tself.model.set( {post_title: edit_model.get( 'value' )} );\n\t\t\t\tself.save.apply( self, arguments );\n\t\t\t\tself.$lessonTitle.show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).hide();\n\t\t\t\tedit_btn.show();\n\t\t\t} );\n\t\t\tedit_model.on( 'tvu_no_change', function () {\n\t\t\t\tself.$lessonTitle.html( self.model.get( 'post_title' ) ).show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).remove();\n\t\t\t\tedit_btn.show();\n\t\t\t} );\n\n\t\t\tvar textEdit = new ThriveApp.views.InputTitle( {\n\t\t\t\tmodel: edit_model,\n\t\t\t\tel: this.$el.find( '.tva-title-container' ),\n\t\t\t\ttagName: 'div',\n\t\t\t\tmethod: 'prepend'\n\t\t\t} );\n\n\t\t\tthis.$lessonTitle.hide();\n\t\t\ttextEdit.render();\n\t\t\ttextEdit.focus();\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\n\t\t\t\t\t/**\n\t\t\t\t\t * It's very sad that this need to be here but seems that after every save options object\n\t\t\t\t\t * which holds all xhr data is inserted in the model\n\t\t\t\t\t * having as key response var: https://www.screencast.com/t/KGRDtctLreL\n\t\t\t\t\t * This leeds to issues and unexpected behaviour if the model need to be used later on\n\t\t\t\t\t * into a normal ajax call\n\t\t\t\t\t */\n\n\t\t\t\t\tif ( self.model.get( response ) ) {\n\t\t\t\t\t\tself.model.unset( response )\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( self.changed_models.length > 0 ) {\n\t\t\t\t\t\t_.each( self.changed_models, function ( model ) {\n\t\t\t\t\t\t\tmodel.save();\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_render_content' );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery )\n//# sourceURL=workspace/admin/js/views/lesson/lesson-normal-state.js")},"lesson.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar list = require( '../course/items-list' );\n\n\tmodule.exports = list.extend( {\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model, 'change:state', this.renderState );\n\t\t\tthis.listenTo( this.model, 'change:checked', this.setChecked );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.renderState();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderState: function () {\n\t\t\tvar view = '';\n\n\t\t\tif ( this.model.get( 'state' ) === 'delete' ) {\n\t\t\t\tview = require( './lesson-delete-state' );\n\t\t\t} else {\n\t\t\t\tview = require( './lesson-normal-state' );\n\t\t\t}\n\n\t\t\tvar _view = new view( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\t_view.render();\n\t\t\tthis.$el.replaceWith( _view.$el );\n\t\t\tthis.setElement( _view.$el );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n} )( jQuery )\n//# sourceURL=workspace/admin/js/views/lesson/lesson.js")}},module:{"module.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar listView = require( '../course/items-list' );\n\n\tmodule.exports = listView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/module' ),\n\t\tclassName: 'tva-module-item tva-single-item',\n\t\t$_list: null,\n\t\tevents: function () {\n\t\t\treturn _.extend( {}, listView.prototype.events, {\n\t\t\t\t'click .tva-add-module-lesson': 'addLesson',\n\t\t\t\t'click .tva-add-module-chapter': 'addChapter',\n\t\t\t\t'click .tva-add-module-chapter-single': 'addChapter',\n\t\t\t\t'click .tva-edit-module': 'editModule',\n\t\t\t\t'click .tva-delete-module': 'deleteModule',\n\t\t\t\t'click .tva-edit-module-name': 'editTitle',\n\t\t\t\t'mousedown .tva-drag-module': function () {\n\t\t\t\t\tThriveApp.globals.moved_item = this.model;\n\t\t\t\t},\n\t\t\t\t'click .tva-drag-module': function ( e ) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model, 'change:checked', this.setChecked );\n\t\t\tthis.listenTo( this.model, 'change:expanded', this.render );\n\t\t\tthis.$el.attr( 'data-id', this.model.get( 'ID' ) );\n\t\t\tthis.$el.attr( 'id', 'tva-module-' + this.model.get( 'ID' ) );\n\n\t\t\tvar self = this;\n\n\t\t\tthis.model.on( 'tva_render_content', function () {\n\t\t\t\tself.render();\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.empty();\n\t\t\tvar status = 'tva-status-red',\n\t\t\t\tunpublished_lessons = false,\n\t\t\t\tlessons_count = this.model.get( 'lessons' ).length ? this.model.get( 'lessons' ).length : 0,\n\t\t\t\tchapters_count = this.model.get( 'chapters' ).length ? this.model.get( 'chapters' ).length : 0;\n\n\t\t\tif ( this.model.get( 'post_status' ) === 'publish' ) {\n\t\t\t\tvar children = this.model.hasChildren();\n\n\t\t\t\tif ( children ) {\n\t\t\t\t\tvar items_status = this.model.get( children ).listValue( 'post_status' ),\n\t\t\t\t\t\tdrafts = _.find( items_status, function ( item_status ) {\n\t\t\t\t\t\t\treturn item_status === 'draft'\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tstatus = drafts ? 'tva-status-yellow' : 'tva-status-green';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.model.hasChildren() === 'chapters' ) {\n\t\t\t\tthis.model.get( 'chapters' ).each( function ( chapter ) {\n\t\t\t\t\tif ( chapter.get( 'lessons' ).length ) {\n\t\t\t\t\t\tlessons_count = lessons_count += chapter.get( 'lessons' ).length;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( unpublished_lessons === false ) {\n\t\t\t\t\t\tunpublished_lessons = ! ! chapter.get( 'lessons' ).findWhere( {post_status: 'draft'} );\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tstatus: status,\n\t\t\t\tunpublished_lessons: unpublished_lessons,\n\t\t\t\tlessons_count: lessons_count,\n\t\t\t\tchapters_count: chapters_count\n\t\t\t} ) );\n\n\t\t\tthis.$moduleTitle = this.$( '.tva-module-title' );\n\t\t\tthis.renderContent();\n\n\t\t\tif ( ! this.model.get( 'expanded' ) ) {\n\t\t\t\tthis.$el.addClass( 'tva-module-collapsed' );\n\t\t\t}\n\n\t\t\tif ( chapters_count > 0 ) {\n\t\t\t\tthis.$( '.tva-chapters-count, .tva-brackets' ).removeClass( 'tva-hide' );\n\t\t\t}\n\n\t\t\tif ( lessons_count > 0 ) {\n\t\t\t\tthis.$( '.tva-lessons-count, .tva-brackets' ).removeClass( 'tva-hide' );\n\t\t\t\tif ( chapters_count > 0 ) {\n\t\t\t\t\tthis.$( '.tva-comma' ).removeClass( 'tva-hide' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lessons_count === 0 && chapters_count === 0 ) {\n\t\t\t\tthis.$( '.tva-empty' ).removeClass( 'tva-hide' );\n\t\t\t\tthis.$( '.tva-brackets' ).addClass( 'tva-gold' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tanimateItem: function () {\n\t\t\tlistView.prototype.animateItem.apply( this, arguments );\n\n\t\t\tif ( this.expanded && ( this.expanded.get( 'ID' ) !== this.model.get( 'ID' ) ) ) {\n\t\t\t\tthis.expanded.set( {expanded: false} );\n\t\t\t}\n\n\t\t\tThriveApp.globals.active_course.trigger( 'tva_apply_sortable' );\n\t\t},\n\t\tafterAddChapterModel: function () {\n\t\t\tthis.chapter_model.set( {\n\t\t\t\tcourse_id: this.model.get( 'course_id' ),\n\t\t\t\tpost_parent: this.model.get( 'ID' )\n\t\t\t} );\n\t\t},\n\t\tafterAddLessonModel: function () {\n\t\t\tthis.lesson_model.set( {post_parent: this.model.get( 'ID' )} );\n\t\t},\n\t\teditModule: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tthis.modal( ThriveApp.modals.ModuleModalEditor, {\n\t\t\t\tmodel: new ThriveApp.models.Module( this.model.toDeepJson() ),\n\t\t\t\tcollection: this.collection,\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal',\n\t\t\t\tviewName: 'ModuleEditor'\n\t\t\t} );\n\t\t},\n\t\tdeleteModule: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tThriveApp.globals.selected_items.reset();\n\t\t\tthis.modal( ThriveApp.modals.ModuleModalDelete, {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\tviewName: 'ModuleDelete',\n\t\t\t\t'max-width': '600px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-delete-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\teditTitle: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tvar self = this,\n\t\t\t\tedit_btn = this.$el.find( '.tva-edit-module-name' ),\n\t\t\t\tedit_model = new Backbone.Model( {\n\t\t\t\t\ttitle: this.model.get( 'post_title' ),\n\t\t\t\t\trequired: true\n\t\t\t\t} );\n\t\t\tedit_btn.hide();\n\t\t\tedit_model.on( 'change:value', function () {\n\n\t\t\t\tself.model.set( {post_title: edit_model.get( 'value' )} );\n\t\t\t\tself.save.apply( self, arguments );\n\t\t\t\tself.$moduleTitle.show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).hide();\n\t\t\t\tedit_btn.css( 'display', 'inline-block' );\n\t\t\t\tself.$moduleTitle.text( edit_model.get( 'value' ) );\n\n\n\t\t\t} );\n\t\t\tedit_model.on( 'tvu_no_change', function () {\n\t\t\t\tself.$moduleTitle.html( self.model.get( 'post_title' ) ).show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).remove();\n\t\t\t\tedit_btn.css( 'display', 'inline-block' );\n\t\t\t} );\n\n\t\t\tvar textEdit = new ThriveApp.views.InputTitle( {\n\t\t\t\tmodel: edit_model,\n\t\t\t\tel: this.$el.find( '.tva-module-title-container' ),\n\t\t\t\ttagName: 'div',\n\t\t\t\tmethod: 'append'\n\t\t\t} );\n\n\t\t\tthis.$moduleTitle.hide();\n\n\t\t\ttextEdit.render();\n\t\t\ttextEdit.focus();\n\t\t},\n\t\tsave: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar xhr = this.model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n} )( jQuery )\n//# sourceURL=workspace/admin/js/views/module/module.js")}},"select.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './base' );\n\n\tvar itemView = baseView.extend( {\n\t\trender: function () {\n\t\t\tthis.model.setListRequiredFields();\n\t\t\tthis.$el.append(\n\t\t\t\t'<div class=\"tva-material-option\" data-id=\"' + this.model.get( 'ID' ) + '\">' + this.model.get( 'name' ) + '</div>'\n\t\t\t);\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tvar selectedItem = baseView.extend( {\n\t\trender: function () {\n\t\t\tthis.$el.attr( 'data-id', this.model.get( 'ID' ) );\n\t\t\tthis.$el.html(\n\t\t\t\t'<div class=\"tva-selected-item\">' + this.model.get( 'name' ) + '</div>'\n\t\t\t);\n\n\t\t\treturn this\n\t\t}\n\t} );\n\n\tvar listView = baseView.extend( {\n\t\tinitialize: function ( options ) {\n\t\t\tthis.args = options.args;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.collection.each( function ( model ) {\n\t\t\t\tnew this.args.singleItemView( {\n\t\t\t\t\t\tmodel: model,\n\t\t\t\t\t\tel: this.$el\n\t\t\t\t\t}\n\t\t\t\t).render();\n\t\t\t}, this );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tmodule.exports = baseView.extend( {\n\t\tevents: {\n\t\t\t'click .tva-material-selected-option': 'onChange',\n\t\t\t'click .tva-material-option': 'onSelect'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.args = {\n\t\t\t\tclassName: '',\n\t\t\t\tdefaultValue: 'Select an option',\n\t\t\t\temptyMsg: 'No Results',\n\t\t\t\tmethod: 'html',\n\t\t\t\tsingleItemView: itemView,\n\t\t\t\tselectedItemView: selectedItem,\n\t\t\t\tlistItemsView: listView\n\t\t\t};\n\n\t\t\tthis.setDefaults( options.args );\n\t\t},\n\t\trenderEmptyMsg: function () {\n\t\t\tthis.$el.append( $( '<p/>' ).text( this.args.emptyMsg ) );\n\t\t},\n\t\tsetDefaults: function ( options ) {\n\t\t\tif ( typeof options !== 'object' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\tObject.keys( options ).forEach( function ( key ) {\n\n\t\t\t\tif ( self.args.hasOwnProperty( key ) ) {\n\t\t\t\t\tself.args[ key ] = options[ key ];\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( typeof key === 'string' ) {\n\t\t\t\t\tself.args[ key ] = options[ key ];\n\t\t\t\t}\n\t\t\t} )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el[ this.args.method ]( '<div class=\"tva-material-select ' + this.args.className + '\">' +\n\t\t\t                              '<div class=\"tva-material-selected-option\">' + this.args.defaultValue + '</div>' +\n\t\t\t                              '<div class=\"tva-material-options tva-hide\"></div>' +\n\t\t\t                              '</div>' );\n\n\t\t\tif ( this.collection.length === 0 ) {\n\t\t\t\tthis.renderEmptyMsg();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.renderSelectedValue();\n\n\t\t\tnew this.args.listItemsView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-material-options' ),\n\t\t\t\targs: this.args,\n\t\t\t\tcollection: this.collection\n\t\t\t} ).render();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderSelectedValue: function () {\n\t\t\tvar model = this.collection.findWhere( {selected: true} );\n\n\t\t\tif ( ! model ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnew this.args.selectedItemView( {\n\t\t\t\tmodel: model,\n\t\t\t\tel: this.$( '.tva-material-selected-option' )\n\t\t\t} ).render();\n\t\t},\n\t\tonChange: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tthis.$( e.currentTarget ).trigger( 'tva_clear_document', e );\n\t\t\tthis.$( '.tva-material-options' ).slideToggle();\n\t\t},\n\t\tonSelect: function ( e ) {\n\t\t\tvar id = parseInt( this.$( e.currentTarget ).data( 'id' ) ),\n\t\t\t\tmodel = this.collection.findWhere( {ID: id} );\n\n\t\t\tthis.$( '.tva-material-options' ).hide();\n\n\t\t\tif ( typeof model === 'undefined' || ! model instanceof Backbone.Model ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.collection.each( function ( item ) {\n\t\t\t\titem.set( {selected: false}, {silent: true} );\n\t\t\t}, this );\n\n\t\t\tmodel.set( {selected: true} );\n\n\t\t\tnew this.args.selectedItemView( {\n\t\t\t\tel: this.$( '.tva-material-selected-option' ),\n\t\t\t\tmodel: model\n\t\t\t} ).render();\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/select.js")},sendowl:{"add-product.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/add-product' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\tif ( false === ThriveApp.globals.soSettings.get( 'tutorial_completed' ) ) {\n\t\t\t\tThriveApp.globals.soSettings.set( {tutorial_completed: 1} );\n\t\t\t\tthis.save();\n\t\t\t}\n\n\t\t\tthis.bind_zclip();\n\t\t\treturn this\n\t\t},\n\t\tsave: function () {\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.sendowl + '/sendowl_tutorial/',\n\t\t\t\tdata: {\n\t\t\t\t\tsendowl_tutorial: {completed: 1}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/sendowl/add-product.js")},"checkout.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tvar pageStateView = baseView.extend( {\n\t\tevents: {\n\t\t\t'click .tva-remove-page': 'removePage',\n\t\t\t'click .tva-create-new-page': 'createPage',\n\t\t\t'click .tva-close': 'close',\n\t\t\t'click .tva-save': 'save',\n\t\t\t'click .tva-close-edit': 'closeEdit',\n\t\t\t'input .tva-sendowl-page': 'setPageTitle',\n\t\t\t'click .tva-remove': 'remove'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.deleteMsg = options.deleteMsg ? options.deleteMsg : ThriveApp.t.deleteThPage;\n\t\t\tthis.headlineMsg = options.headlineMsg ? options.headlineMsg : ThriveApp.t.setTyPage;\n\t\t\tthis.listenTo( this.model, 'change:state', this.render )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.setTemplate();\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tdeleteMsg: this.deleteMsg,\n\t\t\t\t\theadlineMsg: this.headlineMsg\n\t\t\t\t}\n\t\t\t) );\n\n\t\t\tif ( this.model.get( 'state' ) === 'empty' ) {\n\t\t\t\tthis.initializeCheckout();\n\t\t\t}\n\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetTemplate: function () {\n\t\t\tswitch ( this.model.get( 'state' ) ) {\n\t\t\t\tcase 'normal':\n\t\t\t\t\tthis.template = TVE_Dash.tpl( 'sendowl/checkout/page-state/normal' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'delete':\n\t\t\t\t\tthis.template = TVE_Dash.tpl( 'sendowl/checkout/page-state/delete' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'edit':\n\t\t\t\t\tthis.template = TVE_Dash.tpl( 'sendowl/checkout/page-state/edit' );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis.template = TVE_Dash.tpl( 'sendowl/checkout/page-state/create' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tsetPageTitle: function ( e ) {\n\t\t\tthis.model.set( {name: e.currentTarget.value} )\n\t\t},\n\t\tinitializeCheckout: function () {\n\t\t\tvar $post_search = this.$( '#tva-sendowl-checkout-page' ),\n\t\t\t\tmodel = this.model,\n\t\t\t\tself = this;\n\n\t\t\tnew ThriveApp.PostSearch( $post_search, {\n\t\t\t\turl: ThriveApp.routes.settings + '/search_pages/',\n\t\t\t\ttype: 'POST',\n\t\t\t\tselect: function ( event, ui ) {\n\t\t\t\t\tmodel.set( {\n\t\t\t\t\t\tID: parseInt( ui.item.id ),\n\t\t\t\t\t\tname: ui.item.label\n\t\t\t\t\t} );\n\n\t\t\t\t\tself.save();\n\t\t\t\t},\n\t\t\t\tsearch: function () {\n\t\t\t\t\tif ( model.get( 'ID' ) ) {\n\t\t\t\t\t\tmodel.set( {old_ID: model.get( 'ID' )} );\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.set( {\n\t\t\t\t\t\tID: '',\n\t\t\t\t\t\tname: ''\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t\topen: function () {\n\t\t\t\t\tif ( model.get( 'ID' ) ) {\n\t\t\t\t\t\tmodel.set( {old_ID: model.get( 'ID' )} );\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.set( {\n\t\t\t\t\t\tID: '',\n\t\t\t\t\t\tname: ''\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t\tclose: function ( event, ui ) {\n\t\t\t\t\tif ( model.get( 'ID' ) ) {\n\t\t\t\t\t\tmodel.set( {old_ID: model.get( 'ID' )} );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfetch_single: model.get( 'IS' )\n\t\t\t} );\n\t\t},\n\t\tremovePage: function () {\n\t\t\tthis.model.set( {state: 'delete'} );\n\t\t},\n\t\tclose: function () {\n\t\t\tif ( this.model.get( 'old_ID' ) ) {\n\t\t\t\tthis.model.set( {\n\t\t\t\t\tID: this.model.get( 'old_ID' ),\n\t\t\t\t\told_ID: ''\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\tthis.model.set( {\n\t\t\t\tstate: this.model.get( 'ID' ) ? 'normal' : 'empty',\n\t\t\t\tname: this.model.get( 'ID' ) ? this.model.get( 'name' ) : ''\n\t\t\t} );\n\t\t},\n\t\tcreatePage: function () {\n\t\t\tthis.undelegateEvents();\n\t\t\tthis.$el.empty();\n\n\t\t\tthis.model.set( {\n\t\t\t\told_page_name: this.model.get( 'name' ),\n\t\t\t\told_ID: this.model.get( 'ID' ),\n\t\t\t\tstate: 'edit'\n\t\t\t} );\n\n\t\t\tthis.model.unset( 'ID' );\n\n\t\t\tnew pageStateView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$el\n\t\t\t} ).render();\n\t\t},\n\t\tremove: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this,\n\t\t\t\txhr = this.model.destroy();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tvar _edit_text = self.model.get( 'edit_text' )\n\t\t\t\t\tself.model.clear( {silent: true} ).set( self.model.defaults() );\n\t\t\t\t\tself.model.set( {edit_text: _edit_text}, {silent: true} );\n\t\t\t\t\tself.render();\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.SuccessfulSave );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tsave: function ( model ) {\n\t\t\tmodel = model instanceof Backbone.Model ? model : this.model;\n\n\t\t\tif ( ! model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( model );\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar self = this,\n\t\t\t\txhr = model.save();\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tself.render();\n\t\t\t\t\tif ( false === ThriveApp.globals.soSettings.get( 'tcb_plugin_active' ) ) {\n\t\t\t\t\t\tself.$( '.tva-page-option' ).addClass( 'tcb-inactive' );\n\t\t\t\t\t}\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.SuccessfulSave, 3000, null, 'top' );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * View to render register options\n\t */\n\tvar registerOptions = pageStateView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/checkout/checkout' ),\n\t\tclassName: 'tva-tab tva-register-options',\n\t\tevents: {},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tnew pageStateView( {\n\t\t\t\tel: this.$( '.tva-registration-page-container' ),\n\t\t\t\tmodel: this.model,\n\t\t\t\tdeleteMsg: ThriveApp.t.deleteRegPage,\n\t\t\t\theadlineMsg: ThriveApp.t.setChPage\n\t\t\t} ).render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render redirect options for thankyou page\n\t */\n\tvar redirectOptionsView = pageStateView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/redirect' ),\n\t\tevents: {},\n\t\tinitialize: function () {\n\t\t\tThriveApp.globals.soSettings.get( 'welcome_message' ).on( 'tva_tinymce_blur', function () {\n\t\t\t\tthis.save( ThriveApp.globals.soSettings.get( 'welcome_message' ) );\n\t\t\t}, this )\n\t\t},\n\t\trender: function () {\n\n\t\t\tvar url = ThriveApp.globals.soSettings.get( 'preview_msg_url' ) + '?show_welcome_msg=true';\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tpreview: url\n\t\t\t} ) );\n\n\t\t\tnew pageStateView( {\n\t\t\t\tel: this.$( '.tva-thankyou-page-multiple' ),\n\t\t\t\tmodel: ThriveApp.globals.soSettings.get( 'thankyou_multiple_page' )\n\t\t\t} ).render();\n\n\t\t\tthis.renderMCE();\n\t\t\treturn this;\n\t\t},\n\t\trenderMCE: function () {\n\t\t\tvar self = this;\n\t\t\tsetTimeout( function () {\n\t\t\t\tvar editors = [ 'tva-thankyou-message' ];\n\t\t\t\tThriveApp.util.clearMCEEditor( editors );\n\t\t\t\tThriveApp.util.editorInit( 'tva-thankyou-message', ThriveApp.globals.soSettings.get( 'welcome_message' ), 'message' );\n\t\t\t\tTVE_Dash.materialize( self.$el );\n\t\t\t}, 0 );\n\t\t}\n\t} );\n\n\t/**\n\t * View to render thankyou page options\n\t */\n\tvar thankyouOptions = pageStateView.extend( {\n\t\tclassName: 'tva-tab tva-thankyou-options tva-hide',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/checkout/thankyou' ),\n\t\tevents: {\n\t\t\t'click .tva-thankyou-type': 'changeType'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tvar view = '',\n\t\t\t\tsoSettings = ThriveApp.globals.soSettings;\n\n\t\t\tswitch ( this.model.get( 'type' ) ) {\n\n\t\t\t\tcase 'static':\n\t\t\t\t\tview = pageStateView;\n\n\t\t\t\t\tthis.$( '.tva-thankyou-wrapper' ).html( '<div class=\"tva-static-thankyou-page\"></div>' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'redirect':\n\t\t\t\t\tview = redirectOptionsView;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar $el = this.model.get( 'type' ) === 'static' ? this.$( '.tva-static-thankyou-page' ) : this.$( '.tva-thankyou-wrapper' );\n\n\t\t\tnew view( {\n\t\t\t\tel: $el,\n\t\t\t\tmodel: soSettings.get( 'thankyou_page' )\n\t\t\t} ).render();\n\n\t\t\tif ( false === soSettings.get( 'tcb_plugin_active' ) ) {\n\t\t\t\tthis.$( '.tva-page-option' ).addClass( 'tcb-inactive' );\n\t\t\t}\n\n\t\t\tif ( false === soSettings.get( 'tutorial_completed' ) && 1 === soSettings.get( 'show_thankyou_tutorial' ) ) {\n\t\t\t\tthis.$( '.tva-notice' ).removeClass( 'tva-hide' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tchangeType: function ( e ) {\n\t\t\tthis.model.set( {type: e.currentTarget.dataset.type} );\n\n\t\t\tthis.save();\n\t\t}\n\t} );\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/checkout' ),\n\t\tevents: {\n\t\t\t'click .tva-tab-item': 'setActiveTab'\n\t\t},\n\t\tactiveTab: 'register',\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tthis.$( '.tva-checkout-tabs' ).append(\n\t\t\t\tnew registerOptions( {\n\t\t\t\t\tmodel: ThriveApp.globals.soSettings.get( 'checkout_page' )\n\t\t\t\t} ).render().$el\n\t\t\t);\n\n\t\t\tthis.$( '[data-tab=\"' + this.activeTab + '\"]' ).addClass( 'tva-active-tab' );\n\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetActiveTab: function ( e ) {\n\t\t\tvar tab = e.currentTarget.dataset.tab;\n\n\t\t\tif ( this.activeTab === tab ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.activeTab = tab;\n\n\t\t\tif ( ! this.renderThankyou ) {\n\t\t\t\tthis.$( '.tva-checkout-tabs' ).append(\n\t\t\t\t\tnew thankyouOptions( {\n\t\t\t\t\t\tmodel: ThriveApp.globals.soSettings.get( 'thankyou_page_type' )\n\t\t\t\t\t} ).render().$el\n\t\t\t\t);\n\n\t\t\t\tthis.renderThankyou = true;\n\t\t\t}\n\n\t\t\tthis.$( '.tva-tab-item' ).removeClass( 'tva-active-tab' );\n\t\t\tthis.$( e.currentTarget ).addClass( 'tva-active-tab' );\n\t\t\tthis.$( '.tva-tab' ).addClass( 'tva-hide' );\n\t\t\tthis.$( '.tva-' + tab + '-options' ).removeClass( 'tva-hide' );\n\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/sendowl/checkout.js")},"dashboard.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/settings' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template() );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/sendowl/dashboard.js")},"integration.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tvar keysView = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/keys' ),\n\t\tevents: {\n\t\t\t'input .tva-sendowl-input': 'setKey',\n\t\t\t'click .tva-save-keys': 'save'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: ThriveApp.globals.soSettings.get( 'account_keys' )} ) );\n\n\t\t\treturn this;\n\t\t},\n\t\tsetKey: function ( e ) {\n\t\t\tvar _attr = e.currentTarget.dataset.attr,\n\t\t\t\tobj = {};\n\n\t\t\tobj[ _attr ] = e.target.value;\n\n\t\t\tthis.model.set( obj );\n\t\t},\n\t\tvalidateModel: function () {\n\n\t\t\tif ( ! this.model.get( 'key' ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.emptyKey );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! this.model.get( 'secret' ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.emptySecret );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'key' ) === this.model.get( 'secret' ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.identicalKeys );\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\t\tsave: function () {\n\t\t\tif ( ! this.validateModel() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tself.$( '.tva-message' ).addClass( 'tva-hide' );\n\t\t\t\t\tif ( response ) {\n\n\t\t\t\t\t\tif ( true !== response && typeof response === 'object' ) {\n\n\t\t\t\t\t\t\t_.each( response, function ( key, value ) {\n\t\t\t\t\t\t\t\tself.$( '#' + value ).removeClass( 'tva-hide' );\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tself.$( '#so_msg' ).removeClass( 'tva-hide' );\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tTVE_Dash.success( ThriveApp.t.accountKeysSaved );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message, 5000 );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/integration' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tnew keysView( {\n\t\t\t\tmodel: this.model.get( 'account_keys' ),\n\t\t\t\tel: this.$( '.tva-account-keys-holder' )\n\t\t\t} ).render();\n\n\t\t\tthis.bind_zclip();\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/sendowl/integration.js")},"purchase-links.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './../base' ),\n\t\tlistView = require( './../select' ),\n\t\tproductsCollection = require( './../../collections/sendowl/products' ),\n\t\tbundlesCollection = require( './../../collections/sendowl/bundles' ),\n\t\tdiscountsCollection = require( './../../collections/sendowl/discounts' );\n\n\t/**\n\t * Base view for rendering a card box\n\t */\n\tvar card = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/purchase-links/list' ),\n\t\trender: function () {\n\t\t\tthis.$( '.tva-cards' ).append(\n\t\t\t\t'<div class=\"tva-box-card ' + this.cardClass + '\"></div>'\n\t\t\t);\n\t\t\tthis.$( '.' + this.cardClass ).html( this.template( {type: this.type} ) );\n\n\t\t\tthis.renderContent();\n\t\t\treturn this;\n\t\t},\n\t\trenderContent: function () {\n\t\t\treturn this;\n\t\t},\n\t\trenderEmptyMsg: function () {\n\t\t\tnew noContent( {\n\t\t\t\tel: this.$el,\n\t\t\t\ttype: this.args.type\n\t\t\t} ).render();\n\t\t}\n\t} );\n\n\tvar optionsCard = card.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/purchase-links/cards/options' ),\n\t\trenderContent: function () {\n\t\t\tthis.$( '.' + this.cardClass ).html( this.template( {} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tvar noContent = baseView.extend( {\n\t\tinitialize: function ( options ) {\n\t\t\tthis.type = options.type\n\t\t},\n\t\ttemplate: function () {\n\t\t\treturn TVE_Dash.tpl( 'sendowl/purchase-links/lists/empty/' + this.type );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render memberships card ( either products or bundles  )\n\t */\n\tvar membershipsCard = card.extend( {\n\t\tinitialize: function ( options ) {\n\t\t\tthis.cardClass = 'tva-so-' + options.type;\n\t\t\tthis.$( '.' + this.cardClass ).remove();\n\t\t\tthis.type = ThriveApp.util.getPlural( this.model.get( 'currentOption' ) );\n\t\t\tthis.collection = this.getCollection();\n\n\t\t\tvar self = this;\n\n\t\t\tthis.listenTo( this.collection, 'change:selected', function () {\n\t\t\t\tself.renderPurchaseLinks();\n\t\t\t} )\n\n\t\t},\n\t\trenderContent: function () {\n\t\t\tvar view = new listView( {\n\t\t\t\tcollection: this.collection,\n\t\t\t\targs: {\n\t\t\t\t\ttype: this.type\n\t\t\t\t},\n\t\t\t\tel: this.$( '.tva-sendowl-' + this.type )\n\t\t\t} );\n\n\t\t\tview.renderEmptyMsg = _.bind( this.renderEmptyMsg, view );\n\t\t\tview.render();\n\t\t\t! this.collection.length ? this.$( '.tva-sendowl-' + this.type + '-list' ).addClass( 'tva-empty-list' ) : '';\n\t\t},\n\t\tgetCollection: function () {\n\t\t\tvar collection = null;\n\n\t\t\tswitch ( this.model.get( 'currentOption' ) ) {\n\t\t\t\tcase 'product':\n\t\t\t\t\tcollection = new productsCollection( ThriveApp.data.sendowl.products );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bundle':\n\t\t\t\t\tcollection = new bundlesCollection( ThriveApp.data.sendowl.bundles );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn collection;\n\t\t},\n\t\trenderPurchaseLinks: function () {\n\t\t\tthis.$( '.tva-so-purchase-links' ).removeClass( 'tva-hide' );\n\n\t\t\tvar model = this.collection.findWhere( {selected: true} );\n\n\t\t\tmodel.get( 'queryParams' ).unset( 'thrv_so_discount' );\n\t\t\tthis.model.set( {currentProduct: model} );\n\n\t\t\tnew purchaseLinks( {\n\t\t\t\tmodel: model,\n\t\t\t\tel: this.$( '.tva-so-purchase-links' )\n\t\t\t} ).render();\n\n\t\t\tnew discountsCard( {\n\t\t\t\tel: this.$el,\n\t\t\t\tmodel: model,\n\t\t\t\ttype: 'discounts',\n\t\t\t\tcollection: new discountsCollection( ThriveApp.data.sendowl.discounts )\n\t\t\t} ).render();\n\t\t}\n\t} );\n\n\t/**\n\t * View to render discounts card\n\t */\n\tvar discountsCard = card.extend( {\n\t\tinitialize: function ( options ) {\n\t\t\tthis.cardClass = 'tva-so-' + options.type;\n\t\t\tthis.$( '.' + this.cardClass ).remove();\n\t\t\tthis.type = options.type;\n\n\t\t\tvar self = this;\n\n\t\t\tthis.listenTo( this.collection, 'change:selected', function ( model ) {\n\t\t\t\tself.model.get( 'queryParams' ).set( {thrv_so_discount: model.get( 'code' )} );\n\t\t\t} )\n\t\t},\n\t\trenderContent: function () {\n\t\t\tvar view = new listView( {\n\t\t\t\tcollection: this.collection,\n\t\t\t\targs: {\n\t\t\t\t\ttype: 'discounts'\n\t\t\t\t},\n\t\t\t\tel: this.$( '.tva-sendowl-' + this.type )\n\t\t\t} );\n\n\t\t\tview.renderEmptyMsg = _.bind( this.renderEmptyMsg, view );\n\t\t\tview.render();\n\t\t}\n\t} );\n\n\t/**\n\t * View to render purchase links\n\t */\n\tvar purchaseLinks = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/purchase-links/links' ),\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model.get( 'queryParams' ), 'change:thrv_so_discount', this.render );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tthis.bind_zclip();\n\n\t\t\tif ( ! ThriveApp.globals.settings.get( 'checkout_page' ).ID ) {\n\t\t\t\tthis.$( '.tva-purchase-url' ).addClass( 'tva-disable-copy' );\n\t\t\t\tthis.$( '.tva-purchase-html' ).addClass( 'tva-disable-copy' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/purchase-links/dashboard' ),\n\t\tevents: {\n\t\t\t'click .tva-product': 'onProductChange',\n\t\t\t'click .tva-refresh-items': 'refreshItems'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\t\t\tthis.$el.on( 'click', function ( e ) {\n\t\t\t\tvar $container = self.$( '.tva-material-options ' ),\n\t\t\t\t\t$element = self.$( '.tva-material-selected-option' );\n\n\t\t\t\tif ( ! $container.is( e.target ) && $container.has( e.target ).length === 0 && ! $element.is( e.target ) ) {\n\t\t\t\t\t$container.slideUp();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tnew optionsCard( {\n\t\t\t\ttype: 'options',\n\t\t\t\tel: this.$el\n\t\t\t} ).render();\n\n\t\t\tThriveApp.util.rebindWistiaFancyBoxes();\n\n\t\t\tif ( ! ThriveApp.globals.settings.get( 'checkout_page' ).ID ) {\n\t\t\t\tthis.$( '.tva-missing-checkout-page' ).removeClass( 'tva-hide' );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tonProductChange: function ( e ) {\n\t\t\tvar type = e.currentTarget.dataset.type;\n\n\t\t\tif ( this.model.get( 'currentOption' ) === type ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.model.set( {currentOption: e.currentTarget.dataset.type} );\n\n\t\t\tthis.$( '.tva-option' ).removeClass( 'active' );\n\t\t\tthis.$( e.currentTarget ).addClass( 'active' );\n\t\t\tthis.cleanUp();\n\t\t\tthis.renderMemberships();\n\t\t},\n\t\trenderMemberships: function () {\n\t\t\tnew membershipsCard( {\n\t\t\t\tmodel: this.model,\n\t\t\t\ttype: 'memberships',\n\t\t\t\tel: this.$el\n\t\t\t} ).render();\n\t\t},\n\t\tcleanUp: function () {\n\t\t\tthis.$( '.tva-so-memberships, .tva-so-purchase-links, .tva-so-discounts' ).empty();\n\t\t\tthis.$( '.tva-so-discounts, .tva-so-purchase-links' ).addClass( 'tva-hide' );\n\t\t},\n\t\trefreshItems: function ( e ) {\n\t\t\tvar type = this.$( e.currentTarget ).data( 'type' ),\n\t\t\t\tself = this;\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: ThriveApp.routes.settings + '/refresh_sendowl_' + type + '/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response.error ) {\n\t\t\t\t\tTVE_Dash.err( response.error, 5000 );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tThriveApp.data.sendowl[ type ] = response;\n\n\t\t\t\tvar _fn = 'after' + ThriveApp.util.upperFirst( type ) + 'Refresh';\n\n\t\t\t\tif ( typeof self[ _fn ] === 'function' ) {\n\t\t\t\t\tself[ _fn ]( response );\n\t\t\t\t}\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\n\t\t},\n\t\tafterProductsRefresh: function ( response ) {\n\t\t\tvar model = ThriveApp.globals.settings.get( 'membership_plugin' ).findWhere( {tag: 'sendowl'} );\n\n\t\t\tif ( model ) {\n\t\t\t\tmodel.set( {membership_levels: new ThriveApp.collections.MembermouseCollection( response )} )\n\t\t\t}\n\n\t\t\tthis.cleanUp();\n\t\t\tthis.renderMemberships();\n\t\t},\n\t\tafterBundlesRefresh: function ( response ) {\n\t\t\tvar model = ThriveApp.globals.settings.get( 'membership_plugin' ).findWhere( {tag: 'sendowl'} );\n\n\t\t\tif ( model ) {\n\t\t\t\tmodel.set( {bundles: new ThriveApp.collections.MembermouseCollection( response )} )\n\t\t\t}\n\n\t\t\tthis.cleanUp();\n\t\t\tthis.renderMemberships();\n\t\t},\n\t\tafterDiscountsRefresh: function ( response ) {\n\t\t\tthis.model.get( 'currentProduct' ).get( 'queryParams' ).unset( 'thrv_so_discount' );\n\n\t\t\tnew discountsCard( {\n\t\t\t\tmodel: this.model.get( 'currentProduct' ),\n\t\t\t\tel: this.$el,\n\t\t\t\ttype: 'discounts',\n\t\t\t\tcollection: new discountsCollection( ThriveApp.data.sendowl.discounts )\n\t\t\t} ).render();\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/sendowl/purchase-links.js")},"quickStart.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' )\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/quick-start' ),\n\t\trender: function () {\n\t\t\tvar sendowl = this.model.get( 'membership_plugin' ).findWhere( {tag: 'sendowl'} ),\n\t\t\t\taccess = false,\n\t\t\t\tstep_1_completed = sendowl.get( 'membership_levels' ).length > 0 || sendowl.get( 'bundles' ).length > 0;\n\n\t\t\tstep_1_completed = step_1_completed && 1 === parseInt( ThriveApp.globals.soSettings.get( 'tutorial_completed' ) );\n\n\t\t\tThriveApp.globals.courses.each( function ( course ) {\n\t\t\t\tif ( course.get( 'rules' ).hasSendOwlRule() ) {\n\t\t\t\t\taccess = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tsendowl: sendowl,\n\t\t\t\t\taccess: access,\n\t\t\t\t\tstep_1_completed: step_1_completed\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n} )( jQuery );\n\n//# sourceURL=workspace/admin/js/views/sendowl/quickStart.js")}},settings:{"advanced.js":function(exports,module,require){eval("var base = require( './../base' );\n\n( function ( $ ) {\n\n\tmodule.exports = base.extend( {\n\n\t\ttemplate: TVE_Dash.tpl( 'wizard/template-advanced-settings' ),\n\t\tevents: {\n\t\t\t'input .tva-no-ui-slider': 'slide',\n\t\t\t'change .tva-no-ui-slider': 'setValue',\n\t\t\t'change .tva_color_input_change': 'setSpectrum',\n\t\t\t'input .tva-slider-input': 'slide',\n\t\t\t'input .tva-text-change': 'text',\n\t\t\t'input .tva-attr-change': 'attrChange',\n\t\t\t'change .tva-checkbox': 'checkbox'\n\t\t},\n\n\t\tinitialize: function ( options ) {\n\n\t\t\tthis.available_settings = options.available_settings;\n\t\t},\n\n\t\trender: function () {\n\n\t\t\tthis.$el.empty().html( this.template( {\n\t\t\t\ttemplate: this.model.get( 'template' ),\n\t\t\t\tavailable_settings: this.available_settings\n\t\t\t} ) );\n\n\t\t\tvar self = this;\n\n\t\t\tthis.$( '#tva-headline-color, #tva-paragraph-color, #tva-course-title-color' ).spectrum( {\n\t\t\t\tcontainerClassName: 'tva-color-picker',\n\t\t\t\tallowEmpty: false,\n\t\t\t\tshowInitial: true,\n\t\t\t\tshowButtons: true,\n\t\t\t\tchooseText: \"Apply\",\n\t\t\t\tcancelText: \"Cancel\",\n\t\t\t\tpreferredFormat: \"hex\",\n\t\t\t\tchange: function ( color ) {\n\n\t\t\t\t\tvar name = this.name;\n\n\t\t\t\t\tself.model.get( 'template' )[ name ] = color ? color.toHexString() : '';\n\t\t\t\t},\n\t\t\t\tmove: function ( color ) {\n\t\t\t\t\tvar _color = color ? color.toHexString() : '',\n\t\t\t\t\t\tname = this.name,\n\t\t\t\t\t\telement = name.replace( '_color', '' );\n\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva_' + element, 'color', _color );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tThriveApp.util.Editor.init( this, this.model );\n\n\t\t\treturn this;\n\t\t},\n\n\t\tsetSpectrum: function ( e ) {\n\n\t\t\tvar name = this.$( e.currentTarget ).attr( 'name' ),\n\t\t\t\tcolor = this.$( e.currentTarget ).val(),\n\t\t\t\telement = name.replace( '_color', '' );\n\n\t\t\tthis.$( e.currentTarget ).spectrum( \"set\", color );\n\n\t\t\tthis.model.get( 'template' )[ name ] = color;\n\n\t\t\tThriveApp.util.Editor.apply( '.tva_' + element, 'color', color );\n\t\t},\n\n\t\tslide: function ( e ) {\n\n\t\t\tvar type = e.currentTarget.type,\n\t\t\t\ttarget = e.currentTarget,\n\t\t\t\tname = e.currentTarget.name,\n\t\t\t\trow = this.$( target ).closest( '.tva-card' );\n\n\t\t\tif ( type === 'range' ) {\n\t\t\t\trow.find( '#tva_' + name + '_input' ).val( target.value );\n\t\t\t} else {\n\t\t\t\trow.find( '#tva_' + name ).val( target.value );\n\n\t\t\t\tthis.setValue( e );\n\t\t\t}\n\n\t\t\tThriveApp.util.Editor.apply( '.tva_' + name, 'font-size', target.value, 'px' );\n\n\t\t\te.stopPropagation();\n\t\t},\n\n\t\ttext: function ( e ) {\n\n\t\t\tvar target = e.currentTarget,\n\t\t\t\tname = e.currentTarget.name;\n\t\t\tThriveApp.util.Editor.text( '.tva_' + name, target.value );\n\n\t\t\tthis.setValue( e );\n\t\t},\n\n\t\tcheckbox: function ( event ) {\n\n\t\t\tthis.model.get( 'template' )[ event.currentTarget.name ] = event.currentTarget.checked ? 1 : 0;\n\n\t\t\tThriveApp.util.Editor.collapse( this.model.get( 'template' ) );\n\t\t},\n\n\t\tattrChange: function ( e ) {\n\n\t\t\tvar target = e.currentTarget,\n\t\t\t\tname = e.currentTarget.name;\n\t\t\tThriveApp.util.Editor.attrChange( '.tva_' + name, target.value, 'placeholder' );\n\t\t\tthis.setAttrValue( e )\n\t\t},\n\n\t\tsetValue: function ( e ) {\n\n\t\t\tvar name = e.currentTarget.name,\n\t\t\t\tvalue = this.$( e.currentTarget ).hasClass( 'tva-text-change' ) ? e.currentTarget.value : parseFloat( e.currentTarget.value.replace( /,/g, \".\" ) );\n\n\t\t\tthis.model.get( 'template' )[ name ] = value;\n\t\t},\n\n\t\tsetAttrValue: function ( e ) {\n\n\t\t\tvar name = e.currentTarget.name,\n\t\t\t\tvalue = this.$( e.currentTarget ).hasClass( 'tva-attr-change' ) ? e.currentTarget.value : parseFloat( e.currentTarget.value.replace( /,/g, \".\" ) );\n\n\t\t\tthis.model.get( 'template' )[ name ] = value;\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/advanced.js")},fonts:{"googleFonts.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar safeFontsView = require( './safeFonts' );\n\n\tvar optionView = require( './type/row' );\n\n\tvar variantView = require( './type/variant' );\n\n\tmodule.exports = safeFontsView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/google-fonts' ),\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\t\t\tthis.model.on( 'fonts_changed', function () {\n\t\t\t\tself.selected_model = self.collection.findWhere( {family: self.model.get( 'template' ).font_family} );\n\n\t\t\t\tself.renderVariants();\n\t\t\t\tself.renderCharsets();\n\t\t\t} );\n\t\t},\n\t\trenderFonts: function () {\n\t\t\tthis.selected_model = this.collection.at( 0 );\n\t\t\tif ( this.model.get( 'template' ).font_family ) {\n\t\t\t\tthis.selected_model = this.collection.findWhere( {family: this.model.get( 'template' ).font_family} );\n\t\t\t}\n\n\t\t\tthis.collection.each( this.renderFont, this );\n\t\t\tthis.renderVariants();\n\t\t\tthis.renderCharsets();\n\t\t},\n\t\trenderFont: function ( font ) {\n\t\t\tvar selected = this.model.get( 'template' ).font_family,\n\t\t\t\tview = new optionView( {\n\t\t\t\t\tel: this.$( '#tva-fonts-select' ),\n\t\t\t\t\tmodel: font,\n\t\t\t\t\tselected: selected\n\t\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t},\n\t\trenderVariants: function () {\n\t\t\tif ( ! this.selected_model ) {\n\t\t\t\tthis.selected_model = this.collection.at( 0 )\n\t\t\t}\n\t\t\tthis.$( '#tva-regular-select' ).empty();\n\t\t\tthis.$( '#tva-bold-select' ).empty();\n\t\t\t_.each( this.selected_model.get( 'variants' ), this.renderVariant, this );\n\t\t\tTVE_Dash.materialize( this.$el );\n\n\t\t},\n\t\trenderVariant: function ( variant ) {\n\t\t\tif ( variant.indexOf( 'italic' ) !== - 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar $element = this.$( '#tva-regular-select' ),\n\t\t\t\tselected = this.model.get( 'template' ).font_regular;\n\n\t\t\tif ( variant === 'bold' || ( parseInt( variant ) > 400 && ! isNaN( parseInt( variant ) ) ) ) {\n\t\t\t\tthis.$( '.tva-bold-holder' ).show();\n\t\t\t\t$element = this.$( '#tva-bold-select' );\n\t\t\t\tselected = this.model.get( 'template' ).font_bold;\n\t\t\t} else {\n\t\t\t\tthis.$( '.tva-bold-holder' ).hide();\n\t\t\t}\n\n\t\t\tvar view = new variantView( {\n\t\t\t\tel: $element,\n\t\t\t\tmodel: variant,\n\t\t\t\tselected: selected\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t},\n\t\trenderCharsets: function () {\n\t\t\tif ( ! this.selected_model ) {\n\t\t\t\tthis.selected_model = this.collection.at( 0 )\n\t\t\t}\n\t\t\tthis.$( '#tva-charset-select' ).empty();\n\t\t\t_.each( this.selected_model.get( 'subsets' ), this.renderCharset, this );\n\t\t\tTVE_Dash.materialize( this.$el );\n\n\t\t},\n\t\trenderCharset: function ( charset ) {\n\t\t\tvar view = new variantView( {\n\t\t\t\tel: this.$( '#tva-charset-select' ),\n\t\t\t\tmodel: charset,\n\t\t\t\tselected: this.model.get( 'template' ).font_charset\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t}\n\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/fonts/googleFonts.js")},"safeFonts.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../../base' );\n\n\tvar optionView = require( './type/row' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/safe-fonts' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderFonts();\n\t\t\tTVE_Dash.materialize( this.$el );\n\t\t},\n\t\trenderFonts: function () {\n\t\t\tthis.collection.each( this.renderFont, this );\n\t\t},\n\t\trenderFont: function ( font ) {\n\t\t\tvar view = new optionView( {\n\t\t\t\tel: this.$( '#tva-fonts-select' ),\n\t\t\t\tmodel: font,\n\t\t\t\tselected: this.model.get( 'template' ).font_family\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t}\n\t} );\n\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/fonts/safeFonts.js")},type:{"row.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar baseView = require( '../../../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/font-row' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.selected = options.selected;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model, selected: this.selected} ) );\n\t\t\treturn this;\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/fonts/type/row.js")},"variant.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar rowView = require( './row' );\n\n\tmodule.exports = rowView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/variants-row' )\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/fonts/type/variant.js")}}},"index.js":function(exports,module,require){eval("( function () {\n\n\tvar advSettingsView = require( './advanced' );\n\n\tmodule.exports = advSettingsView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/template-index-settings' ),\n\t\trender: function () {\n\t\t\tthis.$el.empty().html( this.template( {\n\t\t\t\ttemplate: this.model.get( 'template' ),\n\t\t\t\tavailable_settings: this.available_settings\n\t\t\t} ) );\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/index.js")},"logo.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/logo-text' ),\n\t\trender: function () {\n\t\t\tthis.$el.empty();\n\t\t\tif ( this.model.get( 'template' ).logo_type ) {\n\t\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/logo.js")},"preview.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/preview' ),\n\t\trender: function () {\n\t\t\tvar url = this.model.get( 'iframe_url' ).replace( /^https?\\:/i, \"\" );\n\t\t\tthis.model.set( 'no_protocol_url', url );\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/preview.js")},"template-option.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/template-row' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.selected = options.selected;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model, selected: this.selected} ) );\n\t\t\treturn this;\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/template-option.js")},"template.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( '../base' );\n\n\tvar templateView = require( './template-option' );\n\n\tvar googleFontsView = require( './fonts/googleFonts' );\n\n\tvar safeFontsView = require( './fonts/safeFonts' );\n\n\tvar logoView = require( './logo' );\n\n\t/**\n\t * Render the template settings\n\t */\n\tmodule.exports = baseView.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'wizard/template-settings' ),\n\t\tevents: {\n\t\t\t'change #tva-fonts-source': 'setSource',\n\t\t\t'change #tva-fonts-select': 'setFont',\n\t\t\t'change #tva-regular-select': 'setRegular',\n\t\t\t'change #tva-bold-select': 'setBold',\n\t\t\t'change #tva-charset-select': 'setCharset',\n\t\t\t'change #tva-template-select': 'changeTemplate',\n\t\t\t'change #tva-main-color-select': 'setSpectrum',\n\t\t\t'click .tva-change-logo': 'changeLogo',\n\t\t\t'input .tva-text-change': 'inputLogo',\n\t\t\t'click #tva-logo-type': 'changeLogoType',\n\t\t\t'input #tva-logo-text': 'textLogo'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.edit = options.edit ? options.edit : false;\n\t\t\tthis.available_settings = options.available_settings;\n\t\t},\n\t\trender: function () {\n\t\t\tvar self = this;\n\t\t\tthis.$el.empty().html( this.template( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tedit: this.edit,\n\t\t\t\tavailable_settings: this.available_settings\n\t\t\t} ) );\n\t\t\tthis.collection.each( this.renderTemplate, this );\n\t\t\tthis.renderFonts();\n\t\t\tthis.renderTextLogo();\n\t\t\tthis.setLogoSize();\n\n\t\t\tthis.$( '#tva-fonts-select' ).select2( {\n\t\t\t\tmultiple: false\n\t\t\t} );\n\n\t\t\tthis.$( '#tva-main-color-select' ).spectrum( {\n\t\t\t\tcontainerClassName: 'tva-color-picker',\n\t\t\t\tallowEmpty: false,\n\t\t\t\tshowInitial: true,\n\t\t\t\tshowButtons: true,\n\t\t\t\tchooseText: \"Apply\",\n\t\t\t\tcancelText: \"Cancel\",\n\t\t\t\tpreferredFormat: \"hex\",\n\t\t\t\tshowInput: true,\n\t\t\t\tchange: function ( color ) {\n\t\t\t\t\tvar _color = color ? color.toHexString() : '',\n\t\t\t\t\t\tname = this.name;\n\n\t\t\t\t\tself.model.get( 'template' )[ name ] = _color;\n\t\t\t\t},\n\t\t\t\tmove: function ( color ) {\n\t\t\t\t\tvar _color = color ? color.toHexString() : '',\n\t\t\t\t\t\tname = this.name;\n\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva_' + name, 'color', _color );\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva_' + name, 'fill', _color, '', '#D0D0D0' );\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva_' + name + '_bg, header.tva-header ul.menu > li.h-cta', 'background-color', _color );\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva-sidebar-container ul a', 'color', _color );\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva_text_logo_size, a.lg', 'color', _color );\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva-cm-redesigned-breadcrumbs ul li a', 'color', _color, true, '#666666' );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\tsetLogoSize: function () {\n\t\t\tvar template = this.model.get( 'template' );\n\n\t\t\tif ( ! template.logo_size ) {\n\t\t\t\ttemplate.logo_size = true === template.logo_type\n\t\t\t\t\t? ThriveApp.util.Editor.iframe.find( '.tva_text_logo_size' ).css( 'font-size' )\n\t\t\t\t\t: ThriveApp.util.Editor.iframe.find( '.tva-img-logo' ).width();\n\n\t\t\t\ttemplate.logo_size = parseInt( template.logo_size );\n\n\t\t\t\tthis.$( '#tva_logo_size_input, #tva_logo_size' ).val( template.logo_size );\n\t\t\t\tthis.model.set( {template: template} );\n\t\t\t}\n\t\t},\n\t\tinputLogo: function ( e ) {\n\t\t\tvar value = $( e.currentTarget ).val();\n\n\t\t\tThriveApp.util.Editor.image( '.lg', value );\n\t\t\tthis.model.get( 'template' ).logo_url = value;\n\t\t},\n\t\tchangeLogoType: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tvar checked = $( e.currentTarget ).is( ':checked' );\n\n\t\t\tThriveApp.util.Editor.emptyElement( '.lg' );\n\n\t\t\tthis.model.get( 'template' ).logo_type = checked;\n\t\t\tthis.model.get( 'template' ).logo_url = '';\n\n\t\t\tthis.$( '.tva-change-logo-input' ).val( '' );\n\t\t\tthis.renderTextLogo();\n\n\t\t\tif ( checked ) {\n\t\t\t\tThriveApp.util.Editor.apply( '.tva-header .header-logo > a', 'font-size', this.model.get( 'template' ).logo_size, 'px' );\n\t\t\t}\n\t\t},\n\t\trenderTextLogo: function () {\n\n\t\t\tvar view = new logoView( {\n\t\t\t\tel: this.$( '.tva-text-logo-wrapper' )[ 0 ],\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\ttextLogo: function ( e ) {\n\t\t\tvar target = e.currentTarget,\n\t\t\t\t$span = ThriveApp.util.Editor.iframe.find( '.tva_text_logo_size' );\n\n\t\t\tThriveApp.util.Editor.text( '.lg', target.value );\n\n\t\t\t$span.length ? $span.text( target.value ) : ThriveApp.util.Editor.text( '.lg', target.value );\n\n\t\t\tThriveApp.util.Editor.apply( '.lg', 'font-size', this.model.get( 'template' ).logo_size, 'px' );\n\t\t\tThriveApp.util.Editor.apply( '.lg', 'color', this.model.get( 'template' ).main_color );\n\n\t\t\tthis.model.get( 'template' ).logo_url = target.value;\n\t\t},\n\t\tsetSpectrum: function ( e ) {\n\t\t\tvar name = $( e.currentTarget ).attr( 'name' ),\n\t\t\t\tcolor = $( e.currentTarget ).val();\n\n\t\t\t$( e.currentTarget ).spectrum( \"set\", color );\n\n\t\t\tthis.model.get( 'template' )[ name ] = color;\n\n\t\t\tThriveApp.util.Editor.apply( '.tva_' + name, 'color', color );\n\t\t\tThriveApp.util.Editor.apply( '.tva_' + name + '_bg', 'background-color', color );\n\t\t\tThriveApp.util.Editor.apply( '.tva-header > div ul li, header.tva-header ul.menu > li.h-cta', 'background-color', color, true, '#fff' );\n\t\t\tThriveApp.util.Editor.apply( 'header.tva-header ul.menu > li.h-cta', 'background-color', color, true, this.model.get( 'template' ).main_color );\n\t\t},\n\t\trenderTemplate: function ( template ) {\n\t\t\tvar view = new templateView( {\n\t\t\t\tel: this.$( '#tva-template-select' ),\n\t\t\t\tmodel: template,\n\t\t\t\tselected: this.model.get( 'template' ).ID\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\trenderFonts: function () {\n\t\t\tvar source = this.model.get( 'template' ).font_source,\n\t\t\t\tcollection = ThriveApp.globals.fonts,\n\t\t\t\tview = null;\n\n\t\t\tif ( source === 'google' ) {\n\t\t\t\tcollection = ThriveApp.globals.googlefonts;\n\t\t\t}\n\n\t\t\tswitch ( source ) {\n\t\t\t\tcase 'safe':\n\t\t\t\t\tview = safeFontsView;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'google':\n\t\t\t\t\tview = googleFontsView;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( ! view instanceof Backbone.View ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.fonts = new view( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: collection,\n\t\t\t\tel: this.$( '#tva-fonts' )\n\t\t\t} );\n\n\t\t\tthis.fonts.render();\n\t\t},\n\t\tsetSource: function ( e ) {\n\t\t\tthis.model.get( 'template' ).font_source = e.currentTarget.value;\n\t\t\tthis.model.get( 'template' ).font_family = '';\n\t\t\tthis.renderFonts();\n\t\t\tthis.setFont( this.$( '#tva-fonts-select' ) );\n\t\t},\n\t\tsetRegular: function ( e ) {\n\t\t\tthis.model.get( 'template' ).font_regular = e.currentTarget.value;\n\t\t\tthis.applyFontToHead();\n\t\t},\n\t\tsetBold: function ( e ) {\n\t\t\tthis.model.get( 'template' ).font_bold = e.currentTarget.value;\n\t\t\tthis.applyFontToHead();\n\t\t},\n\t\tsetCharset: function ( e ) {\n\t\t\tthis.model.get( 'template' ).font_charset = e.currentTarget.value;\n\t\t\tthis.applyFontToHead();\n\t\t},\n\t\tsetFont: function ( e ) {\n\t\t\tvar font = e.currentTarget ? e.currentTarget.value : e.val();\n\t\t\tvar source = this.model.get( 'template' ).font_source;\n\t\t\tthis.model.get( 'template' ).font_family = font;\n\n\t\t\tif ( source === 'google' ) {\n\t\t\t\tvar model = ThriveApp.globals.googlefonts.findWhere( {family: font} ),\n\t\t\t\t\tregular = '',\n\t\t\t\t\tbold = '';\n\n\t\t\t\t_.each( model.get( 'variants' ), function ( variant ) {\n\t\t\t\t\tif ( variant === 'regular' || ( parseInt( variant ) < 400 && ! isNaN( parseInt( variant ) ) && regular < parseInt( variant ) ) ) {\n\t\t\t\t\t\tregular = variant;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( variant === 'bold' || ( parseInt( variant ) > 400 && ! isNaN( parseInt( variant ) ) && bold < parseInt( variant ) ) ) {\n\t\t\t\t\t\tbold = variant;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tthis.model.get( 'template' ).font_regular = regular;\n\t\t\t\tthis.model.get( 'template' ).font_charset = model.get( 'subsets' )[ 0 ];\n\t\t\t\tthis.model.get( 'template' ).font_bold = bold;\n\n\t\t\t\tthis.applyFontToHead();\n\t\t\t}\n\n\t\t\tThriveApp.util.Editor.apply( 'body a', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body p', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body h1', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body h2', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body h3', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body h4', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body h5', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body span', 'font-family', font );\n\t\t\tThriveApp.util.Editor.apply( 'body strong', 'font-family', font );\n\t\t\tthis.model.trigger( 'fonts_changed' );\n\n\t\t},\n\t\tapplyFontToHead: function () {\n\t\t\tparams = {\n\t\t\t\tfamily: '',\n\t\t\t\tvariants: [],\n\t\t\t\tsubset: ''\n\t\t\t};\n\n\t\t\tparams.family = this.model.get( 'template' ).font_family;\n\t\t\tparams.subset = this.model.get( 'template' ).font_charset;\n\t\t\tparams.variants.push( this.model.get( 'template' ).font_regular );\n\t\t\tparams.variants.push( this.model.get( 'template' ).font_bold );\n\n\t\t\tvar font_url = ThriveApp.util.FontManager.generate_link( params );\n\n\t\t\tThriveApp.util.Editor.font_to_head( font_url );\n\n\t\t\tthis.model.get( 'template' ).font_url = font_url;\n\t\t},\n\t\tchangeTemplate: function ( e ) {\n\t\t\tvar template = e.currentTarget.value,\n\t\t\t\tmodel = this.collection.findWhere( {ID: parseInt( template )} );\n\n\t\t\tthis.model.changeTemplate( model );\n\n\t\t},\n\t\tchangeLogo: function () {\n\t\t\tvar frame,\n\t\t\t\tself = this;\n\n\t\t\tif ( frame ) {\n\t\t\t\tframe.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tframe = wp.media( {\n\t\t\t\ttitle: 'Select or Upload Your Logo',\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: 'Use this logo'\n\t\t\t\t},\n\t\t\t\tmultiple: false,  // Set to true to allow multiple files to be selected\n\t\t\t\tlibrary: {type: 'image'}\n\t\t\t} );\n\n\t\t\tframe.on( 'select', function () {\n\t\t\t\t$( '.tva-logo-type' ).prop( 'checked', false );\n\t\t\t\t$( '#tva-logo-text' ).val( '' );\n\t\t\t\tself.model.get( 'template' ).logo_type = false;\n\n\t\t\t\t$( '.tva-change-logo-input' ).val( '' );\n\n\t\t\t\t// Get media attachment details from the frame state\n\t\t\t\tvar attachment = frame.state().get( 'selection' ).first().toJSON();\n\t\t\t\tThriveApp.util.Editor.image( '.lg', attachment.url, attachment );\n\t\t\t\tself.model.get( 'template' ).logo_url = attachment.url;\n\n\t\t\t\tThriveApp.util.Editor.iframe.find( '.lg > img' ).addClass( 'tva_logo_size' );\n\t\t\t\tThriveApp.util.Editor.apply( '.tva_logo_size', 'width', self.model.get( 'template' ).logo_size, 'px' );\n\t\t\t\tThriveApp.util.Editor.apply( '.lg', 'font-size', 'inherit' );\n\t\t\t\tThriveApp.util.Editor.apply( '.tva-img-logo, .tva_logo_size', 'max-width', 600, 'px' );\n\t\t\t\tThriveApp.util.Editor.apply( '.tva-img-logo, .tva_logo_size', 'max-height', 300, 'px' );\n\n\t\t\t\tself.render();\n\t\t\t\tTVE_Dash.materialize( self.$el );\n\t\t\t} );\n\n\t\t\t// Finally, open the modal on click\n\t\t\tframe.open();\n\t\t}\n\t} );\n\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/settings/template.js")}},"ta-dashboard.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './base' );\n\n\tvar filtersView = require( './filters/list' );\n\n\tvar coursesListView = require( './courses/list' );\n\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'dashboard' ),\n\t\tevents: {\n\t\t\t'click .tva-add-course': 'addCourse',\n\t\t\t'click .tva-toggle-filters': 'toggleFilters'\n\t\t},\n\t\tcourseList: '',\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\tif ( this.model.get( 'is_thrivetheme' ) && this.model.get( 'apprentice' ) && ! this.model.get( 'import' ) && ! this.model.get( 'first_time' ) && this.model.get( 'has_importcourses' ) ) {\n\t\t\t\tthis.modal( ThriveApp.modals.ModalImportLessons, {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t'max-width': '60%',\n\t\t\t\t\twidth: '800px'\n\t\t\t\t} );\n\t\t\t}\n\t\t\tthis.renderFilters();\n\n\t\t\t$( 'body' ).on( 'click', function ( e ) {\n\t\t\t\tvar container = $( '.tva-filters-wrapper' );\n\t\t\t\tvar btn = $( '.tva-toggle-filters' );\n\n\t\t\t\tif ( ! container.is( e.target ) && container.has( e.target ).length === 0 && ! btn.is( e.target ) ) {\n\t\t\t\t\tcontainer.slideUp();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.courseList = new coursesListView( {\n\t\t\t\tel: this.$el.find( '#tva-courses-list' ),\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\tthis.courseList.render();\n\t\t\tthis.toggleNoCoursesText();\n\n\t\t\tTVE_Dash.hideLoader();\n\t\t\treturn this;\n\t\t},\n\t\taddCourse: function () {\n\t\t\tThriveApp.router.navigate( \"#add_course\", {trigger: true} );\n\t\t},\n\t\ttoggleNoCoursesText: function () {\n\n\t\t\tif ( this.collection.length ) {\n\t\t\t\tthis.$( '#tva-no-courses-text' ).hide();\n\t\t\t} else {\n\t\t\t\tthis.$( '#tva-no-courses-text' ).show();\n\t\t\t}\n\n\t\t\tif ( this.collection.length == 1 ) {\n\t\t\t\tthis.$el.find( '#tva-one-courses-text' ).show();\n\t\t\t} else {\n\t\t\t\tthis.$el.find( '#tva-one-courses-text' ).hide();\n\t\t\t}\n\t\t},\n\t\trenderFilters: function () {\n\t\t\tvar view = new filtersView( {\n\t\t\t\tel: this.$( '.tva-filters-container' ),\n\t\t\t\tcollection: ThriveApp.globals.topics\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\ttoggleFilters: function () {\n\t\t\tthis.$( '.tva-filters-wrapper' ).slideToggle();\n\t\t}\n\t} )\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/ta-dashboard.js")},"wizard.js":function(exports,module,require){eval("( function ( $ ) {\n\n\tvar baseView = require( './base' );\n\n\tvar previewView = require( './settings/preview' );\n\n\tvar templateSettingsView = require( './settings/template' );\n\n\tvar advancedSettingsView = require( './settings/advanced' );\n\n\tvar indexSettingsView = require( './settings/index' );\n\n\t/**\n\t * Wizard view\n\t */\n\tmodule.exports = baseView.extend( {\n\t\tclassName: 'tva-wizard-container',\n\t\ttemplate: TVE_Dash.tpl( 'wizard' ),\n\t\tevents: {\n\t\t\t'click .save-template': 'save',\n\t\t\t'click .tva-close': 'close',\n\t\t\t'click .tva-advanced-settings': 'showAdvancedSettings',\n\t\t\t'click .tva-apprentice-template': 'showCourseList',\n\t\t\t'click .tva-go-back': 'showTemplateSettings',\n\t\t\t'click .tva-live': 'showLive',\n\t\t\t'click .tva-mock-up': 'showMockUp',\n\t\t\t'click .tva-card-title': 'openCardContent',\n\t\t\t'input .tva-slider-input': 'slide',\n\t\t\t'input .tva-no-ui-slider': 'slide',\n\t\t\t'change .tva-no-ui-slider': 'setValue'\n\t\t},\n\t\tpreview: '',\n\t\tsettings: '',\n\t\tinitialize: function ( options ) {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this;\n\t\t\tThriveApp.globals.wizzard = this;\n\n\t\t\tThriveApp.globals.wizzard.on( 'tva_iframe_loaded', function () {\n\t\t\t\tThriveApp.util.Editor.init();\n\t\t\t\tself.renderSettings();\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\n\t\t\t$( '.dismiss-notice, .notice-dismiss' ).on( 'click', function () {\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\tself.calcHeight();\n\t\t\t\t}, 200 );\n\t\t\t} );\n\n\t\t\tthis.listenTo( this.model, 'change:template', this.render );\n\t\t\tthis.listenTo( this.model, 'change:current_page', this.render );\n\t\t\tthis.edit = options.edit ? options.edit : false;\n\t\t\tthis.original_model = options.original_model;\n\t\t\tthis.model.set( {advanced: false} );\n\t\t},\n\t\trender: function () {\n\t\t\t/**\n\t\t\t * if we don't have any courses and the preview is set to see live move the switch to mock-up\n\t\t\t */\n\t\t\tvar published = ThriveApp.globals.courses.where( {status: 'publish'} );\n\n\t\t\tif ( this.model.get( 'preview_option' ) && published.length === 0 ) {\n\t\t\t\tthis.model.set( {preview_option: false} );\n\t\t\t}\n\n\t\t\tif ( published.length === 0 && this.model.get( 'preview_notification' ) ) {\n\t\t\t\tthis.modal( ThriveApp.modals.ModalFirstTimeNotification, {\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t'max-width': '60%',\n\t\t\t\t\twidth: '800px'\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {model: this.model, published: published} ) );\n\n\t\t\tthis.renderPreview();\n\n\t\t\treturn this\n\t\t},\n\t\tcalcHeight: function () {\n\t\t\tvar height = $( '.notice' ).outerHeight() + $( '.update-nag' ).outerHeight() + 'px';\n\t\t\tthis.$el.css( {height: height} );\n\t\t},\n\t\trenderPreview: function () {\n\t\t\tthis.preview = new previewView( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tel: this.$( '.tva-template-container' )\n\t\t\t} );\n\n\t\t\tthis.preview.render();\n\t\t},\n\t\trenderSettings: function () {\n\n\t\t\tvar state = this.model.get( 'current_page' ),\n\t\t\t\tview = null;\n\n\t\t\tswitch ( state ) {\n\t\t\t\tcase 'template':\n\t\t\t\t\tview = templateSettingsView;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'advanced':\n\t\t\t\t\tview = advancedSettingsView;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'index':\n\t\t\t\t\tview = indexSettingsView;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( ! view instanceof Backbone.View ) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.settings = new view( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\tavailable_settings: ThriveApp.globals.available_settings,\n\t\t\t\tedit: this.edit,\n\t\t\t\tel: this.$( '.tva-options-container' )\n\t\t\t} );\n\n\t\t\tthis.settings.render();\n\n\t\t\t//Hide notices on template settings view\n\n\t\t\tif ( $( '.tva-header' ).prevAll().length > 1 ) {\n\n\t\t\t\t$( '.tva-header' ).prevAll().css( \"display\", \"none\" );\n\n\t\t\t}\n\n\t\t\tTVE_Dash.materialize( this.$el );\n\n\t\t},\n\t\tshowLive: function () {\n\t\t\tthis.switchPreview( true );\n\t\t},\n\t\tshowMockUp: function () {\n\t\t\tthis.switchPreview( false );\n\t\t},\n\t\tswitchPreview: function ( value ) {\n\t\t\tvar self = this;\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/switch_preview/',\n\t\t\t\tdata: {\n\t\t\t\t\tpreview_option: value\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response.url ) {\n\n\t\t\t\t\tvar iframe_url = self.model.get( 'current_page' ) === 'index' ? self.model.get( 'apprentice_url' ) : response.url;\n\n\t\t\t\t\tself.model.set( {preview_option: value, iframe_url: iframe_url, preview_url: response.url} );\n\t\t\t\t\tThriveApp.globals.settings.set( {\n\t\t\t\t\t\tpreview_option: value,\n\t\t\t\t\t\tiframe_url: iframe_url,\n\t\t\t\t\t\tpreview_url: response.url\n\t\t\t\t\t} );\n\n\t\t\t\t\tself.render();\n\t\t\t\t}\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tshowTemplateSettings: function () {\n\n\t\t\tthis.model.set( {iframe_url: this.model.get( 'preview_url' ), current_page: 'template'} );\n\t\t},\n\t\tshowAdvancedSettings: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar self = this;\n\n\t\t\tself.model.set( {\n\t\t\t\tmembership_plugin: {},\n\t\t\t\tsendowl_products: {}\n\t\t\t} );\n\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/set_advanced_user_settings/',\n\t\t\t\tdata: {\n\t\t\t\t\ttemplate: self.model.toDeepJSON()\n\t\t\t\t}\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tself.model.set( {\n\t\t\t\t\tiframe_url: response.url,\n\t\t\t\t\tcurrent_page: 'advanced',\n\t\t\t\t\tpreview_notification: false,\n\t\t\t\t\tadvanced: true\n\t\t\t\t} );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\n\t\t},\n\t\tshowCourseList: function () {\n\t\t\tif ( this.model.get( 'apprentice_url' ) ) {\n\t\t\t\tthis.model.set( {iframe_url: this.model.get( 'apprentice_url' )} );\n\t\t\t}\n\n\t\t\tthis.model.set( {current_page: 'index'} );\n\t\t},\n\t\topenCardContent: function ( e ) {\n\t\t\tvar currentCard = e.currentTarget;\n\t\t\tif ( jQuery( currentCard ).siblings( \".tva-card-content\" ).hasClass( \"open\" ) ) {\n\t\t\t\tjQuery( currentCard ).siblings( \".tva-card-content\" ).removeClass( \"open\" );\n\t\t\t\tjQuery( currentCard ).children( \".tva-arrow\" ).css( \"transform\", \"rotate(45deg)\" );\n\t\t\t} else {\n\t\t\t\tjQuery( currentCard ).siblings( \".tva-card-content\" ).addClass( \"open\" );\n\t\t\t\tjQuery( currentCard ).children( \".tva-arrow\" ).css( \"transform\", \"rotate(225deg)\" );\n\t\t\t}\n\n\t\t},\n\t\tsave: function () {\n\n\t\t\tTVE_Dash.showLoader();\n\t\t\tthis.model.set( {first_time: false} );\n\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\tself.original_model.set( {template: response.template} );\n\t\t\t\t\t\tself.original_model.set( 'first_time', false );\n\t\t\t\t\t}\n\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.TemplateSaved );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tslide: function ( e ) {\n\t\t\tvar type = e.currentTarget.type,\n\t\t\t\ttarget = e.currentTarget,\n\t\t\t\tname = e.currentTarget.name,\n\t\t\t\trow = $( target ).closest( '.tva-card-content' );\n\n\t\t\tif ( type == 'range' ) {\n\t\t\t\trow.find( '#tva_' + name + '_input' ).val( target.value );\n\t\t\t} else {\n\t\t\t\trow.find( '#tva_' + name ).val( target.value );\n\n\t\t\t\tthis.setValue( e );\n\t\t\t}\n\n\t\t\tThriveApp.util.Editor.apply( '.tva_' + name, 'width', target.value, 'px' );\n\t\t\tThriveApp.util.Editor.apply( '.tva-img-logo', 'width', target.value, 'px' );\n\t\t\tThriveApp.util.Editor.apply( '.tva-img-logo, .tva_logo_size', 'max-width', 600, 'px' );\n\t\t\tThriveApp.util.Editor.apply( '.tva-img-logo, .tva_logo_size', 'max-height', 300, 'px' );\n\n\t\t\tif ( name === 'logo_size' && this.model.get( 'template' ).logo_type ) {\n\t\t\t\tvar $span = ThriveApp.util.Editor.iframe.find( '.tva_text_logo_size' );\n\n\t\t\t\tif ( $span.length > 0 ) {\n\t\t\t\t\tThriveApp.util.Editor.apply( '.tva-header .header-logo .tva_text_logo_size', 'font-size', target.value, 'px' );\n\t\t\t\t} else {\n\t\t\t\t\tThriveApp.util.Editor.apply( '.header-logo > a', 'font-size', target.value, 'px' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\te.stopPropagation();\n\t\t},\n\t\tsetValue: function ( e ) {\n\t\t\tvar name = e.currentTarget.name,\n\t\t\t\tvalue = $( e.currentTarget ).hasClass( 'tva-text-change' ) ? e.currentTarget.value : parseFloat( e.currentTarget.value.replace( /,/g, \".\" ) );\n\n\t\t\tthis.model.get( 'template' )[ name ] = value;\n\t\t},\n\t\tclose: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tif ( this.model.get( 'old_template' ) ) {\n\t\t\t\tthis.model.set( {template: this.model.get( 'old_template' )} );\n\t\t\t\tthis.model.unset( 'old_template' );\n\n\t\t\t\tthis.save();\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Set the preview option in case it was changed\n\t\t\t\t */\n\t\t\t\tthis.original_model.set( {preview_option: this.model.get( 'preview_option' )} );\n\t\t\t\tthis.original_model.set( {iframe_url: this.model.get( 'iframe_url' )} );\n\n\t\t\t\tif ( this.model.get( 'first_time' ) ) {\n\t\t\t\t\tthis.showCloseNotification();\n\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} else {\n\t\t\t\t\tif ( _.isEqual( this.model.get( 'template' ), this.original_model.get( 'template' ) ) ) {\n\t\t\t\t\t\tThriveApp.router.navigate( \"#dashboard\", {trigger: true} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showCloseNotification();\n\t\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tshowCloseNotification: function () {\n\t\t\tthis.modal( ThriveApp.modals.ConfirmEditorClose, {\n\t\t\t\t'max-width': '60%',\n\t\t\t\twidth: '800px',\n\t\t\t\tmodel: this.model,\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 0\n\t\t\t} );\n\t\t}\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views/wizard.js")}},"views.js":function(exports,module,require){
eval("( function ( $ ) {\n\n\tvar views = {};\n\n\tThriveApp.views = ThriveApp.views || {};\n\n\tviews.Base = require( './views/base' );\n\n\t/**\n\t * Start With The greeting modal\n\t */\n\tviews.Start = views.Base.extend( {\n\t\trender: function () {\n\t\t\tthis.modal( ThriveApp.modals.ModalGreetings, {\n\t\t\t\tmodel: this.model,\n\t\t\t\t'max-width': '60%',\n\t\t\t\twidth: '800px',\n\t\t\t\t// height: '500',\n\t\t\t\tno_close: true,\n\t\t\t\tdismissible: false\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Import Dashboard\n\t */\n\tviews.Import = views.Base.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'import' ),\n\t\tevents: {\n\t\t\t'click .tva-import-courses': 'import',\n\t\t\t'click .tva-select-all-courses': 'toggleChecked'\n\t\t},\n\t\tchecked: '',\n\t\trender: function () {\n\n\t\t\tthis.$el.html( this.template() );\n\t\t\tthis.collection.each( this.renderCourse, this );\n\t\t\tthis.checkAllCourses();\n\n\t\t\t$( \" body \" ).css( \"overflow\", \"hidden\" );\n\n\t\t\tif ( $( '.tva-header' ).prevAll().length > 1 ) {\n\t\t\t\t$( '.tva-header' ).prevAll().css( \"display\", \"none\" );\n\t\t\t}\n\n\t\t\treturn this\n\t\t},\n\t\trenderCourse: function ( course ) {\n\t\t\tvar view = new views.OldCourse( {\n\t\t\t\tmodel: course\n\t\t\t} );\n\t\t\tthis.$( '.tva-courses-container' ).append( view.render().$el );\n\t\t},\n\t\tcheckAllCourses: function () {\n\t\t\tvar check = true,\n\t\t\t\tnot_checked = this.collection.findWhere( {checked: false} );\n\t\t\tif ( ! not_checked ) {\n\t\t\t\tthis.collection.each( function ( course ) {\n\t\t\t\t\tvar lessons_not_checked = course.get( 'lessons' ).findWhere( {checked: false} );\n\t\t\t\t\tif ( lessons_not_checked ) {\n\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t}\n\t\t\t\t}, this );\n\t\t\t} else {\n\t\t\t\tcheck = false;\n\t\t\t}\n\n\t\t\tthis.$( '.tva-select-all-courses' ).prop( 'checked', check )\n\t\t},\n\t\ttoggleChecked: function ( e ) {\n\t\t\tthis.checked = $( e.currentTarget ).is( ':checked' );\n\t\t\tthis.$( '.tva-course-checkbox' ).prop( 'checked', this.checked );\n\t\t\tthis.collection.each( this.toggleCourses, this );\n\n\t\t},\n\t\ttoggleCourses: function ( course ) {\n\t\t\tvar lessons = course.get( 'lessons' );\n\t\t\tcourse.set( {checked: this.checked} );\n\n\t\t\tthis.$( '.tva-lesson-checkbox' ).prop( 'checked', this.checked );\n\n\t\t\tlessons.each( function ( model ) {\n\t\t\t\tmodel.set( {checked: this.checked} );\n\t\t\t}, this );\n\t\t},\n\t\timport: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar courses = this.collection.where( {checked: true} ),\n\t\t\t\t/** Before saving and adding the courses to the collection we should set the order */\n\t\t\t\torder = ThriveApp.globals.courses.length,\n\t\t\t\tlength = courses.length - 1;\n\n\t\t\tif ( courses.length == 0 ) {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\tTVE_Dash.err( ThriveApp.t.SelectLessonCourse );\n\t\t\t}\n\n\t\t\t_.each( courses, function ( course, index ) {\n\t\t\t\tvar exists = ThriveApp.globals.courses.findWhere( {name: course.get( 'name' )} );\n\n\t\t\t\tif ( ! exists ) {\n\t\t\t\t\tcourse.set( {order: order} );\n\t\t\t\t\torder ++;\n\t\t\t\t} else {\n\t\t\t\t\tcourse.set( {order: exists.get( 'order' )} );\n\t\t\t\t}\n\t\t\t\tvar xhr = course.save();\n\n\t\t\t\tif ( xhr ) {\n\t\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\t\tvar exists = ThriveApp.globals.courses.findWhere( {name: course.get( 'name' )} );\n\t\t\t\t\t\tif ( ! exists ) {\n\t\t\t\t\t\t\tcourse.set( 'ID', response.term_id );\n\t\t\t\t\t\t\tcourse.set( 'url', response.url );\n\t\t\t\t\t\t\tif ( response.lessons ) {\n\t\t\t\t\t\t\t\tcourse.set( {lessons: new ThriveApp.collections.Lessons( response.lessons )} );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcourse.set( {lessons: new ThriveApp.collections.Lessons()} );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcourse.set( {lessons_count: course.get( 'lessons' ).length} );\n\t\t\t\t\t\t\tThriveApp.globals.courses.add( course, {at: ThriveApp.globals.courses.length} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( response.lessons ) {\n\t\t\t\t\t\t\t\texists.get( 'lessons' ).add( response.lessons );\n\t\t\t\t\t\t\t\texists.set( {lessons_count: exists.get( 'lessons' ).length} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( index == length ) {\n\t\t\t\t\t\t\tThriveApp.router.navigate( \"#dashboard\", {trigger: true} );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t\t\t} );\n\t\t\t\t\txhr.always( function () {\n\t\t\t\t\t\tif ( index == length ) {\n\t\t\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}, this );\n\t\t}\n\t} );\n\n\tviews.OldCourse = views.Base.extend( {\n\t\tclassName: 'tva-course-container',\n\t\ttagName: 'div',\n\t\ttemplate: TVE_Dash.tpl( 'import/course' ),\n\t\tevents: {\n\t\t\t'click .tva-course-checkbox': 'toggleChecked'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.model.set( {exists: false} );\n\t\t\t//check if the course already exists\n\t\t\tvar exists = ThriveApp.globals.courses.findWhere( {name: this.model.get( 'name' )} ),\n\t\t\t\tlessons = this.model.get( 'lessons' ).findWhere( {imported: ''} );\n\n\t\t\tif ( exists && ! lessons ) {\n\t\t\t\tthis.model.set( {exists: true} );\n\t\t\t\tthis.model.set( {checked: false} );\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\tthis.model.get( 'lessons' ).each( this.renderLessons, this );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderLessons: function ( lesson ) {\n\t\t\tvar view = new views.OldLesson( {\n\t\t\t\tmodel: lesson,\n\t\t\t\tcourse: this.model\n\t\t\t} );\n\t\t\tthis.$( '.tva-lessons-container' ).append( view.render().$el );\n\t\t},\n\t\ttoggleChecked: function ( e ) {\n\t\t\tvar checked = $( e.currentTarget ).is( ':checked' ),\n\t\t\t\tlessons = this.model.get( 'lessons' );\n\t\t\tthis.model.set( {checked: checked} );\n\n\t\t\tthis.$( '.tva-lesson-checkbox' ).prop( 'checked', checked );\n\n\t\t\tlessons.each( function ( model ) {\n\t\t\t\tmodel.set( {checked: checked} );\n\t\t\t}, this );\n\t\t}\n\t} );\n\n\tviews.OldLesson = views.Base.extend( {\n\t\ttagName: 'li',\n\t\ttemplate: TVE_Dash.tpl( 'import/lesson' ),\n\t\tevents: {\n\t\t\t'click .tva-lesson-checkbox': 'toggleChecked'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.course = options.course;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, course: this.course} ) );\n\n\t\t\treturn this\n\t\t},\n\t\ttoggleChecked: function ( e ) {\n\t\t\tvar checked = $( e.currentTarget ).is( ':checked' );\n\n\t\t\tthis.model.set( {checked: checked} );\n\n\t\t\tif ( checked ) {\n\t\t\t\tthis.course.set( {checked: true} );\n\t\t\t\t$( '#tva-course-' + this.course.get( 'term_id' ) ).prop( 'checked', true );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * Ribbon for raking the decission to disable the apprentice\n\t */\n\tviews.Ribbon = views.Base.extend( {\n\t\tclassName: 'tva-ribbon-container',\n\t\ttemplate: TVE_Dash.tpl( 'course/ribbon' ),\n\t\tevents: {\n\t\t\t'click .tva-close-ribbon': 'closeRibbon',\n\t\t\t'click .tva-disable-apprentice': 'disableApprentice'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\treturn this;\n\t\t},\n\t\tdisableApprentice: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this;\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/disable_apprentice/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.model.set( {apprentice: false} );\n\t\t\t\t\tTVE_Dash.success( ThriveApp.t.SuccessDisabledApprentice );\n\t\t\t\t\tself.$el.remove();\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tcloseRibbon: function () {\n\t\t\tvar self = this;\n\t\t\tthis.$el.remove();\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\turl: ThriveApp.routes.settings + '/disable_apprentice_ribbon/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.model.set( {apprentice_ribbon: true} );\n\t\t\t\t\tself.$el.remove();\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t} ).always( function () {\n\t\t\t} );\n\t\t}\n\n\t} );\n\n\t/**\n\t * View for Cover Image Normal State (with image)\n\t */\n\tviews.CoverNormalState = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/cover-normal' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for Cover Image Empty State (without image)\n\t */\n\tviews.CoverEmptyState = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/cover-empty' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for Lesson Cover Image Normal State (with image)\n\t */\n\tviews.LessonCoverNormalState = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/lesson-cover-normal' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for Lesson Cover Image Empty State (without image)\n\t */\n\tviews.LessonCoverEmptyState = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/lesson-cover-empty' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Topic View\n\t */\n\tviews.Topic = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/course-topic' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.selected = options.selected;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model, selected: this.selected} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Render the controls for the levels\n\t */\n\tviews.LevelControls = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/level-controls' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Render the controls for the labels\n\t */\n\tviews.LabelsControls = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/label-controls' ),\n\t\trender: function () {\n\t\t\tif ( ! this.model.get( 'label_name' ) ) {\n\t\t\t\tthis.model.set( {label_name: ThriveApp.t.DefaultMembersOnly} );\n\t\t\t}\n\t\t\tif ( ! this.model.get( 'label_color' ) ) {\n\t\t\t\tthis.model.set( {label_color: '#58a545'} );\n\t\t\t}\n\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Level view\n\t */\n\tviews.Level = views.Base.extend( {\n\t\tclassName: 'tva-course-level-item tvd-pointer',\n\t\ttemplate: TVE_Dash.tpl( 'level-item' ),\n\t\tevents: {\n\t\t\t'click .tva-course-level-delete': 'deleteLevel'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.selected = options.selected;\n\t\t\tthis.$el.attr( 'data-id', this.model.get( 'ID' ) );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, selected: this.selected} ) );\n\t\t\treturn this;\n\t\t},\n\t\tdeleteLevel: function ( e ) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar $element = this.$( '.tva-course-level-delete' ),\n\t\t\t\tid = $element.attr( 'data-id' ),\n\t\t\t\tmodel = ThriveApp.globals.levels.findWhere( {ID: parseInt( id )} );\n\n\t\t\tvar xhr = model.destroy();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * Label view\n\t */\n\tviews.Label = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'label-item' ),\n\t\tevents: {\n\t\t\t'click .tva-course-label-delete': 'deleteLabel'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.selected = options.selected;\n\t\t},\n\t\trender: function () {\n\t\t\tvar self = this,\n\t\t\t\tcolor = this.model.get( 'color' );\n\t\t\tthis.$el.html( this.template( {model: this.model, selected: this.selected} ) );\n\n\t\t\tthis.$el.find( '.tva-label-color-picker' ).spectrum( {\n\t\t\t\tcontainerClassName: 'tva-color-picker',\n\t\t\t\tallowEmpty: false,\n\t\t\t\tshowInitial: true,\n\t\t\t\tshowButtons: true,\n\t\t\t\tchooseText: \"Apply\",\n\t\t\t\tcancelText: \"Cancel\",\n\t\t\t\tshowInput: true,\n\t\t\t\tdisabled: true,\n\t\t\t\tpreferredFormat: \"hex\",\n\t\t\t\thide: function ( color ) {\n\t\t\t\t\tvar _color = color ? color.toHexString() : '';\n\n\t\t\t\t\tself.model.set( {label_color: _color} );\n\t\t\t\t\tself.saveModel();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\tdeleteLabel: function ( e ) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar $element = this.$( '.tva-course-label-delete' ),\n\t\t\t\tid = $element.attr( 'data-id' ),\n\t\t\t\tmodel = ThriveApp.globals.labels.findWhere( {ID: parseInt( id )} );\n\n\t\t\tvar xhr = model.destroy();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * Role view\n\t */\n\tviews.Role = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/course-role' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.checked = options.checked;\n\t\t},\n\t\trender: function () {\n\t\t\tif ( this.model.get( 'ID' ) !== 'administrator' ) {\n\t\t\t\tthis.$el.append( this.template( {model: this.model, checked: this.checked} ) );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t} );\n\t/**\n\t * View for Adding / Removing / Editing topics\n\t */\n\tviews.TopicsManagement = views.Base.extend( {\n\t\tclassName: 'tva-topics-container',\n\t\ttemplate: TVE_Dash.tpl( 'topics' ),\n\t\t_type: 'topic',\n\t\tevents: {\n\t\t\t'click .tva-add-topic': 'addItem',\n\t\t\t'click .tva-delete-topic': 'removeItem'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.collection, 'add', this.render );\n\t\t\tthis.listenTo( this.collection, 'remove', this.render );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tthis.renderHeader();\n\t\t\tthis.renderItems();\n\t\t\treturn this;\n\t\t},\n\t\trenderHeader: function () {\n\t\t\tvar $el = this.$el.find( '#tva-topics-collection' );\n\t\t\t$el.empty();\n\t\t\tthis.header = new ThriveApp.views[ ThriveApp.util.upperFirst( this._type ) + 'sHeader' ]( {\n\t\t\t\tel: $el\n\t\t\t} );\n\t\t\tthis.header.render();\n\t\t},\n\t\trenderItems: function () {\n\t\t\tthis.collection.each( this.renderOne, this );\n\t\t},\n\t\trenderOne: function ( item ) {\n\t\t\tthis.topic = new ThriveApp.views[ ThriveApp.util.upperFirst( this._type ) + 'sItem' ]( {\n\t\t\t\tmodel: item\n\t\t\t} );\n\n\t\t\tthis.$el.find( '#tva-' + this._type + 's-collection' ).append( this.topic.render().$el );\n\t\t},\n\t\taddItem: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar new_model = new ThriveApp.models[ ThriveApp.util.upperFirst( this._type ) ](),\n\t\t\t\tcollection = this.collection,\n\t\t\t\txhr = new_model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\n\t\t\t\t\tnew_model.set( 'ID', response.ID );\n\t\t\t\t\tcollection.add( new_model );\n\t\t\t\t\tself.$el.find( '.tva-edit-' + self._type + '-name' ).first().trigger( 'click' );\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tremoveItem: function ( e ) {\n\t\t\tvar $element = $( e.currentTarget ),\n\t\t\t\tid = $element.attr( 'data-id' ),\n\t\t\t\tmodel = this.collection.findWhere( {ID: parseInt( id )} );\n\n\t\t\tthis.handleRemoveTopic( model );\n\t\t},\n\t\thandleRemoveTopic: function ( model ) {\n\t\t\tif ( model ) {\n\t\t\t\tthis.modal( ThriveApp.modals[ 'Confirm' + ThriveApp.util.upperFirst( this._type ) + 'Delete' ], {\n\t\t\t\t\tmodel: model,\n\t\t\t\t\t'max-width': '60%',\n\t\t\t\t\twidth: '800px',\n\t\t\t\t\tin_duration: 200,\n\t\t\t\t\tout_duration: 0\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t/**\n\t * Label management view [ add/edit/delete labels ]\n\t */\n\tviews.LabelManagement = views.TopicsManagement.extend( {\n\t\tclassName: 'tva-topics-container tva-labels-container',\n\t\ttemplate: TVE_Dash.tpl( 'labels' ),\n\t\t_type: 'label',\n\t\tevents: {\n\t\t\t'click .tva-add-label': 'addItem',\n\t\t\t'click .tva-delete-label': 'removeItem'\n\t\t}\n\t} );\n\n\t/**\n\t * Render the header for the topics\n\t */\n\tviews.TopicsHeader = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'topics-header' ),\n\t\trender: function () {\n\t\t\tthis.$el.empty().html( this.template( {} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Render the header for the labels\n\t */\n\tviews.LabelsHeader = views.TopicsHeader.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'labels-header' )\n\t} );\n\n\t/**\n\t * View for one topic\n\t */\n\tviews.TopicsItem = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'topic' ),\n\t\ttagName: 'div',\n\t\tclassName: 'tva-topic-item',\n\t\t_type: 'topic',\n\t\t$title: null,\n\t\tevents: {\n\t\t\t'click .tva-edit-topic-name': 'editItem',\n\t\t\t'click .tva-reset-icon': 'resetIcon',\n\t\t\t'click .tva-change-image': 'changeImage',\n\t\t\t'click .tva-change-icon': 'changeIcon'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tvar self = this;\n\n\t\t\tthis.model.on( 'tva_render_topic', function () {\n\t\t\t\tself.render();\n\t\t\t} )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.renderItem();\n\t\t\tthis.renderIcons();\n\n\t\t\tif ( this.model.get( 'ID' ) === 0 ) {\n\t\t\t\tthis.$( '.tva-topic-remove-holder' ).hide();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trenderIcons: function () {\n\t\t\tthis.$( '.tva-topic-option' ).removeClass( 'tva-active' );\n\n\t\t\tswitch ( this.model.get( 'icon_type' ) ) {\n\n\t\t\t\tcase 'icon':\n\t\t\t\t\tvar icon = this.model.get( 'icon' );\n\n\t\t\t\t\tthis.$( '.tva-change-icon-color' ).hide();\n\t\t\t\t\tthis.$( '.tva-not-available' ).show();\n\t\t\t\t\tthis.$( '.tva-change-image' ).addClass( 'tva-active' );\n\t\t\t\t\tthis.$( '.tva-icon-image' ).addClass( 'tva-change-image' );\n\t\t\t\t\tthis.$( '.tva-icon-image' ).css( 'background-image', 'url(' + icon + ')' );\n\t\t\t\t\tthis.$( '.tva-topic-preview-overview' ).css( 'background-image', 'url(' + icon + ')' );\n\t\t\t\t\tthis.$( '.tva-topic-preview-layout' ).css( 'background-image', 'url(' + icon + ')' );\n\t\t\t\t\tthis.$( '.tva-topic-preview-overview' ).css( 'background-color', this.model.get( 'color' ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'svg_icon':\n\t\t\t\t\tvar overview_color = this.model.get( 'color' ) === this.model.get( 'overview_icon_color' ) ? '#ffffff' : this.model.get( 'overview_icon_color' );\n\n\t\t\t\t\tthis.$( '.tva-icon-image' ).html( this.model.get( 'svg_icon' ) );\n\t\t\t\t\tthis.$( '.tva-change-icon' ).addClass( 'tva-active' );\n\t\t\t\t\tthis.$( '.tva-icon-image' ).addClass( 'tva-change-icon' );\n\t\t\t\t\tthis.$( '.tva-topic-preview-overview' ).html( this.model.get( 'svg_icon' ) );\n\t\t\t\t\tthis.$( '.tva-topic-preview-layout' ).html( this.model.get( 'svg_icon' ) );\n\t\t\t\t\tthis.$( '.tva-topic-preview-overview' ).css( 'background-color', this.model.get( 'color' ) );\n\t\t\t\t\tthis.$( '.tva-topic-preview-overview svg' ).css( 'fill', overview_color );\n\t\t\t\t\tthis.$( '.tva-topic-preview-overview .tva-custom-icon' ).css( 'color', overview_color );\n\t\t\t\t\tthis.$( '.tva-topic-preview-layout svg' ).css( 'fill', this.model.get( 'layout_icon_color' ) );\n\t\t\t\t\tthis.$( '.tva-topic-preview-layout .tva-custom-icon' ).css( 'color', this.model.get( 'layout_icon_color' ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis.$( '.tva-icon-image' ).addClass( 'tva-topic-placeholder' );\n\t\t\t\t\tthis.$( '.tva-reset-icon' ).hide();\n\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t},\n\t\trenderItem: function () {\n\t\t\tvar self = this,\n\t\t\t\tselectors = [\n\t\t\t\t\t'.tva-' + this._type + '-color',\n\t\t\t\t\t'.tva-overview-icon-color',\n\t\t\t\t\t'.tva-layout-icon-color'\n\t\t\t\t];\n\n\t\t\tthis.$el.html( this.template( {item: this.model} ) );\n\t\t\tthis.$title = this.$el.find( '.tva-' + this._type + '-title' );\n\n\t\t\tif ( ThriveApp.globals.settings.get( 'switch_topic_options' ) ) {\n\t\t\t\tvar $svg = this.$( '.tva-svg-option' );\n\n\t\t\t\tthis.$( '.tva-svg-option' ).remove();\n\t\t\t\tthis.$( '.tva-icon-image' ).after( $svg );\n\t\t\t\tthis.$( '.tva-topic-icon-holder' ).addClass( 'tva-switched-options' );\n\t\t\t}\n\n\t\t\t_.each( selectors, function ( selector ) {\n\t\t\t\tthis.$el.find( selector ).spectrum( {\n\t\t\t\t\tcontainerClassName: 'tva-color-picker',\n\t\t\t\t\tallowEmpty: false,\n\t\t\t\t\tshowInitial: true,\n\t\t\t\t\tshowButtons: true,\n\t\t\t\t\tchooseText: \"Apply\",\n\t\t\t\t\tcancelText: \"Cancel\",\n\t\t\t\t\tshowInput: true,\n\t\t\t\t\tpreferredFormat: \"hex\",\n\t\t\t\t\thide: function ( color ) {\n\t\t\t\t\t\t$( '.tva-topics-container' ).removeClass( 'tva-color-picker-open' );\n\t\t\t\t\t\tself.$_spectrum = this;\n\t\t\t\t\t\tself.onSpectrumHide( color )\n\t\t\t\t\t},\n\t\t\t\t\tshow: function () {\n\t\t\t\t\t\t$( '.tva-topics-container' ).addClass( 'tva-color-picker-open' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}, this );\n\n\t\t\treturn this;\n\t\t},\n\t\teditItem: function ( e ) {\n\t\t\tvar self = this,\n\t\t\t\tedit_btn = this.$el.find( '.tva-edit-' + this._type + '-name' ),\n\t\t\t\tedit_model = new Backbone.Model( {\n\t\t\t\t\ttitle: this.model.get( 'title' ),\n\t\t\t\t\trequired: true\n\t\t\t\t} );\n\t\t\tedit_btn.hide();\n\t\t\tedit_model.on( 'change:value', function () {\n\t\t\t\tself.saveTitle.apply( self, arguments );\n\t\t\t\tself.$title.show();\n\n\t\t\t\tif ( self.$el.find( '.tva-inline-edit' ) ) {\n\t\t\t\t\tself.$el.find( '.tva-inline-edit' ).hide();\n\t\t\t\t}\n\t\t\t\tedit_btn.show();\n\t\t\t} );\n\t\t\tedit_model.on( 'tvu_no_change', function () {\n\t\t\t\tself.$title.html( self.model.get( 'title' ) ).show();\n\t\t\t\tself.$el.find( '.tva-inline-edit' ).remove();\n\t\t\t\tedit_btn.show();\n\t\t\t} );\n\n\t\t\tvar textEdit = new views.InputTitle( {\n\t\t\t\tmodel: edit_model,\n\t\t\t\tel: this.$el.find( '.tva-title-container' ),\n\t\t\t\ttagName: 'div'\n\t\t\t} );\n\n\t\t\tthis.$title.hide();\n\t\t\ttextEdit.render();\n\t\t\ttextEdit.focus();\n\t\t},\n\t\t/**\n\t\t * Saves the new title and hides the input value\n\t\t */\n\t\tsaveTitle: function ( edit_model, new_value ) {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar self = this;\n\n\t\t\tthis.model.set( {\n\t\t\t\ttitle: new_value\n\t\t\t} );\n\t\t\tthis.$title.html( new_value );\n\t\t\tvar xhr = this.model.save();\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tself.$title.html( new_value );\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tsaveModel: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function () {\n\t\t\t\t\tself.render();\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tresetIcon: function () {\n\t\t\tthis.model.set( {icon: ''} );\n\t\t\tthis.saveModel();\n\t\t\tthis.render();\n\t\t},\n\t\tchangeImage: function () {\n\t\t\tvar frame,\n\t\t\t\tself = this;\n\n\n\t\t\t// If the media frame already exists, reopen it.\n\t\t\tif ( frame ) {\n\t\t\t\tframe.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Create a new media frame\n\t\t\tframe = wp.media( {\n\t\t\t\ttitle: 'Select or Upload an Icon',\n\t\t\t\tbutton: {\n\t\t\t\t\ttext: 'Use this Icon'\n\t\t\t\t},\n\t\t\t\tlibrary: {type: 'image'},\n\t\t\t\tmultiple: false  // Set to true to allow multiple files to be selected\n\t\t\t} );\n\n\n\t\t\t// When an image is selected in the media frame...\n\t\t\tframe.on( 'select', function () {\n\t\t\t\tvar attachment = frame.state().get( 'selection' ).first().toJSON();\n\t\t\t\tself.model.set( {\n\t\t\t\t\ticon: attachment.url,\n\t\t\t\t\ticon_type: 'icon'\n\t\t\t\t} );\n\t\t\t\tself.saveModel();\n\t\t\t\tself.render();\n\t\t\t} );\n\n\t\t\t// Finally, open the modal on click\n\t\t\tframe.open();\n\t\t},\n\t\tchangeIcon: function () {\n\t\t\tvar title = this.model.get( 'title' );\n\t\t\tthis.model.unset( 'title', {silent: true} );\n\n\t\t\tthis.modal( ThriveApp.modals.FontAwsemowModal, {\n\t\t\t\ttopic_title: title,\n\t\t\t\tmodel: this.model,\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal'\n\t\t\t} );\n\t\t},\n\t\tonSpectrumHide: function ( color ) {\n\t\t\tvar _color = color ? color.toHexString() : '';\n\n\t\t\tif ( this.$( this.$_spectrum ).hasClass( 'tva-' + this._type + '-color' ) ) {\n\t\t\t\tthis.model.set( {color: _color} );\n\t\t\t}\n\n\t\t\tif ( this.$( this.$_spectrum ).hasClass( 'tva-overview-icon-color' ) ) {\n\t\t\t\tthis.model.set( {overview_icon_color: _color} )\n\t\t\t}\n\n\t\t\tif ( this.$( this.$_spectrum ).hasClass( 'tva-layout-icon-color' ) ) {\n\t\t\t\tthis.model.set( {layout_icon_color: _color} )\n\t\t\t}\n\n\t\t\tif ( this.model.hasChanged() ) {\n\t\t\t\tthis.saveModel();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.LabelsItem = views.TopicsItem.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'label' ),\n\t\tclassName: 'tva-label-item',\n\t\t_type: 'label',\n\t\t$title: null,\n\t\tevents: {\n\t\t\t'click .tva-edit-label-name': 'editItem'\n\t\t},\n\t\tonSpectrumHide: function ( color ) {\n\t\t\tvar _color = color ? color.toHexString() : '',\n\t\t\t\tcourses = ThriveApp.globals.courses.where( {label: parseInt( this.model.get( 'ID' ) )} );\n\n\n\t\t\tthis.model.set( {\n\t\t\t\tcolor: _color,\n\t\t\t\tlabel_color: _color\n\t\t\t} );\n\n\t\t\t_.each( courses, function ( course ) {\n\t\t\t\tcourse.set( {\n\t\t\t\t\tlabel_name: course.getLabelName(),\n\t\t\t\t\tlabel_color: course.getLabelColor()\n\t\t\t\t} );\n\t\t\t}, this );\n\n\t\t\tthis.saveModel();\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Input View\n\t */\n\tviews.InputTitle = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'textedit' ),\n\t\tmethod: 'append',\n\t\tevents: {\n\t\t\t'keyup input': 'keyup',\n\t\t\t'click input': function ( e ) {\n\t\t\t\te.stopPropagation();\n\t\t\t},\n\t\t\t'change input': function ( e ) {\n\t\t\t\tif ( ! $.trim( this.input.val() ) ) {\n\t\t\t\t\tthis.input.addClass( 'tvd-invalid' );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.model.set( 'value', e.currentTarget.value );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\t'blur input': function () {\n\t\t\t\tthis.model.trigger( 'tvu_no_change' );\n\t\t\t}\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.method = options.method ? options.method : this.method;\n\t\t},\n\t\tkeyup: function ( event ) {\n\t\t\tif ( event.which === 27 ) {\n\t\t\t\tthis.model.trigger( 'tvu_no_change' );\n\t\t\t}\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el[ this.method ]( this.template( {item: this.model} ) );\n\t\t\tthis.input = this.$el.find( 'input' );\n\n\t\t\treturn this;\n\t\t},\n\t\tfocus: function () {\n\t\t\tthis.input.focus().select();\n\t\t}\n\t} );\n\n\tviews.RenderBulkActions = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/bulk-actions' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.select_all = options.select_all;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$( '.tva-bulk-actions-container' ).length === 0\n\t\t\t\t? this.$el.prepend( '<div class=\"tva-bulk-actions-container\"><div class=\"tva-abs-fixed\"><div class=\"tva-bulk-actions\"></div></div></div>' )\n\t\t\t\t: this.$( '.tva-bulk-actions' ).empty();\n\n\t\t\t_.each( this.model.get( 'actions' ), function ( action ) {\n\n\t\t\t\tnew views.SingleBulkAction( {\n\t\t\t\t\tel: this.$( '.tva-bulk-actions' ),\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\taction: action,\n\t\t\t\t\tselect_all: this.select_all\n\t\t\t\t} ).render();\n\n\t\t\t}, this );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SingleBulkAction = views.Base.extend( {\n\t\ttemplate: function () {\n\t\t\treturn TVE_Dash.tpl( 'course/bulk-actions/' + this.action );\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.action = options.action;\n\t\t\tthis.select_all = options.select_all;\n\t\t},\n\t\trender: function () {\n\n\t\t\tvar method = this.action === 'selectAll' ? 'prepend' : 'append';\n\n\t\t\tthis.$el[ method ]( this.template( {\n\t\t\t\tmodel: this.model,\n\t\t\t\taction: this.action\n\t\t\t} ) );\n\n\t\t\tthis.$( '#tva-select-all-items' ).attr( 'checked', this.select_all );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.CourseOption = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/course-option' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.LessonVideoYoutubeOptions = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/youtube-extra-options' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.CourseVideoYoutubeOptions = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/youtube-extra-options' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Base view for media select options\n\t */\n\tviews.MediaSelectView = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'media-select' ),\n\t\tevents: {\n\t\t\t'click .tva-media-option': 'changeMediaType',\n\t\t\t'click .tva-selected-media': 'toggleMediaOptions',\n\t\t\t'input #tva-media-url': 'setMediaUrl',\n\t\t\t'input #tva-course-custom': 'setMediaUrl',\n\t\t\t'click .tva-extra-checkbox': 'changeCheckbox'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\t/**\n\t\t\t * the source may be either a lesson model, or the course model itself\n\t\t\t */\n\t\t\tthis.source = options.source;\n\t\t\tthis.listenTo( this.model, 'change', this.setInSource );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tthis.renderSingleMediaOption();\n\n\t\t\tthis.renderMediaInput();\n\t\t\tthis.renderExtraOptions();\n\t\t\tTVE_Dash.materialize( this.$el );\n\n\t\t\t$( 'body' ).on( 'click', function ( e ) {\n\t\t\t\tvar container = $( '.tva-media-options' ),\n\t\t\t\t\tbtn = $( '.tva-selected-media' );\n\n\t\t\t\tif ( ! container.is( e.target ) && container.has( e.target ).length === 0 && ! btn.is( e.target ) ) {\n\t\t\t\t\tcontainer.slideUp();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderSingleMediaOption: function () {\n\t\t\tvar view = new views.SingleMediaOption( {\n\t\t\t\tel: this.$( '.tva-media-select-holder' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderMediaInput: function () {\n\t\t\tvar view = new views.MediaInputField( {\n\t\t\t\tclassName: 'tva-media-url-container',\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this;\n\t\t},\n\t\ttoggleMediaOptions: function () {\n\t\t\tthis.$( '.tva-media-options' ).slideToggle();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetMediaUrl: function ( e ) {\n\t\t\tvar value = e.currentTarget.value;\n\t\t\tthis.model.set( {media_url: value} );\n\t\t},\n\t\tchangeMediaType: function ( e ) {\n\t\t\tvar value = e.currentTarget.getAttribute( 'data-option' );\n\n\t\t\tthis.model.set( {\n\t\t\t\tmedia_type: value,\n\t\t\t\tmedia_url: '',\n\t\t\t\tmedia_extra_options: {}\n\t\t\t} );\n\n\t\t\tthis.render();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderExtraOptions: function () {\n\t\t\tvar view = new views.BaseExtraOptions( {\n\t\t\t\tclassName: 'tva-media-extra-options',\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\t\t\treturn this;\n\t\t},\n\t\tchangeCheckbox: function ( e ) {\n\t\t\tvar extra = this.model.get( 'media_extra_options' ),\n\t\t\t\tname = this.$( e.currentTarget ).attr( 'name' );\n\n\t\t\tif ( this.$( e.currentTarget ).prop( 'checked' ) ) {\n\t\t\t\textra[ name ] = 1;\n\t\t\t} else {\n\t\t\t\tdelete extra[ name ];\n\t\t\t}\n\n\t\t\tthis.model.set( {media_extra_options: extra} );\n\t\t\tthis.setInSource();\n\t\t},\n\t\tsetInSource: function () {\n\t\t\tvar json = this.model.toJSON();\n\t\t\tdelete json.media_options;\n\n\t\t\tthis.source.set( {post_media: json} );\n\n\t\t}\n\t} );\n\n\tviews.SingleMediaOption = views.Base.extend( {\n\t\trender: function () {\n\t\t\tthis.renderSelectedMedia();\n\t\t\tthis.renderMediaOptions();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderSelectedMedia: function () {\n\t\t\tvar view = new views.SelectedMedia( {\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$el.prepend( view.render().$el );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderMediaOptions: function () {\n\t\t\tvar view = new views.MediaOptionsList( {\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render a single media option\n\t */\n\tviews.MediaOption = views.Base.extend( {\n\t\toption: null,\n\t\tinitialize: function ( options ) {\n\t\t\tthis.option = options.option;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.attr( 'data-option', this.option );\n\t\t\tthis.$el.html( ThriveApp.util.upperFirst( this.option ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SelectedMedia = views.Base.extend( {\n\t\ttagName: 'div',\n\t\tclassName: 'tva-selected-media',\n\t\trender: function () {\n\t\t\tthis.$el.append( this.model.get( 'media_options' )[ this.model.get( 'media_type' ) ].name );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.MediaOptionsList = views.Base.extend( {\n\t\tclassName: 'tva-media-options',\n\t\ttagName: 'ul',\n\t\trender: function () {\n\t\t\tvar self = this;\n\t\t\t_.each( this.model.get( 'media_options' ), function ( value, option ) {\n\t\t\t\tself.renderOne( option );\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderOne: function ( option ) {\n\t\t\tvar view = new views.MediaOption( {\n\t\t\t\tclassName: 'tva-media-option',\n\t\t\t\ttagName: 'li',\n\t\t\t\tmodel: this.model,\n\t\t\t\toption: option\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this\n\t\t}\n\t} );\n\n\t/**\n\t * Render Input field for media options\n\t */\n\tviews.MediaInputField = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/media-input-field' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this\n\t\t}\n\t} );\n\t/**\n\t * Base view to render extra options for item media\n\t */\n\tviews.BaseExtraOptions = views.Base.extend( {\n\t\textra_view: null,\n\t\trender: function () {\n\t\t\tthis.renderMediaExtraOptions();\n\t\t\treturn this;\n\t\t},\n\t\trenderMediaExtraOptions: function () {\n\t\t\tvar media_type = this.model.get( 'media_type' );\n\t\t\tif ( ! ThriveApp.views[ 'CourseVideo' + ThriveApp.util.upperFirst( media_type ) + 'Options' ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! this.extra_view ) {\n\t\t\t\tvar view = ThriveApp.views[ 'CourseVideo' + ThriveApp.util.upperFirst( media_type ) + 'Options' ];\n\t\t\t\tthis.extra_view = new view( {model: this.model} );\n\t\t\t}\n\n\t\t\tthis.$el.append( this.extra_view.render().$el );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render Youtube extra options\n\t */\n\tviews.CourseVideoYoutubeOptions = views.BaseExtraOptions.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'youtube-extra-options' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.ModuleContentOptions = views.Base.extend( {\n\t\tclassName: 'tva-item-content-options',\n\t\trender: function () {\n\t\t\tvar type = this.model.get( 'post_type' ) ? this.model.get( 'post_type' ).split( '_' )[ 1 ] : 'course';\n\n\t\t\tif ( ( this.model.get( 'lessons' ).length === 0 ) && ( this.model.get( 'chapters' ).length === 0 ) ) {\n\t\t\t\tthis.addLesson( type );\n\n\t\t\t} else {\n\t\t\t\tif ( this.model.get( 'lessons' ).length > 0 ) {\n\t\t\t\t\tthis.addLesson( type );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\taddLesson: function ( type ) {\n\t\t\tvar view = new views.AddLesson( {\n\t\t\t\tclassName: 'tva-add-' + type + '-lesson'\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this;\n\t\t},\n\t\taddChapter: function () {\n\t\t\tvar view = new views.AddChapter();\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this\n\t\t}\n\t} );\n\n\tviews.ChapterContentOptions = views.ModuleContentOptions.extend( {\n\t\trender: function () {\n\t\t\tthis.addLesson( 'chapter' );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.CourseContentOptions = views.ModuleContentOptions.extend( {\n\t\trender: function () {\n\t\t\tthis.addLesson( 'c' );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.CourseOption = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/course-option' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for adding a lesson in modal steps\n\t */\n\tviews.LessonEditor = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/lesson/lesson-editor' ),\n\t\tevents: {\n\t\t\t'input #tva-item-title': 'setTitle',\n\t\t\t'input #tva-item-description': 'setDescription',\n\t\t\t'change .tva-lesson-type': 'renderLessonType',\n\t\t\t'click .tva-selected-lesson-type': 'showLessonType',\n\t\t\t'click .tva-lesson-type': 'setLessonType',\n\t\t\t'click .tva-item-cover-image': 'addCoverImage',\n\t\t\t'click .tva-option-type': 'setCommentStatus',\n\t\t\t'click .tva-selected-option': 'toggleOptions',\n\t\t\t'click .tvd-modal-submit': 'save'\n\t\t},\n\t\tlessonType: null,\n\t\tfooterView: null,\n\t\tinitialize: function ( options ) {\n\t\t\tthis.initial_comment_status = this.model.get( 'comment_status' );\n\t\t\tthis.modal_view = options.modal_view;\n\t\t\tthis.course = options.course;\n\t\t\tthis.listenTo( this.model, 'change:cover_image', this.renderCoverImage );\n\t\t\tthis.footerView = options.footerView ? options.footerView : 'StepModalFooter'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderLessonTypesList();\n\t\t\tthis.renderLessonType();\n\t\t\tthis.renderComments();\n\t\t\tThriveApp.util.renderMCE( 'tva-item-description', this.model, 'post_excerpt' );\n\t\t\tthis.renderFooter();\n\n\t\t\tvar self = this;\n\n\t\t\tthis.$el.on( 'click', function ( e ) {\n\t\t\t\tvar container = self.$( '.tva-lessons-types-list' ),\n\t\t\t\t\tbtn = self.$( '.tva-selected-lesson-type > span' );\n\n\t\t\t\tif ( ! container.is( e.target ) && container.has( e.target ).length === 0 && ! btn.is( e.target ) ) {\n\t\t\t\t\tcontainer.slideUp();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderLessonTypesList: function () {\n\t\t\tvar view = new views.LessonTypeOption( {\n\t\t\t\tel: this.$( '.tva-lesson-type-container' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderComments: function () {\n\t\t\tvar view = new views.LessonComments( {\n\t\t\t\tel: this.$( '.tva-comments-container' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetTitle: function ( e ) {\n\t\t\tvar value = e.currentTarget.value;\n\t\t\tthis.model.set( {post_title: value} );\n\t\t},\n\t\tsetDescription: function ( e ) {\n\t\t\tvar value = e.currentTarget.value;\n\t\t\tthis.model.set( {post_excerpt: value} );\n\t\t},\n\t\tshowLessonType: function () {\n\t\t\tthis.$( '.tva-lessons-types-list' ).slideToggle();\n\t\t},\n\t\ttoggleOptions: function () {\n\t\t\tthis.$( '.tva-available-options' ).slideToggle();\n\t\t},\n\t\tsetLessonType: function ( e ) {\n\t\t\tvar type = e.currentTarget.getAttribute( 'data-type' ),\n\t\t\t\tmedia = '';\n\t\t\tthis.model.set( {\n\t\t\t\tlesson_type: type\n\t\t\t} );\n\n\t\t\tif ( type === 'audio' ) {\n\t\t\t\tmedia = 'soundcloud';\n\t\t\t} else if ( type === 'video' ) {\n\t\t\t\tmedia = 'youtube';\n\t\t\t} else {\n\t\t\t\tmedia = '';\n\t\t\t}\n\n\t\t\tthis.model.get( 'post_media' ).media_type = media;\n\t\t\tthis.model.get( 'post_media' ).media_url = '';\n\n\t\t\tthis.renderLessonTypesList();\n\t\t\tthis.renderLessonType();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetCommentStatus: function ( e ) {\n\t\t\tvar comment_status = e.currentTarget.getAttribute( 'data-status' );\n\n\t\t\tthis.model.set( {comment_status: comment_status} );\n\t\t\tthis.renderComments();\n\t\t},\n\t\trenderLessonType: function ( e ) {\n\t\t\tif ( this.lessonType ) {\n\t\t\t\tthis.lessonType.remove();\n\t\t\t}\n\n\t\t\tthis.lessonType = new views.BaseModalLesson( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-editor-extra-option' ).append( this.lessonType.render().$el );\n\n\t\t\treturn this\n\t\t},\n\t\taddCoverImage: function () {\n\t\t\tThriveApp.util.addCoverImage( this.model );\n\t\t\treturn this;\n\n\t\t},\n\t\trenderFooter: function () {\n\t\t\tif ( ! ThriveApp.views[ this.footerView ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar view = new ThriveApp.views[ this.footerView ]( {} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this;\n\t\t},\n\t\tsave: function () {\n\t\t\tthis.tvd_clear_errors();\n\n\t\t\tif ( ! this.model.isValid() ) {\n\t\t\t\treturn this.tvd_show_errors( this.model );\n\t\t\t}\n\n\t\t\tif ( true === this.saving ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.saving = true;\n\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tif ( this.initial_comment_status !== this.model.get( 'comment_status' ) ) {\n\t\t\t\tthis.model.set( {comment_status_changed: true} );\n\t\t\t}\n\n\t\t\t$( '#tvd-modal-base' ).scrollTop( 0 );\n\t\t\t$( '.tvd-modal-preloader' ).css( 'top', 50 + '%' );\n\n\t\t\tif ( ! this.model.get( 'order' ) && this.model.get( 'order' ) !== 0 ) {\n\t\t\t\tthis.model.set( {order: this.collection.length} );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Publish the element if any of it's children are published\n\t\t\t */\n\t\t\tvar children = this.model.hasChildren();\n\n\t\t\tif ( children ) {\n\t\t\t\tvar published = this.model.get( children ).findWhere( {post_status: 'publish'} );\n\n\t\t\t\tif ( published ) {\n\t\t\t\t\tthis.model.set( {post_status: 'publish'} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.beforeSave();\n\n\t\t\tvar extra_options = this.model.get( 'post_media' ),\n\t\t\t\tobj = {};\n\n\t\t\tif ( typeof extra_options === 'object' && typeof extra_options[ 'media_extra_options' ] === 'object' ) {\n\t\t\t\tObject.keys( extra_options[ 'media_extra_options' ] ).forEach( function ( key ) {\n\t\t\t\t\tobj[ key ] = extra_options[ 'media_extra_options' ][ key ];\n\t\t\t\t} );\n\n\t\t\t\tthis.model.get( 'post_media' )[ 'media_extra_options' ] = obj;\n\t\t\t}\n\n\t\t\tvar xhr = this.model.save(),\n\t\t\t\tself = this;\n\n\t\t\tif ( xhr ) {\n\t\t\t\txhr.done( function ( response, status, options ) {\n\t\t\t\t\tif ( self.collection.where( {'ID': self.model.get( 'ID' )} ).length === 0 ) {\n\t\t\t\t\t\tself.collection.add( JSON.parse( JSON.stringify( self.model ) ), {at: self.collection.length} );\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Re-sync the course elements with the course model\n\t\t\t\t\t\t */\n\t\t\t\t\t\tThriveApp.globals.course_elements = ThriveApp.util.getCourseElements( ThriveApp.globals.active_course );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar model = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: self.model.get( 'ID' )} );\n\n\t\t\t\t\t\tmodel.set( JSON.parse( JSON.stringify( self.model ) ), {silent: true} );\n\t\t\t\t\t\tmodel.set_data();\n\t\t\t\t\t}\n\n\t\t\t\t\tself.beforeCheckData();\n\n\t\t\t\t\tThriveApp.globals.active_course.checkData();\n\n\t\t\t\t\tif ( self.model.get( 'post_type' ) === 'tva_lesson' ) {\n\t\t\t\t\t\tvar template = {\n\t\t\t\t\t\t\tlesson_type: self.model.get( 'lesson_type' ),\n\t\t\t\t\t\t\tcomment_status: self.model.get( 'comment_status' ),\n\t\t\t\t\t\t\tpost_media: JSON.parse( JSON.stringify( self.model.get( 'post_media' ) ) )\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\ttemplate.post_media.media_url = '';\n\t\t\t\t\t\tThriveApp.globals.active_course.set( {lesson_template: template} );\n\t\t\t\t\t}\n\n\t\t\t\t\tThriveApp.globals.active_course.trigger( 'tva_render_content', {model: self.model} );\n\n\t\t\t\t} );\n\t\t\t\txhr.error( function ( errorObj ) {\n\t\t\t\t\tTVE_Dash.err( JSON.parse( errorObj.responseText ).message );\n\t\t\t\t} );\n\t\t\t\txhr.always( function () {\n\t\t\t\t\t$( '.tvd-hiddendiv' ).empty();\n\t\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t\t\tif ( self.modal_view ) {\n\t\t\t\t\t\tself.modal_view.close();\n\t\t\t\t\t}\n\n\t\t\t\t\tself.saving = false;\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tbeforeSave: function () {\n\t\t\tThriveApp.globals.active_course.get( 'modules' ).updateValues( {expanded: false}, true );\n\n\t\t\tif ( this.model.get( 'post_parent' ) > 0 ) {\n\t\t\t\tvar parent = ThriveApp.globals.course_elements.get( 'all' ).findWhere( {ID: this.model.get( 'post_parent' )} );\n\t\t\t\tparent.set( {expanded: true} );\n\n\t\t\t\tif ( parent.get( 'post_parent' ) > 0 ) {\n\t\t\t\t\tvar module = ThriveApp.globals.active_course.get( 'modules' ).findWhere( {ID: parent.get( 'post_parent' )} );\n\t\t\t\t\tif ( module ) {\n\t\t\t\t\t\tmodule.set( {expanded: true} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbeforeCheckData: function () {\n\t\t\t/**\n\t\t\t * Hook so we can put in more data if needed\n\t\t\t */\n\t\t}\n\t} );\n\n\tviews.ChapterEditor = views.LessonEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/chapter/chapter-editor' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderFooter();\n\n\t\t\treturn this;\n\t\t},\n\t\tbeforeSave: function () {\n\t\t\tThriveApp.globals.active_course.get( 'modules' ).updateValues( {expanded: false}, true );\n\t\t\tvar module = ThriveApp.globals.course_elements.get( 'modules' ).findWhere( {ID: this.model.get( 'post_parent' )} );\n\n\t\t\tif ( module ) {\n\t\t\t\tmodule.set( {expanded: true} );\n\t\t\t}\n\t\t\tthis.model.set( {expanded: true} );\n\t\t},\n\t\tbeforeCheckData: function () {\n\t\t\tif ( this.model.get( 'post_parent' ) > 0 ) {\n\t\t\t\tvar module = ThriveApp.globals.active_course.get( 'modules' ).findWhere( {ID: parseInt( this.model.get( 'post_parent' ) )} );\n\t\t\t\tif ( module ) {\n\t\t\t\t\tmodule.checkData();\n\t\t\t\t\tmodule.set( {expanded: true} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\n\t/**\n\t * View to render modal editor for a module\n\t */\n\tviews.ModuleEditor = views.LessonEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/module-editor' ),\n\t\tevents: {\n\t\t\t'click .tva-item-cover-image': 'addCoverImage',\n\t\t\t'click .tva-remove-module-cover-image': 'removeCoverImage',\n\t\t\t'input #tva-item-title': 'setTitle',\n\t\t\t'input #tva-item-description': 'setDescription',\n\t\t\t'click .tva-option-type': 'setCommentStatus',\n\t\t\t'click .tva-selected-option': 'toggleOptions',\n\t\t\t'click .tvd-modal-submit': 'save'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tThriveApp.util.renderMCE( 'tva-item-description', this.model, 'post_excerpt' );\n\t\t\tthis.renderComments();\n\t\t\tthis.renderCoverImage();\n\t\t\tthis.renderFooter();\n\n\t\t\treturn this;\n\t\t},\n\t\tbeforeSave: function () {\n\t\t\tthis.collection.updateValues( {expanded: false}, true );\n\t\t\tthis.model.set( {expanded: true} );\n\t\t},\n\t\trenderCoverImage: function () {\n\t\t\tvar state = this.model.get( 'cover_image' ) ? 'normal' : 'empty';\n\n\t\t\tif ( ! ThriveApp.views[ 'Cover' + ThriveApp.util.upperFirst( state ) + 'State' ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar view = new ThriveApp.views[ 'ModuleCover' + ThriveApp.util.upperFirst( state ) + 'State' ]( {\n\t\t\t\tel: this.$( '.tva-item-cover-image' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t},\n\t\tremoveCoverImage: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tthis.model.set( {cover_image: ''} );\n\t\t\tthis.renderCoverImage();\n\t\t},\n\t\trenderComments: function () {\n\t\t\tvar view = new views.ModuleComments( {\n\t\t\t\tel: this.$( '.tva-comments-container' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t},\n\t\tsetCommentStatus: function ( e ) {\n\t\t\tvar comment_status = e.currentTarget.getAttribute( 'data-status' ),\n\t\t\t\tchildren = this.model.hasChildren();\n\n\t\t\tthis.model.set( {comment_status: comment_status} );\n\t\t\tthis.renderComments();\n\n\t\t\tif ( children ) {\n\t\t\t\tthis.model.get( children ).updateValues( {comment_status: comment_status}, true );\n\t\t\t}\n\t\t}\n\t} );\n\n\tviews.ModuleDelete = views.LessonEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/module-delete' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderFooter();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.ChapterDelete = views.ModuleDelete.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/chapter/chapter-delete' )\n\t} );\n\n\tviews.InputFieldEditor = views.LessonEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/input-field-editor' ),\n\t\tplaceholder: null,\n\t\tinitialize: function ( options ) {\n\t\t\tthis.placeholder = options.placeholder;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, placeholder: this.placeholder} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.MoveNotification = views.InputFieldEditor.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/move-notification' ),\n\t\targs: null,\n\t\tinitialize: function ( options ) {\n\t\t\tthis.args = options.args;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, args: this.args} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.LessonTypeOption = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/lesson/lesson-option' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tvar self = this;\n\t\t\t_.each( this.model.get( 'types' ), function ( item ) {\n\t\t\t\tself.renderOne( item );\n\t\t\t} );\n\t\t\treturn this;\n\t\t},\n\t\trenderOne: function ( item ) {\n\t\t\tvar view = new views.LessonOption( {\n\t\t\t\tel: this.$( '.tva-lessons-types-list' ),\n\t\t\t\tmodel: item\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * Base view for lessons. Detect lesson's type and render the editor accordingly\n\t */\n\tviews.BaseModalLesson = views.Base.extend( {\n\t\tmediaModel: null,\n\t\tmediaView: null,\n\t\trender: function () {\n\t\t\tthis.renderLessonType();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderLessonType: function () {\n\t\t\tvar viewName = ThriveApp.util.upperFirst( this.model.get( 'lesson_type' ) ) + 'ModalLesson';\n\n\t\t\tif ( ! ThriveApp.views[ viewName ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.mediaView = new ThriveApp.views[ viewName ]( {\n\t\t\t\tel: this.el,\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.mediaView.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for text lesson type\n\t */\n\tviews.TextModalLesson = views.BaseModalLesson.extend( {\n\t\tinitialize: function () {\n\t\t\tthis.listenTo( this.model, 'change:cover_image', this.renderCoverImage )\n\t\t},\n\t\trender: function () {\n\t\t\tthis.renderCoverImage();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderCoverImage: function () {\n\t\t\tvar view = new views.LessonCoverImage( {\n\t\t\t\tel: this.el,\n\t\t\t\tmodel: this.model,\n\t\t\t\tlabelText: 'Would you like to add a custom lesson cover image?',\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for video lesson type\n\t */\n\tviews.VideoModalLesson = views.BaseModalLesson.extend( {\n\t\trender: function () {\n\t\t\tthis.renderMediaOptions();\n\t\t\treturn this;\n\t\t},\n\t\trenderMediaOptions: function () {\n\n\t\t\tif ( ! this.model.get( 'post_media' ).media_type ) {\n\t\t\t\t/**\n\t\t\t\t * Set the default\n\t\t\t\t *\n\t\t\t\t * @type {string}\n\t\t\t\t */\n\t\t\t\tthis.model.get( 'post_media' ).media_type = 'youtube';\n\t\t\t}\n\t\t\tthis.mediaModel = new ThriveApp.models.MediaSelect( this.model.get( 'post_media' ) );\n\n\t\t\tvar view = new views.MediaSelectView( {\n\t\t\t\tel: this.el,\n\t\t\t\tmodel: this.mediaModel,\n\t\t\t\tsource: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View for audio lesson type\n\t */\n\tviews.AudioModalLesson = views.BaseModalLesson.extend( {\n\t\trender: function () {\n\t\t\tthis.renderMediaOptions();\n\n\t\t\treturn this;\n\t\t},\n\t\trenderMediaOptions: function () {\n\t\t\t/**\n\t\t\t * Initialize media model\n\t\t\t */\n\t\t\tthis.mediaModel = new ThriveApp.models.MediaSelect( {\n\t\t\t\tmedia_options: {\n\t\t\t\t\tsoundcloud: {\n\t\t\t\t\t\tname: 'SoundCloud',\n\t\t\t\t\t\tvalidate_domain: true\n\t\t\t\t\t},\n\t\t\t\t\tcustom: {\n\t\t\t\t\t\tname: 'Custom',\n\t\t\t\t\t\tvalidate_domain: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * If there are any data pass them further to the MediaSelect model, otherwise use defaults\n\t\t\t */\n\t\t\tvar post_media = this.model.get( 'post_media' );\n\t\t\tpost_media ?\n\t\t\t\tthis.mediaModel.set( {\n\t\t\t\t\tmedia_type: post_media.media_type,\n\t\t\t\t\tmedia_url: post_media.media_url\n\t\t\t\t} ) :\n\t\t\t\tthis.mediaModel.set( {media_type: 'soundcloud'} );\n\n\t\t\tthis.mediaView = new views.MediaSelectView( {\n\t\t\t\tel: this.el,\n\t\t\t\tmodel: this.mediaModel,\n\t\t\t\tsource: this.model\n\t\t\t} );\n\n\t\t\tthis.mediaView.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.LessonCoverImage = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/cover-image' ),\n\t\tevents: {\n\t\t\t'click .tva-lesson-cover-image': 'addCoverImage',\n\t\t\t'click .tva-remove-lesson-cover-image': 'removeCoverImage'\n\t\t},\n\t\tlabelText: 'Cover Image',\n\t\tinitialize: function ( options ) {\n\t\t\tthis.labelText = options.labelText ? options.labelText : this.labelText;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {labelText: this.labelText} ) );\n\t\t\tthis.renderCoverImage();\n\t\t\treturn this;\n\t\t},\n\t\tremoveCoverImage: function ( e ) {\n\t\t\te.stopPropagation();\n\n\t\t\tthis.model.set( {cover_image: ''} );\n\t\t\tthis.renderCoverImage();\n\t\t},\n\t\trenderCoverImage: function () {\n\t\t\tvar state = this.model.get( 'cover_image' ) ? 'normal' : 'empty';\n\n\t\t\tif ( ! ThriveApp.views[ 'LessonCover' + ThriveApp.util.upperFirst( state ) + 'State' ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar view = new ThriveApp.views[ 'LessonCover' + ThriveApp.util.upperFirst( state ) + 'State' ]( {\n\t\t\t\tel: this.$( '.tva-lesson-cover-image' ),\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\taddCoverImage: function () {\n\t\t\tThriveApp.util.addCoverImage( this.model );\n\t\t}\n\t} );\n\n\tviews.ReceiverMoveItem = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/receiver-course' ),\n\t\ttype: null,\n\t\tinitialize: function ( option ) {\n\t\t\tthis.type = option.type;\n\t\t\tthis.$el.addClass( 'tva-receiver-' + this.type );\n\t\t},\n\t\trender: function () {\n\t\t\tvar name = this.type === 'course' ? this.model.get( 'name' ) : this.model.get( 'post_title' ),\n\t\t\t\titems = [];\n\n\t\t\tthis.$el.html( this.template( {model: this.model, type: this.type, name: name} ) );\n\n\t\t\tvar item_level = ThriveApp.globals.selected_items.getHighestSelectedLevel();\n\n\t\t\tthis.collection.each( function ( item ) {\n\t\t\t\tvar decision = ThriveApp.util.userHasToDecide( item_level, item );\n\n\t\t\t\tif ( decision === 1 || ( ThriveApp.globals.active_course.hasChildren() === ThriveApp.util.getPlural( ThriveApp.util.hierarchy[ item_level ] ) && item.get( 'ID' ) === ThriveApp.globals.active_course.get( 'ID' ) ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Don't render elements which would have the user\n\t\t\t\t\t * create an element in order to move what he has selected\n\t\t\t\t\t */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\titems.push( item );\n\n\n\t\t\t}, this );\n\n\t\t\tif ( items.length > 0 ) {\n\t\t\t\t_.each( items, function ( item ) {\n\t\t\t\t\tthis.renderOne( item );\n\t\t\t\t}, this );\n\t\t\t} else {\n\t\t\t\t$( '.tva-receiver-module' ).empty();\n\t\t\t\t$( '.tvd-modal-submit' ).addClass( 'tvd-disabled' );\n\t\t\t\tTVE_Dash.err( 'There are no elements that can receive this item', 4000 );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trenderOne: function ( model ) {\n\n\t\t\tvar view = new views.SingleReceiverItem( {\n\t\t\t\tel: this.$( '.tva-available-receivers-' + this.type + 's' ),\n\t\t\t\tmodel: model,\n\t\t\t\ttype: this.type\n\t\t\t} );\n\n\t\t\tview.render();\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * This view instantiates the path to the decision the user needs to make\n\t * Please see comments on ThriveApp.util.userHasToDecide();\n\t */\n\tviews.ItemDecisionMaker = views.Base.extend( {\n\t\trestrict_back: false,\n\t\tinitialize: function ( options ) {\n\t\t\tthis.decision_model = options.decision_model ? options.decision_model : ThriveApp.globals.active_course;\n\t\t\tthis.modal_view = options.modal_view;\n\t\t\tthis.restrict_back = options.restrict_back;\n\n\t\t\tvar self = this;\n\n\t\t\tthis.$el.on( 'click', function ( e ) {\n\t\t\t\tvar container = self.$( '.tva-reciever-container' ),\n\t\t\t\t\tbtn = self.$( '.tva-parent > span' );\n\n\t\t\t\tif ( ! container.is( e.target ) && container.has( e.target ).length === 0 && ! btn.is( e.target ) ) {\n\t\t\t\t\tcontainer.slideUp();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tvar item_level = ThriveApp.util.levels[ this.model.get( 'type' ) ],\n\t\t\t\tdecision = ThriveApp.util.userHasToDecide( item_level, this.decision_model );\n\n\t\t\tif ( decision === 1 ) {\n\t\t\t\tthis.notifyUser();\n\t\t\t} else {\n\t\t\t\tthis.selectParents();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tnotifyUser: function () {\n\t\t\t/**\n\t\t\t * the user needs to include items within this element\n\t\t\t */\n\t\t\tvar view = new views.NotifyUser( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\tmodal_view: this.modal_view,\n\t\t\t\tdecision_model: this.decision_model,\n\t\t\t\trestrict_back: this.restrict_back,\n\t\t\t\tel: this.$el\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t},\n\t\tselectParents: function () {\n\t\t\t/**\n\t\t\t * the user needs to include this element within an item\n\t\t\t */\n\t\t\tvar view = new views.SelectParents( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\tmodal_view: this.modal_view,\n\t\t\t\tel: this.$el\n\t\t\t} );\n\n\t\t\tview.render();\n\t\t}\n\t} );\n\n\t/**\n\t * TODO: LONG TERM, We should refactor these events for general purposes\n\t */\n\tviews.SelectParents = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/select-parent' ),\n\t\tevents: {\n\t\t\t'click .tva-modal-validate-data': 'validateData'\n\t\t},\n\t\treceiver_model: null,\n\t\tinitialize: function ( options ) {\n\t\t\tthis.modal_view = options.modal_view;\n\t\t\tthis.low_decision_view = null;\n\t\t\tthis.receiver_model = new ThriveApp.models[ ThriveApp.util.upperFirst( this.collection.at( 0 ).get( 'type' ) ) ];\n\t\t\tvar self = this;\n\n\t\t\tthis.model.on( 'item_decission_low', function ( view ) {\n\t\t\t\tself.low_decision_view = view;\n\t\t\t} );\n\n\t\t\tthis.model.on( 'tva_select_chapters', function ( collection ) {\n\t\t\t\tself.receiver_model = new ThriveApp.models[ ThriveApp.util.upperFirst( collection.at( 0 ).get( 'type' ) ) ];\n\t\t\t\tself.renderOptions( collection, self.$( '.tva-item-optional-container' ) );\n\t\t\t} );\n\n\t\t\tthis.model.on( 'tva_item_was_selected', function ( model ) {\n\t\t\t\tif ( model.get( 'type' ) === 'module' ) {\n\t\t\t\t\tself.$( '.tva-item-optional-container' ).empty();\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model, parent: this.collection.at( 0 ).get( 'type' )} ) );\n\t\t\tthis.renderOptions( this.collection );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderOptions: function ( collection, $element ) {\n\t\t\tthis.model.set( {post_parent: 0} );\n\t\t\tvar view = new views.ReceiverItems( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: collection,\n\t\t\t\treceiver_model: this.receiver_model,\n\t\t\t\tmodal_view: this.modal_view\n\t\t\t} );\n\t\t\t$element = ! $element ? this.$( '.tva-item-parent-container' ) : $element;\n\t\t\t$element.append( view.render().$el );\n\t\t},\n\t\tvalidateData: function () {\n\t\t\tif ( ! this.model.get( 'post_parent' ) ) {\n\t\t\t\tTVE_Dash.err( ThriveApp.t.AddContentNoItem );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this.low_decision_view ) {\n\t\t\t\t$( '.tva-decision-container' ).html( this.low_decision_view.render().$el );\n\t\t\t} else {\n\t\t\t\tthis.modal_view.next();\n\t\t\t}\n\t\t}\n\t} );\n\n\tviews.ReceiverItems = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/receiver-item' ),\n\t\tevents: {\n\t\t\t'click .tva-parent': function () {\n\t\t\t\tthis.$( '.tva-reciever-container' ).slideToggle();\n\t\t\t}\n\t\t},\n\t\titem: null,\n\t\tinitialize: function ( options ) {\n\t\t\tvar self = this;\n\t\t\tthis.modal_view = options.modal_view;\n\t\t\tthis.receiver_model = options.receiver_model;\n\t\t\tthis.receiver_model.on( 'tva_item_was_selected', function ( model ) {\n\t\t\t\tself.$( '.tva-reciever-container' ).slideToggle();\n\t\t\t\tself.receiver_model.set( {post_title: model.get( 'post_title' )} );\n\t\t\t\tself.render();\n\t\t\t} );\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.receiver_model} ) );\n\n\t\t\tthis.collection.each( this.renderItems, this );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderItems: function ( item ) {\n\t\t\tvar view = new views.ReceiverItem( {\n\t\t\t\tmodel: item,\n\t\t\t\tnew_item: this.model,\n\t\t\t\tmodal_view: this.modal_view,\n\t\t\t\treceiver_model: this.receiver_model,\n\t\t\t\tcollection: this.collection\n\t\t\t} );\n\n\t\t\tthis.$( '.tva-material-list' ).append( view.render().$el );\n\t\t}\n\t} );\n\n\tviews.ReceiverItem = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/single-receiver-item' ),\n\t\ttagName: 'li',\n\t\tclassName: 'tva-module-item tva-parent',\n\t\tinitialize: function ( options ) {\n\t\t\tvar self = this;\n\t\t\tthis.$el.on( 'click', function () {\n\t\t\t\tself.setParent();\n\t\t\t} );\n\t\t\tthis.new_item = options.new_item;\n\t\t\tthis.modal_view = options.modal_view;\n\t\t\tthis.receiver_model = options.receiver_model;\n\t\t\tthis.item_level = ThriveApp.util.levels[ this.new_item.get( 'type' ) ];\n\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t},\n\t\tsetParent: function () {\n\t\t\t/**\n\t\t\t * Send trigger to parent views so we can re-render everything correctly\n\t\t\t */\n\t\t\tthis.new_item.trigger( 'tva_item_was_selected', this.model );\n\t\t\tthis.receiver_model.trigger( 'tva_item_was_selected', this.model );\n\n\n\t\t\tif ( this.view ) {\n\t\t\t\tthis.view.remove();\n\t\t\t}\n\n\t\t\tvar decision = ThriveApp.util.userHasToDecide( this.item_level, this.model );\n\n\t\t\tif ( decision ) {\n\t\t\t\t/**\n\t\t\t\t * The user needs to also select a chapter in order to set the parent\n\t\t\t\t * or he needs to confirm that some lessons will be moved in this item\n\t\t\t\t */\n\n\t\t\t\tif ( decision === 1 ) {\n\t\t\t\t\tthis.new_item.set( {post_parent: this.model.get( 'ID' )} );\n\t\t\t\t\tthis.view = new views.ItemDecisionMaker( {\n\t\t\t\t\t\tmodel: this.new_item,\n\t\t\t\t\t\tcollection: this.model.get( 'chapters' ),\n\t\t\t\t\t\tmodal_view: this.modal_view,\n\t\t\t\t\t\tdecision_model: this.model\n\t\t\t\t\t} );\n\n\t\t\t\t\tthis.new_item.trigger( 'item_decission_low', this.view );\n\t\t\t\t\t$( '.tva-modal-validate-data' ).removeClass( 'tva-disabled-button' );\n\t\t\t\t} else {\n\t\t\t\t\tthis.new_item.trigger( 'tva_select_chapters', this.model.get( 'chapters' ) );\n\t\t\t\t\t$( '.tva-modal-validate-data' ).addClass( 'tva-disabled-button' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.new_item.set( {post_parent: this.model.get( 'ID' )} );\n\n\t\t\t\tthis.view = new ThriveApp.views[ ThriveApp.util.upperFirst( this.new_item.get( 'type' ) ) + 'Editor' ]( {\n\t\t\t\t\tmodel: this.new_item,\n\t\t\t\t\tcollection: this.model.get( this.new_item.get( 'type' ) + 's' ),\n\t\t\t\t\tmodal_view: this.modal_view\n\t\t\t\t} );\n\n\t\t\t\t$( '.tva-editor-container' ).html( this.view.render().$el );\n\t\t\t\t$( '.tva-modal-validate-data' ).removeClass( 'tva-disabled-button' );\n\t\t\t}\n\t\t}\n\t} );\n\n\tviews.NotifyUser = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/confirm-children-move' ),\n\t\tevents: {\n\t\t\t'click .tva-modal-next-step': 'renderEditor'\n\t\t},\n\t\tinitialize: function ( options ) {\n\t\t\tthis.modal_view = options.modal_view;\n\t\t\tthis.decision_model = options.decision_model;\n\t\t\tthis.restrict_back = options.restrict_back;\n\t\t},\n\t\trender: function () {\n\n\t\t\tthis.children = this.decision_model.hasChildren();\n\t\t\tthis.elements = this.decision_model.get( this.children );\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcurrent_item: this.children,\n\t\t\t\trestrict_back: this.restrict_back\n\t\t\t} ) );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderEditor: function () {\n\n\t\t\tvar collection = this.model.get( this.children );\n\n\t\t\tcollection.reset();\n\t\t\tcollection.add( JSON.parse( JSON.stringify( this.elements ) ) );\n\n\t\t\tvar view = new ThriveApp.views[ ThriveApp.util.upperFirst( this.model.get( 'type' ) ) + 'Editor' ]( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tcollection: this.collection,\n\t\t\t\tmodal_view: this.modal_view\n\t\t\t} );\n\n\t\t\tthis.modal_view.$( '.tva-editor-container' ).html( view.render().$el );\n\t\t}\n\t} );\n\n\t//////////////////////////////////////////////////////////////////////////\n\t///                         BASIC VIEWS                                ///\n\t//////////////////////////////////////////////////////////////////////////\n\n\tviews.StepModalFooter = views.CourseOption.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/step-modal-footer' )\n\t} );\n\n\tviews.ModalFooter = views.CourseOption.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/modal-footer' )\n\t} );\n\n\tviews.ModalGroupFooter = views.CourseOption.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/modal-group-footer' )\n\t} );\n\n\n\tviews.ModalFooterDelete = views.CourseOption.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/modal-footer-delete' )\n\t} );\n\n\tviews.ModuleCoverNormalState = views.CoverNormalState.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/cover-normal' )\n\t} );\n\n\tviews.ModuleCoverEmptyState = views.CoverEmptyState.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/cover-empty' )\n\t} );\n\n\tviews.LessonOption = views.CourseOption.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/lesson/singel-option' )\n\t} );\n\n\tviews.LessonComments = views.CoverNormalState.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/lesson/comments' ),\n\t} );\n\n\tviews.ModuleComments = views.CoverNormalState.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/module/comments' ),\n\t} );\n\n\tviews.SingleReceiverItem = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/course-option' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.type = options.type;\n\t\t},\n\t\trender: function () {\n\n\t\t\tthis.$el.append( this.template( {model: this.model, type: this.type} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\t/**\n\t * View to render available chapters to move lessons in\n\t */\n\tviews.ReceiverChapter = views.ReceiverMoveItem.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/chapter/receiver-chapter' ),\n\t\tclassName: 'tva-receiver-chapter'\n\t} );\n\n\t/**\n\t * LOGS VIEWS\n\t */\n\n\tviews.SendowlStacks = views.Base.extend( {\n\t\tclassName: 'tve-debug-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/logs' ),\n\t\tevents: {\n\t\t\t'input .tve-debug-search': 'searchStacks'\n\t\t},\n\t\tview: this,\n\t\tselect_all: '',\n\t\tinitialize: function () {\n\t\t\tThriveApp.globals.logs_settings.set( {limit: 20} );\n\t\t\tthis.listenTo( ThriveApp.globals.stack_types, 'change', this.filterStacks );\n\t\t\tthis.listenTo( this.collection, 'reset', this.renderTables );\n\n\t\t\t$( window ).off( 'scroll' ).on( 'scroll', {view: this}, this.handleScrolling );\n\t\t},\n\t\trender: function () {\n\t\t\tvar self = this;\n\t\t\tThriveApp.globals.stack_types.on( 'collection_changed', function () {\n\t\t\t\tself.$( '.tve-debug-type-change' ).prop( 'checked', self.select_all.get( 'checked' ) );\n\t\t\t\tself.filterStacks();\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tthis.renderTypes();\n\t\t\tthis.renderTables();\n\t\t\tthis.hideRows();\n\n\t\t\treturn this;\n\t\t},\n\t\thandleScrolling: function ( e ) {\n\t\t\tif ( ( Backbone.history.getFragment().indexOf( 'sendowl_stacks' ) !== - 1 && $( window ).scrollTop() + $( window ).height() ) + 10 > $( document ).height() ) {\n\t\t\t\tvar self = e.data.view;\n\t\t\t\t$( '#tva-admin-wrapper' ).css( 'margin-bottom', '100px' );\n\t\t\t\tif ( self.flag ) {\n\t\t\t\t\tself.flag = false;\n\t\t\t\t\tself.getLogsAjax( self );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\t\tgetLogsAjax: function ( self ) {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar collection = {};\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\tsettings: ThriveApp.globals.logs_settings.toDeepJSON()\n\t\t\t\t},\n\t\t\t\turl: ThriveApp.routes.logs + '/get_logs/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tThriveApp.globals.logs_settings.set( {limit: ThriveApp.globals.logs_settings.get( 'limit' ) + 20} );\n\n\t\t\t\t\tcollection = new ThriveApp.collections.Logs( response );\n\t\t\t\t\tcollection.each( self.renderTable, self );\n\t\t\t\t\tself.hideRows();\n\t\t\t\t\t$( '#tva-admin-wrapper' ).css( 'margin-bottom', '0' );\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tvar response = JSON.parse( errorObj.responseText );\n\t\t\t\tTVE_Dash.err( response.message );\n\t\t\t} ).always( function () {\n\t\t\t\tself.flag = true;\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tremove: function () {\n\t\t\t$( window ).off( 'scroll', this.handleScrolling );\n\t\t\treturn Backbone.View.prototype.remove.apply( this );\n\t\t},\n\t\thideRows: function () {\n\t\t\tthis.$( '.tvd-collection-header' ).not( '.ttw-table-header' ).hide();\n\t\t\tthis.$( '.tvd-collection-item' ).not( '.ttw-table-header' ).hide();\n\t\t},\n\t\tsearchStacks: function ( e ) {\n\t\t\tvar value = e.target.value;\n\t\t\tThriveApp.globals.logs_settings.set( {s: value, limit: 0} );\n\t\t\tthis.getStacks();\n\t\t},\n\t\tfilterStacks: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar checked = ThriveApp.globals.stack_types.where( {checked: true} );\n\t\t\tthis.collection.reset();\n\t\t\t/**\n\t\t\t * reset types\n\t\t\t * @type {Array}\n\t\t\t */\n\n\t\t\tif ( checked.length > 0 ) {\n\t\t\t\tThriveApp.globals.logs_settings.set( {limit: 0, types: []} );\n\t\t\t\tvar types = [];\n\t\t\t\t_.each( checked, function ( model ) {\n\t\t\t\t\ttypes.push( model.get( 'type' ) );\n\t\t\t\t} );\n\n\t\t\t\tThriveApp.globals.logs_settings.set( {types: types} );\n\t\t\t\tthis.getStacks();\n\n\t\t\t} else {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t}\n\t\t},\n\t\tgetStacks: function () {\n\t\t\tvar self = this;\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\tsettings: ThriveApp.globals.logs_settings.toDeepJSON()\n\t\t\t\t},\n\t\t\t\turl: ThriveApp.routes.stacks + '/get_stacks/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.collection.reset();\n\t\t\t\t\tself.$( '#tve-debug-tables-wrapper' ).empty();\n\t\t\t\t\tself.collection.add( response );\n\t\t\t\t\tself.collection.each( self.renderTable, self );\n\t\t\t\t\tThriveApp.globals.logs_settings.set( {limit: 20} );\n\t\t\t\t\tself.hideRows();\n\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tself.$( '#tve-debug-tables-wrapper' ).empty();\n\t\t\t\tvar response = JSON.parse( errorObj.responseText );\n\t\t\t\tTVE_Dash.err( response.message );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\trenderTypes: function () {\n\t\t\tif ( ThriveApp.globals.stack_types.length > 0 ) {\n\t\t\t\tThriveApp.globals.stack_types.each( this.renderType, this );\n\t\t\t}\n\n\t\t\tvar unchecked = ThriveApp.globals.stack_types.findWhere( {checked: false} );\n\t\t\tthis.select_all = new ThriveApp.models.Type( {type: 'Select All', checked: true} );\n\t\t\tif ( unchecked ) {\n\t\t\t\tthis.select_all.set( {checked: false} );\n\t\t\t}\n\n\t\t\tvar view = new views.Type( {\n\t\t\t\tcollection: ThriveApp.globals.stack_types,\n\t\t\t\tmodel: this.select_all\n\t\t\t} );\n\n\t\t\tthis.$( '#tve-debug-type-filters' ).append( view.render().$el );\n\n\t\t},\n\t\trenderType: function ( type ) {\n\t\t\tvar view = new views.Type( {\n\t\t\t\tcollection: ThriveApp.globals.stack_types,\n\t\t\t\tmodel: type\n\t\t\t} );\n\n\t\t\tthis.$( '#tve-debug-type-filters' ).append( view.render().$el );\n\n\t\t},\n\t\trenderTables: function () {\n\t\t\tthis.$( '#tve-debug-tables-wrapper' ).empty();\n\t\t\tthis.collection.each( this.renderTable, this )\n\t\t},\n\t\trenderTable: function ( table ) {\n\t\t\tvar view = new views.Table( {\n\t\t\t\tmodel: table\n\t\t\t} );\n\n\t\t\tthis.$( '#tve-debug-tables-wrapper' ).append( view.render().$el );\n\t\t}\n\t} );\n\n\tviews.SendowlLogs = views.SendowlStacks.extend( {\n\t\tselect_all: '',\n\t\tevents: {\n\t\t\t'input .tve-debug-search': 'searchLogs'\n\t\t},\n\t\tflag: true,\n\t\tall: false,\n\t\tinitialize: function () {\n\t\t\tThriveApp.globals.logs_settings.set( {limit: 20} );\n\t\t\tthis.listenTo( ThriveApp.globals.log_types, 'change', this.filterLogs );\n\t\t\tthis.listenTo( this.collection, 'reset', this.renderTables );\n\t\t\tthis.all = this.collection.length < 20;\n\n\t\t\t$( window ).off( 'scroll' ).on( 'scroll', {view: this}, this.handleScrolling );\n\t\t},\n\t\trender: function () {\n\t\t\tvar self = this;\n\t\t\tThriveApp.globals.log_types.on( 'collection_changed', function () {\n\t\t\t\tself.$( '.tve-debug-type-change' ).prop( 'checked', self.select_all.get( 'checked' ) );\n\t\t\t\tself.filterLogs();\n\t\t\t} );\n\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tthis.renderTypes();\n\t\t\tthis.renderTables();\n\t\t\tthis.hideRows();\n\n\t\t\treturn this;\n\t\t},\n\t\thandleScrolling: function ( e ) {\n\t\t\tif ( e.data.view.all ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ( Backbone.history.getFragment().indexOf( 'sendowl_logs' ) !== - 1 && $( window ).scrollTop() + $( window ).height() ) + 10 > $( document ).height() ) {\n\t\t\t\tvar self = e.data.view;\n\t\t\t\t$( '#tva-admin-wrapper' ).css( 'margin-bottom', '100px' );\n\n\t\t\t\tif ( self.flag ) {\n\t\t\t\t\tself.flag = false;\n\t\t\t\t\tself.getLogsAjax( self );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tgetLogsAjax: function ( self ) {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar collection = {};\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\tsettings: ThriveApp.globals.logs_settings.toDeepJSON()\n\t\t\t\t},\n\t\t\t\turl: ThriveApp.routes.logs + '/get_logs/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\n\t\t\t\t\tif ( response.all ) {\n\t\t\t\t\t\tself.all = true;\n\t\t\t\t\t\tTVE_Dash.err( ThriveApp.t.NoLogsFound );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tThriveApp.globals.logs_settings.set( {limit: ThriveApp.globals.logs_settings.get( 'limit' ) + 20} );\n\n\t\t\t\t\tcollection = new ThriveApp.collections.Logs( response );\n\t\t\t\t\tcollection.each( self.renderTable, self );\n\n\t\t\t\t\tself.hideRows();\n\t\t\t\t\t$( '#tva-admin-wrapper' ).css( 'margin-bottom', '0' );\n\t\t\t\t}\n\t\t\t} ).always( function () {\n\t\t\t\tself.flag = true;\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tsearchLogs: function ( e ) {\n\t\t\tvar value = e.target.value;\n\t\t\tThriveApp.globals.logs_settings.set( {s: value, limit: 0} );\n\t\t\tthis.getLogs();\n\t\t},\n\t\trenderTypes: function () {\n\n\t\t\tvar unchecked = ThriveApp.globals.log_types.findWhere( {checked: false} );\n\t\t\tthis.select_all = new ThriveApp.models.Type( {type: 'Select All', checked: true} );\n\t\t\tif ( unchecked ) {\n\t\t\t\tthis.select_all.set( {checked: false} );\n\t\t\t}\n\n\t\t\tvar view = new views.Type( {\n\t\t\t\tcollection: ThriveApp.globals.log_types,\n\t\t\t\tmodel: this.select_all\n\t\t\t} );\n\n\t\t\tthis.$( '#tve-debug-type-filters' ).append( view.render().$el );\n\n\t\t\tif ( ThriveApp.globals.log_types.length > 0 ) {\n\t\t\t\tThriveApp.globals.log_types.each( this.renderType, this );\n\t\t\t}\n\t\t},\n\t\trenderType: function ( type ) {\n\t\t\tvar view = new views.Type( {\n\t\t\t\tcollection: ThriveApp.globals.log_types,\n\t\t\t\tmodel: type\n\t\t\t} );\n\n\t\t\tthis.$( '#tve-debug-type-filters' ).append( view.render().$el );\n\n\t\t},\n\t\trenderTable: function ( table ) {\n\t\t\tvar view = new views.LogTable( {\n\t\t\t\tmodel: table\n\t\t\t} );\n\n\t\t\tthis.$( '#tve-debug-tables-wrapper' ).append( view.render().$el );\n\t\t},\n\t\tfilterLogs: function () {\n\t\t\tTVE_Dash.showLoader();\n\t\t\tvar checked = ThriveApp.globals.log_types.where( {checked: true} );\n\t\t\tthis.collection.reset();\n\t\t\t/**\n\t\t\t * reset types\n\t\t\t * @type {Array}\n\t\t\t */\n\n\n\t\t\tif ( checked.length > 0 ) {\n\t\t\t\tThriveApp.globals.logs_settings.set( {limit: 0, types: []} );\n\t\t\t\tvar types = [];\n\t\t\t\t_.each( checked, function ( model ) {\n\t\t\t\t\ttypes.push( model.get( 'type' ) );\n\t\t\t\t} );\n\n\t\t\t\tThriveApp.globals.logs_settings.set( {types: types} );\n\t\t\t\tthis.getLogs();\n\n\t\t\t} else {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t}\n\t\t},\n\t\tgetLogs: function () {\n\t\t\tvar self = this;\n\t\t\tTVE_Dash.showLoader();\n\t\t\t$.ajax( {\n\t\t\t\theaders: {\n\t\t\t\t\t'X-WP-Nonce': ThriveApp.nonce\n\t\t\t\t},\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\tsettings: ThriveApp.globals.logs_settings.toDeepJSON()\n\t\t\t\t},\n\t\t\t\turl: ThriveApp.routes.logs + '/get_logs/'\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.collection.reset();\n\t\t\t\t\tself.$( '#tve-debug-tables-wrapper' ).empty();\n\t\t\t\t\tself.collection.add( response );\n\t\t\t\t\tself.collection.each( self.renderTable, self );\n\t\t\t\t\tThriveApp.globals.logs_settings.set( {limit: 20} );\n\t\t\t\t\tself.hideRows();\n\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tself.$( '#tve-debug-tables-wrapper' ).empty();\n\t\t\t\tvar response = JSON.parse( errorObj.responseText );\n\t\t\t\tTVE_Dash.err( response.message );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t}\n\t} );\n\n\tviews.Type = views.Base.extend( {\n\t\tclassName: 'tvd-col tvd-s3',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/type' ),\n\t\tevents: {\n\t\t\t'click .tve-debug-type-change': 'setFilters'\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\treturn this;\n\t\t},\n\t\tsetFilters: function ( e ) {\n\t\t\tvar checked = $( e.target ).prop( 'checked' );\n\n\t\t\tthis.model.set( {checked: checked} );\n\n\t\t\tif ( typeof this.model.get( 'id' ) === 'undefined' ) {\n\t\t\t\tTVE_Dash.showLoader();\n\t\t\t\tthis.collection.each( function ( model ) {\n\t\t\t\t\tmodel.set( {checked: checked}, {silent: true} );\n\t\t\t\t}, this );\n\n\t\t\t\tthis.collection.trigger( 'collection_changed' );\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}\n\t} );\n\n\tviews.Table = views.Base.extend( {\n\t\tclassName: 'tvd-col tvd-s12',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/table-wrapper' ),\n\t\theaders: [],\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\tthis.renderData();\n\t\t\treturn this;\n\t\t},\n\t\trenderData: function () {\n\t\t\tthis.model.get( 'data' ).each( function ( model ) {\n\t\t\t\tvar view = new views.Data( {\n\t\t\t\t\tmodel: model\n\t\t\t\t} );\n\n\t\t\t\tthis.$( '.tve-debug-table' ).append( view.render().$el );\n\t\t\t}, this );\n\t\t}\n\t} );\n\n\tviews.LogTable = views.Table.extend( {\n\t\trenderData: function () {\n\t\t\tvar view = new views.Data( {\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$( '.tve-debug-table' ).append( view.render().$el );\n\t\t}\n\t} );\n\n\tviews.Data = views.Base.extend( {\n\t\ttagName: 'ul',\n\t\tclassName: 'tvd-collection tvd-with-header',\n\t\tevents: {\n\t\t\t'click .ttw-table-header': 'toggleLog'\n\t\t},\n\t\ttoggleLog: function ( e ) {\n\t\t\te.stopPropagation();\n\t\t\tthis.$( '.tvd-collection-item, .tvd-collection-header' ).not( '.ttw-table-header' ).slideToggle();\n\t\t\t$( e.currentTarget ).find( '.tve-debug-slide > span' ).toggleClass( \"tve-churn-icon-keyboard_arrow_up\" );\n\t\t\t$( e.currentTarget ).find( '.tve-debug-slide > span' ).toggleClass( \"tve-churn-icon-keyboard_arrow_down\" );\n\t\t},\n\t\trender: function () {\n\t\t\tvar self = this,\n\t\t\t\tdata = this.model.get( 'data' );\n\t\t\tif ( this.model.get( 'type' ) && this.model.get( 'identifier' ) ) {\n\t\t\t\tthis.renderInfo();\n\t\t\t}\n\n\t\t\tif ( typeof ( data ) === 'object' ) {\n\t\t\t\t_.each( data, function ( value, attribute ) {\n\n\t\t\t\t\tvar left_column = new views.LeftColumn( {\n\t\t\t\t\t\tvalue: attribute\n\t\t\t\t\t} );\n\t\t\t\t\tself.$el.append( left_column.render().$el );\n\t\t\t\t\tif ( typeof ( value ) === 'object' && value !== null ) {\n\n\t\t\t\t\t\tvar model = new ThriveApp.models.Base( {data: value} );\n\t\t\t\t\t\tvar right_table_column = new views.RightTableColumn( {\n\t\t\t\t\t\t\tmodel: model\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.$el.append( right_table_column.render().$el );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar right_column = new views.RightColumn( {\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tself.$el.append( right_column.render().$el );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trenderInfo: function () {\n\t\t\tvar view = new views.InfoRow( {\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$el.append( view.render().$el );\n\t\t}\n\t} );\n\tviews.InfoRow = views.Base.extend( {\n\t\ttagName: 'li',\n\t\tclassName: 'tvd-collection-header ttw-table-header tvd-col tvd-s12',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/table-info-row' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.LeftColumn = views.Base.extend( {\n\t\ttagName: 'li',\n\t\tclassName: 'tvd-collection-header tvd-col tvd-s2',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/table-item-column' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.value = options.value;\n\n\t\t\tthis.$( '.tvd-collection-item' ).hide();\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {value: this.value} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.RightColumn = views.LeftColumn.extend( {\n\t\tclassName: 'tvd-collection-item tvd-col tvd-s10 tve-debug-column'\n\t} );\n\n\tviews.RightTableColumn = views.Base.extend( {\n\t\ttagName: 'li',\n\t\tclassName: 'tvd-collection-item tvd-col tvd-s10 tve-debug-column tve-debug-sub-table',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/table-data-column' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\tthis.renderData();\n\t\t\treturn this;\n\t\t},\n\t\trenderData: function () {\n\t\t\tvar data = new views.Data( {\n\t\t\t\tmodel: this.model\n\t\t\t} );\n\n\t\t\tthis.$el.append( data.render().$el );\n\t\t}\n\t} );\n\n\t/**\n\t * View to render Sendowl Customers\n\t */\n\tviews.SendowlCustomers = views.Base.extend( {\n\t\tclassName: 'tvd-container',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/customers' ),\n\t\tevents: {\n\t\t\t'click #tva-add-customer': function () {\n\t\t\t\tthis.import_type = null;\n\t\t\t\tthis.addNewCustomer();\n\t\t\t},\n\t\t\t'click .tva-import-customer': function ( e ) {\n\t\t\t\tthis.$( '.tva-import-customer' ).toggleClass( 'dropdown-visible' );\n\t\t\t},\n\t\t\t'click .tva-selected-product-item': function ( e ) {\n\t\t\t\tthis.$( '.tva-available-products' ).slideToggle();\n\t\t\t},\n\t\t\t'click .tva-selected-bundle-item': function () {\n\t\t\t\tthis.$( '.tva-available-bundles' ).slideToggle();\n\t\t\t},\n\t\t\t'click .tva-product-item': 'setCurrentProduct',\n\t\t\t'click .tva-bundle-item': 'setCurrentBundle',\n\t\t\t'click .tva-pg-prev': 'prev',\n\t\t\t'click .tva-pg-next': 'next',\n\t\t\t'click .tva-pg-item': 'goToPage',\n\t\t\t'input #tva-search-customers': 'search',\n\t\t\t'click .tva-csv-import': 'csvImport',\n\t\t\t'click .tva-list-import': 'listImport',\n\t\t\t'click .tva-edit-customer': 'editCustomer'\n\t\t},\n\t\tinitialize: function () {\n\t\t\tthis.initData();\n\t\t\tvar self = this,\n\t\t\t\tsettings = ThriveApp.globals.soSettings;\n\n\t\t\tthis.collection.on( 'tva_render_customers', function ( args ) {\n\t\t\t\tself.initData();\n\t\t\t\tself.pagination.total_pages = Math.ceil( args.count / settings.get( 'customers_per_page' ) );\n\t\t\t\tself.collection = new ThriveApp.collections.SendowlCustomers( args.data );\n\t\t\t\tself.render();\n\t\t\t} );\n\n\t\t\tthis.pagination.total_pages = Math.ceil( settings.get( 'customers_count' ) / settings.get( 'customers_per_page' ) );\n\n\t\t\tthis.products = new ThriveApp.collections.SendowlCollection( settings.get( 'products' ).toJSON() );\n\t\t\tthis.bundles = new ThriveApp.collections.SendowlCollection( settings.get( 'bundles' ).toJSON() );\n\t\t},\n\t\tinitData: function () {\n\t\t\tthis.timeout = null;\n\t\t\tthis.import_type = null;\n\n\t\t\tthis.filters = {\n\t\t\t\tlimit: ThriveApp.globals.soSettings.get( 'customers_per_page' ),\n\t\t\t\toffset: 0,\n\t\t\t\tcurrent_product: new ThriveApp.models.Base(),\n\t\t\t\tcurrent_bundle: new ThriveApp.models.Base(),\n\t\t\t\ts: '',\n\t\t\t\tcount: false\n\t\t\t};\n\n\t\t\tthis.pagination = {\n\t\t\t\tpages: [],\n\t\t\t\tcurrent_page: 1,\n\t\t\t\ttotal_pages: 1,\n\t\t\t\tnear: 2\n\t\t\t};\n\t\t},\n\t\trender: function () {\n\t\t\tthis.getPages();\n\n\t\t\tthis.$el.html( this.template( {\n\t\t\t\tmodel: this.model,\n\t\t\t\tfilters: this.filters,\n\t\t\t\tpagination: this.pagination,\n\t\t\t\tcustomers_count: ThriveApp.globals.settings.get( 'customers_count' )\n\t\t\t} ) );\n\n\t\t\tthis.renderFilters();\n\n\t\t\tthis.collection.each( function ( model ) {\n\t\t\t\tthis.$( '.tva-customers-table' ).append( new views.SendowlCustomer( {model: model} ).render().$el );\n\t\t\t}, this );\n\n\t\t\treturn this;\n\t\t},\n\t\trenderFilters: function () {\n\t\t\tif ( ( this.filters.current_product.get( 'id' ) > 0 ) && ( ! this.products.findWhere( {id: 0} ) ) ) {\n\t\t\t\tthis.products.add( new ThriveApp.models.Sendowl( {\n\t\t\t\t\tid: 0,\n\t\t\t\t\tname: 'All products'\n\t\t\t\t} ), {at: 0} );\n\t\t\t} else {\n\t\t\t\tvar model = this.products.findWhere( {ID: 0} );\n\n\t\t\t\tif ( model ) {\n\t\t\t\t\tthis.products.remove( model );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ( this.filters.current_bundle.get( 'id' ) > 0 ) && ( ! this.bundles.findWhere( {id: 0} ) ) ) {\n\t\t\t\tthis.bundles.add( new ThriveApp.models.Sendowl( {\n\t\t\t\t\tid: 0,\n\t\t\t\t\tname: 'All bundles'\n\t\t\t\t} ), {at: 0} );\n\t\t\t} else {\n\t\t\t\tvar model = this.bundles.findWhere( {ID: 0} );\n\n\t\t\t\tif ( model ) {\n\t\t\t\t\tthis.bundles.remove( model );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.products.each( function ( model ) {\n\t\t\t\tnew views.SendowlSingleProduct( {\n\t\t\t\t\tmodel: model,\n\t\t\t\t\tel: this.$( '.tva-available-products' ),\n\t\t\t\t\tfilters: this.filters\n\t\t\t\t} ).render();\n\t\t\t}, this );\n\n\t\t\tthis.bundles.each( function ( model ) {\n\t\t\t\tnew views.SendowlBundleProduct( {\n\t\t\t\t\tmodel: model,\n\t\t\t\t\tel: this.$( '.tva-available-bundles' ),\n\t\t\t\t\tfilters: this.filters\n\t\t\t\t} ).render();\n\t\t\t}, this );\n\t\t},\n\t\taddNewCustomer: function () {\n\t\t\tthis.modal( ThriveApp.modals.AddCustomerModal, {\n\t\t\t\tmodel: new ThriveApp.models.SendowlCustomer( {} ),\n\t\t\t\tsettings: ThriveApp.globals.soSettings,\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal tva-extra-space',\n\t\t\t\timport_type: this.import_type,\n\t\t\t\tprevent_back: ! ! this.import_type,\n\t\t\t\tdismissible: false\n\t\t\t} );\n\t\t},\n\t\teditCustomer: function ( e ) {\n\t\t\tvar id = parseInt( e.currentTarget.getAttribute( 'data-customer-id' ) );\n\n\t\t\tthis.modal( ThriveApp.modals.EditCustomerModal, {\n\t\t\t\tmodel: this.collection.findWhere( {ID: id} ),\n\t\t\t\tsettings: ThriveApp.globals.soSettings,\n\t\t\t\t'max-width': '850px',\n\t\t\t\twidth: 'auto',\n\t\t\t\tin_duration: 200,\n\t\t\t\tout_duration: 300,\n\t\t\t\tclassName: 'tva-default-modal-style tvd-modal tva-extra-space'\n\t\t\t} );\n\t\t},\n\t\tsetCurrentProduct: function ( e ) {\n\t\t\tvar id = parseInt( e.currentTarget.getAttribute( 'data-product-id' ) ),\n\t\t\t\tmodel = this.products.findWhere( {id: id} );\n\n\t\t\tthis.filters.current_bundle = new ThriveApp.models.Base();\n\t\t\tthis.filters.current_product = model ? model : this.filters.current_product;\n\t\t\tthis.filters.count = true;\n\t\t\tthis.filters.offset = 0;\n\t\t\tthis.pagination.current_page = 1;\n\t\t\tthis.doAjaxRequest();\n\t\t},\n\t\tsetCurrentBundle: function ( e ) {\n\t\t\tvar id = parseInt( e.currentTarget.getAttribute( 'data-bundle-id' ) ),\n\t\t\t\tmodel = this.bundles.findWhere( {id: id} );\n\n\t\t\tthis.filters.current_product = new ThriveApp.models.Base();\n\t\t\tthis.filters.current_bundle = model ? model : this.filters.current_bundle;\n\t\t\tthis.filters.count = true;\n\t\t\tthis.filters.offset = 0;\n\t\t\tthis.pagination.current_page = 1;\n\t\t\tthis.doAjaxRequest();\n\t\t},\n\t\tprev: function () {\n\t\t\tthis.pagination.current_page --;\n\t\t\tthis.filters.offset = this.filters.offset >= this.filters.limit ? this.filters.offset - this.filters.limit : 0;\n\t\t\tthis.doAjaxRequest();\n\t\t},\n\t\tnext: function () {\n\t\t\tthis.pagination.current_page ++;\n\t\t\tthis.filters.offset = this.filters.offset + this.filters.limit;\n\t\t\tthis.doAjaxRequest();\n\t\t},\n\t\tgoToPage: function ( e ) {\n\t\t\tvar page = parseInt( e.currentTarget.getAttribute( 'data-page' ) );\n\n\t\t\tthis.pagination.current_page = parseInt( page );\n\t\t\tthis.filters.offset = this.pagination.current_page - 1 === 0 ? 0 : ( this.pagination.current_page - 1 ) * this.filters.limit;\n\n\t\t\tthis.doAjaxRequest();\n\t\t},\n\t\tsearch: function ( e ) {\n\t\t\tif ( this.timeout ) {\n\t\t\t\tclearTimeout( this.timeout )\n\t\t\t}\n\n\t\t\tvar self = this;\n\n\t\t\tthis.timeout = setTimeout( function () {\n\t\t\t\tself.$( '#tva-search-customers' ).blur();\n\t\t\t\tself.filters.count = true;\n\t\t\t\tself.filters.offset = 0;\n\t\t\t\tself.filters.s = _.escape( e.target.value );\n\t\t\t\tself.pagination.current_page = 1;\n\n\t\t\t\tself.doAjaxRequest().always( function () {\n\t\t\t\t\tvar input = self.$( '.ui-autocomplete-input' ).first(),\n\t\t\t\t\t\tval = input.val();\n\n\t\t\t\t\tinput.focus().val( '' ).val( val );\n\t\t\t\t} );\n\n\t\t\t}, 400 );\n\t\t},\n\t\tdoAjaxRequest: function () {\n\t\t\tTVE_Dash.showLoader();\n\n\t\t\tvar self = this;\n\n\t\t\treturn $.ajax( {\n\t\t\t\turl: ThriveApp.routes.users + '/get_customers',\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: self.getAjaxData()\n\t\t\t} ).done( function ( response, status, options ) {\n\t\t\t\tif ( response ) {\n\t\t\t\t\tself.collection = new ThriveApp.collections.SendowlCustomers( response.customers );\n\t\t\t\t\tself.pagination.total_pages = Math.ceil( response.count / ThriveApp.globals.soSettings.get( 'customers_per_page' ) );\n\t\t\t\t\tself.render();\n\t\t\t\t}\n\t\t\t} ).error( function ( errorObj ) {\n\t\t\t\tTVE_Dash.err( errorObj.responseText );\n\t\t\t} ).always( function () {\n\t\t\t\tTVE_Dash.hideLoader();\n\t\t\t} );\n\t\t},\n\t\tgetAjaxData: function () {\n\t\t\tvar data = {};\n\n\t\t\tdata.limit = this.filters.limit;\n\t\t\tdata.offset = this.filters.offset;\n\t\t\tdata.product_id = 0;\n\t\t\tdata.s = this.filters.s;\n\t\t\tdata.count = this.filters.count;\n\t\t\tdata.count_value = this.pagination.total_pages;\n\n\t\t\tif ( this.filters.current_bundle.get( 'id' ) > 0 ) {\n\t\t\t\tdata.product_id = this.filters.current_bundle.get( 'id' );\n\t\t\t} else if ( this.filters.current_product.get( 'id' ) > 0 ) {\n\t\t\t\tdata.product_id = this.filters.current_product.get( 'id' );\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tgetPages: function () {\n\t\t\tthis.pagination.pages = [];\n\n\t\t\tvar self = this,\n\t\t\t\tleft_x = this.pagination.current_page - this.pagination.near,\n\t\t\t\tright_x = this.pagination.current_page + this.pagination.near;\n\n\t\t\tfor ( var i = 1; i <= this.pagination.total_pages; i ++ ) {\n\n\t\t\t\tvar left = ( i >= left_x ) && ( i < self.pagination.current_page ),\n\t\t\t\t\tright = ( i > self.pagination.current_page ) && i <= right_x;\n\n\t\t\t\tif ( ! _.contains( self.pagination.pages, i ) ) {\n\t\t\t\t\t// always push first page\n\t\t\t\t\tif ( i === 1 ) {\n\t\t\t\t\t\tself.pagination.pages.push( i );\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// push the current page\n\t\t\t\t\tif ( i === self.pagination.current_page ) {\n\t\t\t\t\t\tself.pagination.pages.push( i );\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t//always push last page\n\t\t\t\t\tif ( i === self.pagination.total_pages ) {\n\t\t\t\t\t\tself.pagination.pages.push( i );\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// push first x pages\n\t\t\t\t\tif ( left ) {\n\t\t\t\t\t\tself.pagination.pages.push( i );\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// push last x pages\n\t\t\t\t\tif ( right ) {\n\t\t\t\t\t\tself.pagination.pages.push( i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tlistImport: function () {\n\t\t\tthis.import_type = 'listNames';\n\t\t\tthis.addNewCustomer();\n\t\t},\n\t\tcsvImport: function () {\n\t\t\tthis.import_type = 'csvFile';\n\t\t\tthis.addNewCustomer();\n\t\t}\n\t} );\n\n\tviews.SendowlCustomer = views.Base.extend( {\n\t\ttagName: 'div',\n\t\tclassName: 'tva-sendowl-customer',\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/customer' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SendowlModalMembershipOptions = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'course/edit/sendowl-options' )\n\t} );\n\n\tviews.ImportFromCsvFile = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/sendowl/csv-import' ),\n\t\tfiles: '',\n\t\tinitialize: function ( options ) {\n\t\t\tthis.files = options.files;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {files: this.files} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.ImportFromListNames = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/sendowl/list-import' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {} ) );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SendowlSingleProduct = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/single-product-option' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SendowlBundleProduct = views.SendowlSingleProduct.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/single-bundle-option' )\n\t} );\n\n\tviews.SendowlCsvFile = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/csv-option' ),\n\t\tcsv_name: '',\n\t\tinitialize: function ( options ) {\n\t\t\tthis.csv_name = options.csv_name\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {csv_name: this.csv_name} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SendowlCsvCustomer = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/csv-customer' ),\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.ManualImportPreview = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/list-option' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SingleCustomerImport = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'sendowl/single-customer-import' ),\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( {model: this.model} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SingleIcon = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/icons/icon' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.icon_id = options.icon_id;\n\t\t\tthis.extra_class = options.extra_class;\n\t\t},\n\t\trender: function () {\n\t\t\tthis.$el.append( this.template( {\n\t\t\t\ticon_id: this.icon_id,\n\t\t\t\textra_class: this.extra_class\n\t\t\t} ) );\n\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tviews.SingleCustomIcon = views.Base.extend( {\n\t\ttemplate: TVE_Dash.tpl( 'modals/icons/custom-icon' ),\n\t\tinitialize: function ( options ) {\n\t\t\tthis.icon = options.icon;\n\t\t},\n\t\trender: function () {\n\t\t\tvar title = this.icon.replace( 'icon-', '' );\n\n\t\t\tthis.$el.append( this.template( {\n\t\t\t\ttitle: title,\n\t\t\t\ticon: this.icon\n\t\t\t} ) );\n\t\t}\n\t} );\n\n\n\tmodule.exports = views;\n\n} )( jQuery );\n//# sourceURL=workspace/admin/js/views.js")
}}}}})("workspace/admin/js/main");