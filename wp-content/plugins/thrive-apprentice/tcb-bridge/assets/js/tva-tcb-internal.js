// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"workspace": {
		"tcb-bridge": {
			"assets": {
				"js": {
					"internal": {
						"checkout-component.js": function (exports, module, require) {
							eval("/**\n * Created by PhpStorm.\n * User: Ovidiu\n * Date: 10/15/2018\n * Time: 5:57 PM\n */\nvar settings = Backbone.Model.extend( {\n\tdefaults: function () {\n\t\treturn {\n\t\t\terror_messages: {\n\t\t\t\temail: TVE.t.cf_errors.email.text,\n\t\t\t\tempty_fields: 'Some fields are empty!',\n\t\t\t\tpasswords_not_match: 'The passwords do not match',\n\t\t\t\texisting_user_email: 'An account with that email address already exists. In order to place the order, please login first. [a]Click here to login[/a]'\n\t\t\t}\n\t\t}\n\t},\n\tinput_config_name: 'config',\n\tinput_selector: 'input[name=\"config\"]',\n\t$element: null,\n\n\t/**\n\t * tries to find config input in active element\n\t * sets encoded model attributes in config input as value\n\t */\n\twrite: function () {\n\n\t\tif ( ! this.$element ) {\n\t\t\treturn\n\t\t}\n\n\t\tvar $input = this.$element.find( this.input_selector );\n\n\t\tif ( $input.length <= 0 ) {\n\t\t\t$input = $( '<input type=\"hidden\" name=\"' + this.input_config_name + '\"/>' );\n\t\t\tthis.$element.append( $input );\n\t\t}\n\n\t\t$input.attr( 'value', TVE.Base64.encode( TVE.serialize( this.attributes ) ) );\n\t},\n\n\t/**\n\t * finds the input in $element\n\t * decodes its value and\n\t * sets data into model\n\t */\n\tread: function () {\n\n\t\tthis.clear( {\n\t\t\tsilent: true\n\t\t} );\n\n\t\tthis.attributes = this.defaults();\n\n\t\tvar $config = this.$element.find( this.input_selector );\n\n\t\tif ( $config.length && $config.val() ) {\n\n\t\t\tthis.set( TVE.unserialize( TVE.Base64.decode( $config.val() ) ), {silent: true} );\n\t\t}\n\t},\n\n\t/**\n\t * sets the active element and\n\t * reads its config\n\t */\n\tupdate: function () {\n\n\t\tthis.$element = TVE.ActiveElement;\n\n\t\tif ( ! this.$element.is( '.thrv-checkout' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.read();\n\n\t\tif ( this.$element.find( this.input_selector ).length === 0 ) {\n\t\t\tthis.write();\n\t\t}\n\t}\n} );\n\nvar BUTTON_GROUP_ITEM_SELECTOR = '.thrv-button-group-item',\n\tBUTTON_GROUP_ITEM_CLS = 'thrv-button-group-item',\n\tBUTTON_GROUP_ACTIVE_SELECTOR = '.tcb-active-state',\n\tBUTTON_GROUP_ACTIVE_CLS = 'tcb-active-state';\n\n\nmodule.exports = TVE.Views.Base.component.extend( {\n\tcheckout: null,\n\tsettings: null,\n\tstates_with_no_button_group: [ 'forgot_password', 'reset_confirmation' ],\n\tafter_init: function () {\n\t\tthis.settings = new settings();\n\n\t\tthis.settings.on( 'change', function ( model, change_options ) {\n\t\t\tthis.write();\n\t\t} );\n\t},\n\t/**\n\t * called when:\n\t * - an element is clicked\n\t * - mouse leaves the element\n\t * - element is inserted into content\n\t * - before setConfig() on component\n\t * - before component.controls[].update()\n\t */\n\tbefore_update: function () {\n\n\t\tthis.settings.update();\n\t},\n\n\tcontrols_init: function () {\n\n\t\t/**\n\t\t * For Checkout Element we need to hide the active state from the button group item\n\t\t */\n\t\tTVE.add_filter( 'tcb.toggle_active_state', _.bind( function ( show, $activeElement ) {\n\n\t\t\tif ( TVE._type( $activeElement ) === 'button_group_item' && $activeElement.closest( '.thrv-checkout' ).length ) {\n\t\t\t\tshow = false;\n\t\t\t}\n\n\t\t\treturn show;\n\t\t} ) );\n\n\t\tTVE.add_action( 'tcb_after_cloud_template', _.bind( function ( $element ) {\n\n\t\t\tif ( ! $element.is( '.thrv-checkout' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $input = $element.find( this.input_selector );\n\n\t\t\t/**\n\t\t\t * Reset the config input with the defaults\n\t\t\t *\n\t\t\t * Fixes the issue when the cloud template email is placed inside the Checkout Form Element\n\t\t\t */\n\t\t\tif ( $input.length ) {\n\n\t\t\t\t$input.attr( 'value', TVE.Base64.encode( TVE.serialize( this.defaults() ) ) );\n\n\t\t\t\tthis.update();\n\t\t\t}\n\n\t\t}, this.settings ) );\n\n\t\t/**\n\t\t * After the element is dropped we need to generate a unique identifier on button group wrapper to apply the css as group depending on the active button class\n\t\t */\n\t\tTVE.add_filter( 'element_drop', _.bind( function ( $element ) {\n\t\t\tif ( $element && $element.hasClass( 'thrv-checkout' ) ) {\n\t\t\t\tvar checkout_button_group_unique_identifier = TVE.CSS_Rule_Cache.generate_id( 'tve-u-ck-button-group-' );\n\n\t\t\t\t$element.find( '.thrv-button-group' ).attr( 'data-ck-button-group', checkout_button_group_unique_identifier );\n\n\t\t\t\tthis.update_btn_group_data_selector( $element );\n\t\t\t}\n\t\t\treturn $element;\n\t\t}, this ) );\n\n\t\t/**\n\t\t * Add css to BUTTON_GROUP_ITEM_CLS with respect to the parent\n\t\t */\n\t\tTVE.add_filter( 'head_css_selector', function ( data ) {\n\n\t\t\tif ( TVE.inner_$( data.element ).closest( '.thrv-checkout' ).length && data.selector.indexOf( BUTTON_GROUP_ITEM_CLS ) > - 1 ) {\n\n\t\t\t\tif ( _.isString( data.suffix ) && _.isString( data.prefix ) ) {\n\n\t\t\t\t\tif ( data.prefix.length > 0 ) {\n\t\t\t\t\t\tdata.selector = data.prefix + ' ' + data.selector\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.suffix.length > 0 ) {\n\t\t\t\t\t\tdata.selector = data.selector + ' ' + data.suffix\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t} );\n\n\t\t/**\n\t\t * Add Checkout Form Elements for witch we should not display the clone button\n\t\t */\n\t\tTVE.add_filter( 'selectors_no_clone', function ( selectors ) {\n\n\t\t\tselectors += ', .thrv-checkout, .tcb-checkout-form .tve-form-item label, .tcb-checkout-form .tve-form-input';\n\n\t\t\treturn selectors;\n\t\t} );\n\n\t\t/**\n\t\t * Add Checkout Form Elements for witch we should not display the delete button\n\t\t */\n\t\tTVE.add_filter( 'selectors_no_delete', function ( selectors ) {\n\n\t\t\tselectors += ', .tcb-checkout-form .tve-form-item label, .tcb-checkout-form .tve-form-input';\n\n\t\t\treturn selectors;\n\t\t} );\n\n\t\t/**\n\t\t * Add Checkout Form Elements for witch we should not display the save button\n\t\t */\n\t\tTVE.add_filter( 'selectors_no_save', function ( selectors ) {\n\n\t\t\tselectors += ', .thrv-checkout';\n\n\t\t\treturn selectors;\n\t\t} );\n\n\t\tthis.controls[ 'AddRemoveLabels' ].change = function ( $element, dom ) {\n\t\t\tif ( dom.checked ) {\n\t\t\t\t$element.head_css( {'display': ''}, false, this.config.css_suffix, false, this.config.css_prefix );\n\t\t\t} else {\n\t\t\t\t$element.head_css( {'display': 'none !important'}, false, this.config.css_suffix, false, this.config.css_prefix );\n\t\t\t}\n\t\t};\n\t\tthis.controls[ 'AddRemoveLabels' ].update = function () {\n\t\t\tvar display = this.applyTo().head_css( 'display', false, this.config.css_suffix, true, this.config.css_prefix ),\n\t\t\t\tchecked = display !== 'none';\n\n\t\t\tthis.setChecked( checked );\n\t\t};\n\n\t\t/**\n\t\t * Payment Provider\n\t\t */\n\t\tthis.controls[ 'payment_provider' ].update = function ( $element ) {\n\t\t\tthis.setValue( $element.attr( 'data-payment-platform' ) );\n\t\t};\n\n\t\tthis.controls[ 'payment_provider' ].input = function ( $element, dom ) {\n\t\t\t$element.attr( 'data-payment-platform', dom.value );\n\t\t};\n\t},\n\n\tafter_enter_edit_mode: function ( $element ) {\n\n\t\tvar $register_form = $element.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"create_account\"]' ).first();\n\n\t\tif ( $register_form.length ) {\n\t\t\tTVE.main.EditMode.state_changed( undefined, {value: 'create_account'} );\n\t\t}\n\n\t},\n\t/**\n\t * Triggered when clicked on EDIT CHECKOUT ELEMENTS button from the UI\n\t *\n\t * Triggers the edit mode for the checkout element\n\t */\n\tedit_checkout_elements: function () {\n\t\tthis.checkout = TVE.ActiveElement;\n\t\tthis.checkout.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"create_account\"]' ).addClass( 'tve_editor_main_content' );\n\n\t\tTVE.add_action( 'tcb.edit_mode.enter', this.after_enter_edit_mode );\n\n\t\tTVE.main.EditMode.enter( TVE.ActiveElement, {\n\t\t\textra_element_class: 'canvas-mode',\n\t\t\tdefault_sidebar_params: [ 'elements' ],\n\t\t\tblur: true,\n\t\t\telement_selectable: false,\n\t\t\tstates: [\n\t\t\t\t{label: 'Register Form', value: 'create_account'},\n\t\t\t\t{label: 'Login Form', value: 'login'},\n\t\t\t\t{label: 'Password Recovery', value: 'forgot_password'},\n\t\t\t\t{label: 'Password Recovery Confirmation', value: 'reset_confirmation'}\n\t\t\t],\n\t\t\tcallbacks: {\n\n\t\t\t\texit: _.bind( function () {\n\n\t\t\t\t\tTVE.Editor_Page.focus_element( this.checkout );\n\n\t\t\t\t\tthis.checkout.find( '.tcb-tva-checkout-form-wrapper' ).addClass( 'tcb-permanently-hidden' ).removeClass( 'tve_editor_main_content' );\n\t\t\t\t\tthis.checkout.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"create_account\"]' ).removeClass( 'tcb-permanently-hidden' );\n\n\t\t\t\t\t//on exit make first state active: button and content\n\t\t\t\t\tthis.checkout.find( '.thrv-button-group-item' ).removeClass( 'tcb-active-state' );\n\t\t\t\t\tthis.checkout.find( '.thrv-button-group-item[data-instance=\"create_account\"]' ).addClass( 'tcb-active-state' );\n\n\t\t\t\t\tthis.toggle_button_group( 'login' );\n\n\t\t\t\t\tdelete this.checkout;\n\n\t\t\t\t\tTVE.remove_action( 'tcb.edit_mode.enter', this.after_enter_edit_mode );\n\t\t\t\t}, this ),\n\n\t\t\t\tstate_change: _.bind( function ( state ) {\n\t\t\t\t\tthis.checkout.find( '.tcb-tva-checkout-form-wrapper' ).addClass( 'tcb-permanently-hidden' ).removeClass( 'tve_editor_main_content' );\n\t\t\t\t\tthis.checkout.find( '.tcb-tva-checkout-form-wrapper[data-instance=\"' + state + '\"]' ).addClass( 'tve_editor_main_content' ).removeClass( 'tcb-permanently-hidden' ).trigger( 'click' );\n\n\t\t\t\t\tthis.checkout.find( '.tcb-active-state' ).removeClass( 'tcb-active-state' );\n\t\t\t\t\tthis.checkout.find( '.thrv-button-group-item[data-instance=\"' + state + '\"]' ).addClass( 'tcb-active-state' );\n\n\t\t\t\t\tthis.toggle_button_group( state );\n\n\t\t\t\t\tif ( this.checkout.find( 'form:visible' ).length ) {\n\t\t\t\t\t\tthis.checkout.find( 'form:visible' ).trigger( 'click' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tTVE.Editor_Page.blur();\n\t\t\t\t\t}\n\t\t\t\t}, this )\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * Show / Hide button group element depending on the selected state\n\t *\n\t * @param {string} state\n\t */\n\ttoggle_button_group: function ( state ) {\n\t\tthis.checkout.find( '.thrv-button-group' ).toggleClass( 'tcb-permanently-hidden', _.contains( this.states_with_no_button_group, state ) );\n\t},\n\n\t/**\n\t * Update Button Group Data Selector\n\t *\n\t * Called from the element_drop filter function\n\t */\n\tupdate_btn_group_data_selector: function ( $element ) {\n\t\tvar checkout_button_group_unique_identifier = $element.find( '.thrv-button-group' ).attr( 'data-ck-button-group' ),\n\t\t\tselector_with_active_cls = '[data-ck-button-group=\"' + checkout_button_group_unique_identifier + '\"] ' + BUTTON_GROUP_ITEM_SELECTOR + BUTTON_GROUP_ACTIVE_SELECTOR,\n\t\t\tselector_with_no_active_cls = '[data-ck-button-group=\"' + checkout_button_group_unique_identifier + '\"] ' + BUTTON_GROUP_ITEM_SELECTOR + ':not(' + BUTTON_GROUP_ACTIVE_SELECTOR + ')';\n\n\t\t_.each( $element.find( BUTTON_GROUP_ITEM_SELECTOR ), function ( item, index ) {\n\t\t\tvar $item = jQuery( item );\n\n\t\t\t$item.attr( 'data-selector', $item.hasClass( BUTTON_GROUP_ACTIVE_CLS ) ? selector_with_active_cls : selector_with_no_active_cls );\n\t\t} );\n\t},\n\n\tmanage_error_messages: function () {\n\t\tvar self = this,\n\t\t\t_modal = new TVE.Views.Modals.ErrorMessages( {\n\t\t\t\tel: TVE.modal.get_element( 'cf-error-messages' ),\n\t\t\t\tmodel: new Backbone.Model( this.settings.get( 'error_messages' ) )\n\t\t\t} );\n\n\t\t_modal.render_errors();\n\t\t_modal.restore_defaults = function () {\n\n\t\t\t_.each( self.settings.defaults().error_messages, function ( error, key, obj ) {\n\t\t\t\tthis._set( key, error );\n\t\t\t}, this );\n\n\t\t\tthis.render_errors();\n\t\t};\n\t\t_modal.before_save = function () {\n\n\t\t\tvar invalid_inputs = [],\n\t\t\t\tis_valid = function ( model ) {\n\n\t\t\t\t\tvar is_valid = true;\n\n\t\t\t\t\tfor ( var k in model.attributes ) {\n\t\t\t\t\t\tif ( model.get( k ).length <= 0 ) {\n\t\t\t\t\t\t\tinvalid_inputs.push( k );\n\t\t\t\t\t\t\tis_valid = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn is_valid;\n\t\t\t\t};\n\n\t\t\tthis.invalid_inputs = invalid_inputs;\n\t\t\tthis.is_valid = is_valid( this.model );\n\n\t\t\tself.settings.set( 'error_messages', this.model.toJSON() );\n\n\t\t};\n\t\t_modal.open();\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/checkout-component.js");
						},
						"checkout-form-component.js": function (exports, module, require) {
							eval("/**\n * Created by PhpStorm.\n * User: Ovidiu\n * Date: 10/16/2018\n * Time: 3:59 PM\n */\n( function ( $ ) {\n\tvar EditCheckoutItem = require( './edit-checkout-item' ),\n\t\tbase_model = TVE.BaseModel,\n\t\tinputs_collection = new Backbone.Collection( {} );\n\n\tmodule.exports = TVE.Views.Base.component.extend( {\n\t\t\tcontrols_init: function () {\n\n\t\t\t\tthis.ceckout_item_dropdown = new EditCheckoutItem( {\n\t\t\t\t\tconfig: this.config.FieldsControl.config,\n\t\t\t\t\tcollection: inputs_collection\n\t\t\t\t} );\n\n\t\t\t\tthis.controls.FieldsControl.attach_collection( inputs_collection );\n\n\t\t\t\t/**\n\t\t\t\t * Fields Items ORDER Change Listener\n\t\t\t\t */\n\t\t\t\tthis.listenTo( inputs_collection, 'change', _.bind( function () {\n\t\t\t\t\tvar itemsArr = [];\n\t\t\t\t\t/**\n\t\t\t\t\t * Make a clone of jQuery objects that store the cf items because it will lose references\n\t\t\t\t\t */\n\t\t\t\t\tinputs_collection.each( function ( model ) {\n\t\t\t\t\t\titemsArr.push( model.get( 'item' ).clone() );\n\t\t\t\t\t}, this );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Reorder the HTML with respect to inputs_collection\n\t\t\t\t\t */\n\t\t\t\t\tTVE.ActiveElement.find( '.tve-form-item' ).each( function ( index, ceitem ) {\n\t\t\t\t\t\t$( ceitem ).html( itemsArr[ index ].html() ).attr( 'class', itemsArr[ index ].attr( 'class' ) ).attr( 'data-css', itemsArr[ index ].attr( 'data-css' ) );\n\t\t\t\t\t}, this );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Update the FieldsControl indexes\n\t\t\t\t\t */\n\t\t\t\t\tthis.controls.FieldsControl.update( TVE.ActiveElement );\n\t\t\t\t}, this ) );\n\n\n\t\t\t\tthis.controls.FieldsControl.update = function ( $element ) {\n\t\t\t\t\t$element = ! $element ? TVE.ActiveElement : $element;\n\t\t\t\t\tvar items = [],\n\t\t\t\t\t\tform_elements = $element.find( '.tve-form-item' );\n\n\t\t\t\t\t_.each( form_elements, function ( item, index ) {\n\t\t\t\t\t\tvar $item = jQuery( item );\n\n\t\t\t\t\t\titems.push( {\n\t\t\t\t\t\t\titem: $item,\n\t\t\t\t\t\t\tlabel: $item.find( 'label' ).text().substring( 0, 20 )\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, this );\n\n\t\t\t\t\tinputs_collection.reset( items );\n\t\t\t\t};\n\n\t\t\t\tthis.controls.FieldsControl.on( 'item_click', _.bind( function ( model, row ) {\n\t\t\t\t\tvar $item = model.get( 'item' );\n\t\t\t\t\tif ( this.ceckout_item_dropdown.isOpen() ) {\n\t\t\t\t\t\tthis.ceckout_item_dropdown.onCancel();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar item_model = new base_model( this.ceckout_item_dropdown.get_data( $item ) );\n\t\t\t\t\tthis.listenTo( item_model, 'change', function ( model ) {\n\t\t\t\t\t\t$item.find( 'label' ).html( model.get( 'label' ) );\n\t\t\t\t\t\t$item.find( 'input' ).attr( 'placeholder', model.get( 'placeholder' ) ).attr( 'data-placeholder', model.get( 'placeholder' ) );\n\t\t\t\t\t} );\n\n\t\t\t\t\titem_model.saveState();\n\n\t\t\t\t\tthis.ceckout_item_dropdown.reset( item_model );\n\t\t\t\t\tthis.ceckout_item_dropdown.open( null, row );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}, this ) );\n\n\t\t\t},\n\t\t\tget_fields_control: function () {\n\t\t\t\treturn TVE.Views.Controls.PreviewList;\n\t\t\t}\n\t\t}\n\t);\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/checkout-form-component.js");
						},
						"edit-checkout-item.js": function (exports, module, require) {
							eval("var PanelBase = TVE.Views.Controls.DropPanel;\nmodule.exports = PanelBase.extend( {\n\ttemplate: TVE.tpl( 'edit-ce-item' ),\n\n\tafter_render: function () {\n\t\tthis.$label = this.$( '.tcb-ce-item-label' );\n\t\tthis.$placeholder = this.$( '.tcb-ce-item-placeholder' );\n\t},\n\n\t/**\n\t * Returns the data found inside the object\n\t *\n\t * @param $item - jQuery object\n\t * @returns object\n\t */\n\tget_data: function ( $item ) {\n\t\treturn {\n\t\t\tlabel: $item.find( 'label' ).text(),\n\t\t\tplaceholder: $item.find( 'input,textarea' ).attr( 'placeholder' )\n\t\t};\n\t},\n\n\t/**\n\t * Executed when a setting from the drop panel is changed\n\t *\n\t * @param $element\n\t * @param dom\n\t */\n\tchange_setting: function ( $element, dom ) {\n\t\tvar attributes_obj = {},\n\t\t\tsetting = dom.getAttribute( 'data-setting' );\n\n\t\tattributes_obj[ setting ] = dom.value;\n\n\t\tthis.model.set( attributes_obj );\n\t},\n\n\t/**\n\t * Read data from the model\n\t *\n\t * @param model\n\t */\n\treset: function ( model ) {\n\t\tthis.model = model;\n\t\tthis.dom();\n\t},\n\n\t/**\n\t * Updates the controls to their corresponding values\n\t */\n\tdom: function () {\n\t\t//Text\n\t\tthis.$label.val( this.model.get( 'label' ) );\n\t\tthis.$placeholder.val( this.model.get( 'placeholder' ) );\n\t},\n\t/**\n\t * Cancel the changes and close the panel\n\t */\n\tcancel: function () {\n\t\tif ( this.model.get( '__new' ) ) {\n\t\t\t/**\n\t\t\t * if is new, we remove the last model added inside the collection\n\t\t\t */\n\t\t\tthis.collection.at( this.collection.length - 1 ).destroy();\n\t\t} else {\n\t\t\tthis.model.restoreState();\n\t\t}\n\t},\n\n\t/**\n\t * Applies the changes. No action needed here\n\t */\n\tapply: function () {\n\t\tthis.model.unset( '__new' );\n\n\t\tthis.collection.trigger( 'change' );\n\t}\n} );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/edit-checkout-item.js");
						},
						"main.js": function (exports, module, require) {
							eval("/**\n * Created by PhpStorm.\n * User: Ovidiu\n * Date: 10/15/2018\n * Time: 5:42 PM\n */\n\n( function ( $ ) {\n\n\t/**\n\t * On TCB Main Ready\n\t */\n\t$( window ).on( 'tcb_main_ready', function () {\n\t\tTVE.Views.Components.checkout = require( './checkout-component' );\n\t\tTVE.Views.Components.checkout_form = require( './checkout-form-component' );\n\t} );\n\n} )( jQuery );\n//# sourceURL=workspace/tcb-bridge/assets/js/internal/main.js");
						}
					}
				}
			}
		}
	}
})("workspace/tcb-bridge/assets/js/internal/main");
